var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/ApiModule.html",[0,1.213,1,2.748]],["body/modules/ApiModule.html",[0,1.604,1,5.528,2,1.553,3,2.265,4,3.174,5,3.174,6,4.554,7,0.016,8,4.554,9,4.554,10,4.251,11,4.251,12,4.251,13,2.499,14,1.795,15,1.795,16,0.112,17,0.097,18,0.097,19,3.664,20,2.499,21,4.178,22,4.178,23,4.178,24,4.178,25,4.178,26,4.749,27,2.949,28,0.338,29,0.652,30,2.256,31,1.627,32,3.664,33,3.664,34,3.664,35,3.664,36,3.664,37,3.664,38,3.664,39,3.664,40,3.664,41,3.664,42,3.664,43,3.664,44,3.664,45,0.112,46,0.207,47,0.007,48,0.01,49,0.007]],["title/classes/ArticleEntity.html",[46,0.218,50,2.545]],["body/classes/ArticleEntity.html",[7,0.016,16,0.095,17,0.082,18,0.082,28,0.235,45,0.095,46,0.175,47,0.006,48,0.009,49,0.006,50,4.308,51,0.707,52,2.686,53,1.212,54,3.092,55,0.363,56,1.367,57,3.293,58,5.349,59,3.809,60,5.349,61,5.349,62,5.349,63,5.349,64,3.092,65,5.349,66,4.161,67,1.574,68,1.615,69,0.914,70,1.128,71,1.815,72,2.686,73,3.922,74,0.951,75,3.101,76,3.4,77,2.045,78,2.412,79,3.101,80,4.022,81,2.412,82,1.835,83,3.101,84,5.349,85,3.101,86,5.349,87,3.101,88,3.922,89,3.036,90,3.101,91,2.616,92,3.922,93,3.101,94,4.342,95,3.101,96,3.101,97,3.101,98,3.101,99,2.788,100,3.101,101,3.101,102,1.793,103,2.788,104,3.523,105,2.986,106,4.633,107,1.909,108,1.058,109,0.506,110,3.101,111,2.045,112,2.412,113,3.922,114,2.412,115,3.101,116,3.101]],["title/controllers/ArticlesApiController.html",[21,2.748,117,1.496]],["body/controllers/ArticlesApiController.html",[7,0.016,16,0.077,17,0.066,18,0.066,20,1.231,21,2.754,28,0.277,29,0.447,45,0.077,46,0.142,47,0.005,48,0.007,49,0.005,55,0.294,57,2.903,67,1.738,68,1.96,69,0.653,70,1.211,71,1.308,74,0.686,108,0.858,109,0.864,117,1.5,118,2.177,119,1.267,120,2.723,121,1.807,122,3.519,123,2.664,124,1.657,125,2.681,126,2.887,127,1.79,128,2.514,129,1.362,130,1.207,131,2.551,132,1.734,133,2.352,134,2.177,135,1.79,136,2.514,137,5.229,138,2.177,139,3.35,140,2.514,141,1.895,142,2.177,143,3.26,144,1.79,145,2.514,146,3.491,147,1.657,148,1.657,149,1.657,150,2.381,151,1.547,152,1.297,153,1.37,154,1.547,155,1.657,156,1.547,157,2.551,158,1.657,159,1.911,160,1.297,161,3.491,162,1.547,163,1.547,164,1.547,165,2.514,166,1.547,167,0.597,168,2.177,169,2.571,170,1.807,171,2.341,172,1.79,173,1.475,174,2.177,175,2.571,176,3.85,177,3.109,178,3.437,179,2.147,180,3.109,181,2.903,182,1.955,183,2.551,184,1.657,185,2.177,186,3.109,187,2.094,188,1.657,189,1.657,190,2.551,191,2.551,192,3.35,193,2.177,194,2.177,195,1.657,196,1.657,197,2.551,198,2.177]],["title/modules/ArticlesModule.html",[0,1.213,6,2.545]],["body/modules/ArticlesModule.html",[0,1.994,2,2.162,3,2.817,6,5.065,7,0.015,13,3.107,14,2.498,15,2.498,16,0.156,17,0.134,18,0.134,28,0.279,29,0.907,45,0.156,46,0.288,47,0.01,48,0.012,49,0.01,199,4.416,200,4.416,201,4.416,202,5.25,203,5.099,204,3.458,205,3.667,206,5.099]],["title/injectables/ArticlesService.html",[202,2.545,207,0.779]],["body/injectables/ArticlesService.html",[7,0.016,16,0.115,17,0.099,18,0.099,28,0.262,29,0.669,45,0.115,46,0.212,47,0.007,48,0.01,49,0.007,55,0.44,68,2.102,69,0.791,70,1.258,74,0.872,109,1.047,119,1.701,121,1.773,123,2.42,129,1.65,130,1.463,132,2.337,173,1.876,179,1.283,202,3.424,207,1.048,208,1.458,209,3.257,210,3.949,211,3.197,212,3.197,213,5.194,214,4.439,215,3.761,216,3.761,217,3.197,218,3.761,219,3.197,220,3.761,221,3.698,222,5.08,223,3.761,224,1.752,225,4.498,226,2.315,227,5.831,228,3.761,229,4.991,230,2.925,231,3.761,232,3.761]],["title/controllers/AuthApiController.html",[22,2.748,117,1.496]],["body/controllers/AuthApiController.html",[7,0.016,16,0.086,17,0.074,18,0.074,20,1.371,22,2.988,28,0.312,29,0.498,45,0.086,46,0.158,47,0.005,48,0.008,49,0.005,55,0.328,56,0.845,67,1.685,69,0.862,70,0.456,71,1.244,74,0.652,91,1.627,102,1.617,109,0.822,117,1.627,119,1.374,122,2.583,125,2.485,129,1.295,130,1.148,132,1.649,150,2.583,151,1.722,152,1.444,153,1.526,154,2.583,162,1.722,163,1.722,164,1.722,166,1.722,173,1.403,179,0.955,181,2.583,233,2.423,234,4.896,235,4.352,236,4.197,237,2.798,238,4.352,239,2.798,240,4.197,241,4.846,242,2.798,243,4.197,244,3.635,245,3.635,246,4.197,247,4.197,248,2.798,249,2.798,250,2.798,251,2.741,252,3.635,253,4.197,254,3.265,255,2.798,256,3.32,257,3.432,258,4.197,259,4.352,260,2.798,261,2.798,262,3.585,263,2.798,264,4.197,265,2.798,266,2.372,267,3.635,268,3.635,269,2.798,270,2.798,271,1.992,272,4.197,273,4.361,274,4.197,275,4.361,276,4.846,277,2.423,278,1.134,279,2.798,280,1.304,281,3.1,282,2.798,283,1.992,284,2.177,285,2.177,286,2.798,287,2.798,288,2.423,289,1.722,290,2.798,291,2.798,292,4.361,293,2.423,294,4.361,295,1.304,296,2.798,297,2.423,298,2.177,299,2.798,300,2.798,301,2.798,302,2.423,303,2.798,304,2.798,305,2.798,306,2.798,307,2.423]],["title/modules/AuthModule.html",[0,1.213,8,2.545]],["body/modules/AuthModule.html",[0,1.573,2,1.511,3,2.222,7,0.016,8,5.197,10,4.214,11,4.214,12,4.214,13,2.451,14,1.746,15,1.746,16,0.109,17,0.094,18,0.094,27,2.892,28,0.332,29,0.634,45,0.109,46,0.201,47,0.007,48,0.01,49,0.007,204,2.728,205,2.892,281,4.641,308,3.087,309,3.087,310,3.087,311,3.087,312,4.514,313,4.514,314,4.514,315,4.514,316,3.564,317,3.564,318,3.564,319,5.003,320,1.943,321,3.564,322,2.772,323,3.564,324,2.537,325,3.564,326,3.564,327,3.564,328,3.564,329,3.564,330,3.564,331,3.564,332,3.087,333,3.087,334,3.564,335,3.564,336,3.564]],["title/injectables/AuthService.html",[207,0.779,281,2.376]],["body/injectables/AuthService.html",[7,0.016,16,0.115,17,0.099,18,0.099,28,0.314,29,0.669,45,0.115,46,0.212,47,0.007,48,0.01,49,0.007,55,0.44,67,1.39,69,0.733,74,0.77,109,0.971,119,1.701,120,2.306,129,1.53,130,1.356,132,1.701,133,1.67,141,1.842,167,0.893,170,1.283,171,1.458,173,1.447,207,1.048,208,1.458,234,4.04,235,4.04,251,3.143,266,2.72,271,5.08,281,3.197,294,3.257,322,2.925,337,3.257,338,1.633,339,3.761,340,5.152,341,3.709,342,7.136,343,3.761,344,5.194,345,3.761,346,5.194,347,3.761,348,3.424,349,3.761,350,3.761,351,2.677,352,2.925,353,3.761,354,3.257,355,3.761,356,2.772,357,3.761,358,2.677,359,3.761,360,3.761,361,2.479,362,3.761,363,3.761,364,3.761,365,3.257,366,3.761,367,3.761]],["title/classes/BaseController.html",[46,0.218,368,3.002]],["body/classes/BaseController.html",[7,0.014,16,0.184,17,0.158,18,0.158,45,0.184,46,0.338,47,0.012,48,0.014,49,0.012,51,1.367,368,5.44,369,2.541,370,5.192]],["title/classes/BaseDto.html",[46,0.218,371,2.231]],["body/classes/BaseDto.html",[7,0.015,16,0.169,17,0.145,18,0.145,45,0.169,46,0.311,47,0.011,48,0.013,49,0.011,51,1.257,69,0.679,74,0.714,109,0.899,125,2.954,129,1.417,130,1.257,176,4.131,338,1.733,369,2.82,371,3.845,372,4.773,373,4.386,374,5.511,375,3.005,376,3.392]],["title/injectables/BasicAuthGuard.html",[207,0.779,283,2.748]],["body/injectables/BasicAuthGuard.html",[7,0.015,16,0.174,17,0.15,18,0.15,28,0.298,29,1.012,45,0.174,46,0.321,47,0.011,48,0.013,49,0.011,53,1.522,207,1.368,208,2.204,283,4.826,284,4.423,320,3.1,377,4.048,378,4.423,379,5.686]],["title/injectables/BasicStrategy.html",[207,0.779,313,2.545]],["body/injectables/BasicStrategy.html",[7,0.016,16,0.126,17,0.108,18,0.108,28,0.315,29,0.732,45,0.126,46,0.232,47,0.008,48,0.011,49,0.008,53,1.102,55,0.482,67,1.669,69,0.681,70,1.167,74,0.715,109,0.901,119,1.809,120,2.417,129,1.421,130,1.259,132,1.348,141,2.017,159,2.898,160,2.125,166,2.534,167,0.977,169,2.245,170,1.405,171,1.596,172,2.931,173,1.147,175,2.245,178,2.125,179,1.405,207,1.115,208,1.596,266,1.745,289,2.534,313,4.11,320,2.245,338,1.294,380,3.566,381,4.297,382,3.566,383,4.117,384,4.784,385,4.849,386,4.117,387,3.012,388,3.203,389,2.931,390,4.117,391,3.203,392,3.933,393,3.566,394,2.931,395,3.203,396,2.715,397,3.566,398,3.566]],["title/guards/CanGuard.html",[399,3.002,400,3.002]],["body/guards/CanGuard.html",[7,0.016,16,0.128,17,0.11,18,0.11,28,0.295,29,0.743,45,0.128,46,0.236,47,0.008,48,0.011,49,0.008,55,0.489,67,1.493,69,0.687,74,0.722,89,2.156,91,2.162,102,2.415,109,0.91,119,1.827,120,2.434,129,1.434,130,1.272,132,1.368,159,2.972,160,2.156,167,1.324,170,1.904,171,1.619,173,1.554,207,1.125,338,1.754,351,2.974,356,2.599,387,3.041,400,4.339,401,3.249,402,3.618,403,5.804,404,3.618,405,6.221,406,4.177,407,4.831,408,5.212,409,4.177,410,3.249,411,3.618,412,6.279,413,4.177,414,4.177,415,3.618,416,3.618,417,3.249,418,4.177]],["title/controllers/CategoriesApiController.html",[23,2.748,117,1.496]],["body/controllers/CategoriesApiController.html",[7,0.016,16,0.075,17,0.064,18,0.064,20,1.193,23,2.689,28,0.283,29,0.433,45,0.075,46,0.138,47,0.005,48,0.007,49,0.005,55,0.285,57,2.846,64,2.183,67,0.652,68,1.94,69,0.642,70,1.205,71,1.287,74,0.674,108,0.832,109,0.85,114,5,117,1.464,119,1.237,120,2.703,121,1.924,122,3.469,123,2.626,124,1.607,125,2.762,127,1.735,129,1.339,130,1.188,131,4.446,132,1.706,133,2.313,135,1.735,144,1.735,146,3.434,147,1.607,148,1.607,149,1.607,150,2.325,151,1.5,152,1.257,153,1.328,154,1.5,155,1.607,159,1.874,160,1.257,161,3.434,162,1.5,163,1.5,164,1.5,167,0.896,169,2.521,170,1.778,171,2.312,173,1.451,175,2.521,176,3.814,177,3.049,178,3.405,179,2.123,180,3.049,181,2.846,183,2.49,184,1.607,186,3.049,187,2.054,188,1.607,189,2.49,190,2.49,191,2.49,195,1.607,196,1.607,197,2.49,338,0.766,356,1.76,419,2.11,420,3.011,421,2.437,422,1.895,423,2.437,424,2.437,425,3.777,426,2.437,427,1.895,428,3.434,429,2.437,430,2.846,431,2.437,432,1.895,433,2.689,434,1.895,435,2.437,436,2.437,437,2.437,438,3.271,439,2.437,440,2.437,441,2.437,442,2.437]],["title/modules/CategoriesModule.html",[0,1.213,9,2.545]],["body/modules/CategoriesModule.html",[0,1.943,2,2.073,3,2.744,7,0.015,9,5.019,13,3.027,14,2.395,15,2.395,16,0.15,17,0.129,18,0.129,27,2.827,28,0.313,29,0.87,30,3.01,31,2.172,45,0.15,46,0.276,47,0.009,48,0.012,49,0.009,76,2.827,204,3.369,205,3.572,430,4.874,443,4.235,444,4.235,445,4.235,446,4.89,447,4.89,448,3.804,449,4.89]],["title/injectables/CategoriesService.html",[207,0.779,430,2.376]],["body/injectables/CategoriesService.html",[7,0.016,16,0.09,17,0.077,18,0.077,28,0.299,29,0.521,31,1.301,45,0.09,46,0.245,47,0.006,48,0.008,49,0.006,55,0.343,64,2.992,68,1.311,69,0.789,70,1.197,74,0.858,76,3.308,89,1.512,108,1,109,1.044,114,4.754,119,1.422,120,2.894,121,1.482,123,2.412,129,1.646,130,1.46,132,2.097,133,2.542,167,0.695,170,1,171,2.219,173,1.783,179,1,207,0.876,208,1.136,210,3.523,211,2.673,212,2.673,217,2.673,219,2.673,224,1.365,226,1.803,338,1.365,356,1.365,387,2.368,420,3.83,428,4.487,430,2.673,433,3.092,448,2.279,450,2.537,451,4.343,452,2.93,453,3.523,454,2.93,455,4.343,456,4.343,457,2.93,458,2.93,459,4.343,460,2.93,461,2.93,462,2.93,463,2.93,464,2.93,465,1.932,466,2.93,467,1.435,468,3.762,469,2.93,470,2.93,471,2.93,472,2.93,473,2.93,474,4.343,475,2.93,476,2.93,477,2.93,478,2.537,479,2.93,480,2.93,481,2.93,482,2.279]],["title/classes/CategoryEntity.html",[46,0.218,76,2.231]],["body/classes/CategoryEntity.html",[7,0.016,16,0.123,17,0.105,18,0.105,28,0.29,45,0.123,46,0.226,47,0.008,48,0.01,49,0.008,50,4.342,51,0.912,53,1.451,54,3.552,55,0.469,56,1.636,64,3.552,68,1.855,69,0.874,70,1.204,71,1.7,72,3.466,73,4.694,74,0.891,76,3.133,77,2.639,82,2.196,89,2.797,94,4.236,99,3.336,103,3.782,105,3.573,107,2.464,108,1.366,109,1.074,111,3.573,224,1.865,229,3.113,230,4.78,257,3.35,369,1.697,420,2.313,433,2.849,483,3.466,484,4.002,485,4.002,486,4.002,487,2.849,488,4.002,489,4.002,490,3.466,491,4.002,492,2.849,493,3.466,494,4.002]],["title/classes/CreateArticleDto.html",[46,0.218,214,2.545]],["body/classes/CreateArticleDto.html",[7,0.014,16,0.184,17,0.158,18,0.158,45,0.184,46,0.338,47,0.012,48,0.014,49,0.012,51,1.367,214,4.611,495,5.192,496,4.663]],["title/classes/CreateCategoryDto.html",[46,0.218,420,2.231]],["body/classes/CreateCategoryDto.html",[7,0.015,16,0.131,17,0.113,18,0.113,28,0.28,45,0.131,46,0.32,47,0.008,48,0.011,49,0.008,51,0.978,55,0.502,56,1.714,64,3.915,69,0.835,70,1.181,71,1.572,74,0.877,76,2.48,109,1.105,125,2.521,129,1.103,130,0.978,167,1.8,257,3.469,338,1.349,373,3.743,375,2.339,376,2.641,420,3.282,432,5.479,448,3.337,467,2.101,497,3.337,498,5.511,499,4.29,500,4.917,501,4.29,502,4.29,503,4.29,504,4.29,505,3.692,506,3.678,507,4.29,508,4.29]],["title/classes/CreatePermissionDto.html",[46,0.218,509,2.231]],["body/classes/CreatePermissionDto.html",[7,0.016,16,0.149,17,0.128,18,0.128,28,0.322,45,0.149,46,0.347,47,0.009,48,0.012,49,0.009,51,1.107,55,0.569,56,1.857,69,0.599,70,1.004,71,1.2,74,0.629,82,1.968,109,1.102,167,1.603,278,1.968,280,2.263,295,2.263,467,2.379,505,3.354,506,3.556,509,3.556,510,4.786,511,3.778,512,4.857,513,4.857,514,2.867,515,4.207,516,2.99,517,2.99,518,3.458,519,2.059,520,3.778,521,4.857,522,4.207]],["title/classes/CreateRoleDto.html",[46,0.218,523,2.231]],["body/classes/CreateRoleDto.html",[7,0.016,16,0.149,17,0.128,18,0.128,28,0.322,45,0.149,46,0.347,47,0.009,48,0.012,49,0.009,51,1.107,55,0.569,56,1.857,69,0.599,70,1.004,71,1.2,74,0.629,82,1.968,109,1.102,167,1.603,278,1.968,280,2.263,295,2.263,467,2.379,505,3.354,506,3.556,514,2.867,515,4.207,516,2.99,517,2.99,518,3.458,522,4.207,523,3.556,524,4.786,525,3.778,526,4.857,527,4.857,528,2.263,529,3.458,530,4.857]],["title/classes/CreateSessionDto.html",[46,0.218,531,2.376]],["body/classes/CreateSessionDto.html",[7,0.015,16,0.158,17,0.136,18,0.136,28,0.227,45,0.158,46,0.291,47,0.01,48,0.012,49,0.01,51,1.175,55,0.604,56,1.928,67,1.857,69,0.855,70,1.183,74,0.898,266,2.941,289,3.173,358,4.94,361,4.575,531,3.931,532,6.281,533,4.009,534,5.154,535,5.154,536,5.154]],["title/classes/CreateUserDto.html",[46,0.218,126,2.104]],["body/classes/CreateUserDto.html",[7,0.016,16,0.113,17,0.097,18,0.097,28,0.294,45,0.113,46,0.288,47,0.007,48,0.01,49,0.007,51,0.838,55,0.43,56,1.543,69,0.823,70,1.18,71,1.569,74,0.864,91,1.424,109,1.089,125,2.269,126,2.786,129,0.945,130,0.838,141,2.878,156,4.254,167,1.799,278,1.489,280,1.712,295,2.96,338,1.155,373,3.369,375,2.003,376,2.261,467,1.799,498,5.089,505,3.64,506,3.859,514,3.111,516,2.261,517,2.261,518,2.616,537,2.858,538,3.874,539,3.617,540,3.674,541,3.672,542,3.674,543,3.674,544,3.674,545,3.674,546,3.674,547,3.674,548,3.674,549,3.674,550,4.426,551,3.182,552,2.616,553,2.422,554,3.182,555,2.858,556,4.426,557,2.858,558,2.858,559,3.182]],["title/classes/CreateUserRequestDto.html",[46,0.218,560,2.748]],["body/classes/CreateUserRequestDto.html",[7,0.015,16,0.107,17,0.092,18,0.092,28,0.288,45,0.151,46,0.278,47,0.007,48,0.01,49,0.007,51,0.793,55,0.407,56,1.484,67,1.751,69,0.764,70,1.163,71,1.532,74,0.803,82,2.311,91,1.348,109,1.012,141,2.794,156,4.027,167,1.782,170,1.187,234,3.825,254,3.825,257,3.888,278,1.409,280,1.62,295,2.889,467,1.703,505,3.567,506,3.782,514,3.048,516,2.141,517,2.141,518,2.476,538,4.088,539,3.511,541,3.584,550,4.259,551,3.012,552,2.476,553,2.293,554,3.012,555,2.705,556,4.259,557,2.705,558,2.705,559,3.012,560,3.501,561,2.476,562,4.259,563,3.478,564,3.478,565,5.37,566,3.478,567,3.478,568,4.061,569,3.478,570,3.478,571,3.825,572,4.917,573,4.259,574,3.478,575,3.478,576,3.012,577,3.478,578,3.478]],["title/controllers/HaloController.html",[117,1.496,579,2.748]],["body/controllers/HaloController.html",[7,0.016,16,0.156,17,0.134,18,0.134,20,2.489,28,0.303,29,1.226,45,0.156,46,0.287,47,0.01,48,0.012,49,0.01,55,0.595,70,0.829,71,1.255,74,0.658,117,1.97,119,2.073,132,1.664,173,1.415,579,4.506,580,4.4,581,5.081,582,6.329,583,7.216,584,5.081,585,5.081,586,6.329,587,5.081,588,5.081,589,5.081]],["title/guards/HasRolesGuard.html",[399,3.002,590,3.002]],["body/guards/HasRolesGuard.html",[7,0.016,16,0.133,17,0.114,18,0.114,28,0.281,29,0.77,45,0.133,46,0.244,47,0.008,48,0.011,49,0.008,55,0.507,67,1.529,69,0.704,74,0.739,89,2.234,91,2.214,102,2.502,109,0.932,119,1.87,129,1.469,130,1.302,132,1.418,166,2.664,167,1.027,170,1.949,173,1.591,207,1.152,338,1.361,351,3.082,401,3.367,403,5.886,404,3.749,405,6.284,407,4.946,408,5.287,410,3.367,411,3.749,415,3.749,416,3.749,417,3.367,590,4.442,591,5.536,592,3.749,593,4.329,594,4.329,595,5.711,596,5.711,597,4.329,598,4.329,599,4.329,600,4.329]],["title/injectables/JwtAuthGuard.html",[152,1.992,207,0.779]],["body/injectables/JwtAuthGuard.html",[7,0.015,16,0.174,17,0.15,18,0.15,28,0.298,29,1.012,45,0.174,46,0.321,47,0.011,48,0.013,49,0.011,53,1.522,152,3.498,153,3.1,207,1.368,208,2.204,320,3.1,377,4.048,378,4.423,601,5.686]],["title/injectables/JwtStrategy.html",[207,0.779,314,2.545]],["body/injectables/JwtStrategy.html",[7,0.016,16,0.102,17,0.088,18,0.088,28,0.303,29,0.593,45,0.102,46,0.188,47,0.006,48,0.009,49,0.006,53,0.892,55,0.39,67,1.723,69,0.75,70,0.544,74,0.618,82,1.35,89,2.461,109,0.778,119,1.562,120,2.16,129,1.227,130,1.088,132,1.091,133,1.48,159,2.794,160,1.719,167,0.791,169,1.817,170,1.628,171,1.849,173,0.928,175,1.817,178,1.719,179,1.137,207,0.962,208,1.292,235,2.592,238,3.71,241,4.825,245,2.886,259,2.592,262,2.372,267,4.131,268,4.131,271,4.582,297,2.886,298,2.592,314,3.145,320,1.817,324,2.372,333,2.886,338,1.5,340,4.131,341,3.516,348,3.673,352,2.592,356,2.223,361,3.145,365,4.131,381,3.71,388,2.592,389,2.372,391,2.592,392,3.396,395,2.592,396,2.197,573,2.886,602,2.886,603,3.332,604,3.332,605,4.77,606,3.332,607,3.332,608,3.332,609,3.332,610,3.332,611,3.332,612,3.332,613,3.332,614,3.332,615,3.332,616,3.332,617,3.332,618,3.332,619,3.332,620,3.332,621,3.332,622,3.332,623,3.332,624,3.332,625,3.332,626,2.886,627,3.332,628,3.332,629,3.332,630,3.332,631,3.332,632,2.886,633,4.131,634,3.332,635,3.332,636,3.332,637,3.332,638,3.332,639,3.332,640,3.332]],["title/injectables/LocalAuthGuard.html",[207,0.779,641,3.002]],["body/injectables/LocalAuthGuard.html",[7,0.015,16,0.174,17,0.15,18,0.15,28,0.298,29,1.012,45,0.174,46,0.321,47,0.011,48,0.013,49,0.011,53,1.522,207,1.368,208,2.204,320,3.1,377,4.048,378,4.423,641,5.273,642,4.924,643,5.686]],["title/classes/LocalBaseEntity.html",[46,0.218,644,3.002]],["body/classes/LocalBaseEntity.html",[7,0.015,16,0.151,17,0.13,18,0.13,28,0.217,45,0.151,46,0.278,47,0.01,48,0.012,49,0.01,51,1.123,53,1.661,54,3.587,55,0.577,69,0.607,70,0.803,74,0.804,108,1.681,109,0.803,129,1.266,130,1.123,173,1.372,338,1.548,369,2.881,375,2.684,376,3.031,396,3.246,644,5.286,645,4.264,646,6.796,647,4.827,648,6.796,649,6.206,650,7.51,651,4.924,652,4.924,653,4.924,654,4.924]],["title/injectables/LocalStrategy.html",[207,0.779,315,2.545]],["body/injectables/LocalStrategy.html",[7,0.016,16,0.127,17,0.109,18,0.109,28,0.315,29,0.735,45,0.127,46,0.233,47,0.008,48,0.011,49,0.008,53,1.105,55,0.484,67,1.671,69,0.682,70,1.168,74,0.717,109,0.903,119,1.813,120,2.42,129,1.423,130,1.262,132,1.352,141,2.022,159,2.901,160,2.131,166,2.542,167,0.98,169,2.251,170,1.409,171,1.601,172,2.94,173,1.15,175,2.251,178,2.131,179,1.409,207,1.117,208,1.601,266,1.75,289,2.542,315,3.649,320,2.251,338,1.298,381,4.305,382,3.576,384,4.793,385,4.856,387,3.018,388,3.212,389,2.94,391,3.212,392,3.94,393,3.576,394,2.94,395,3.212,396,2.722,397,3.576,398,3.576,655,3.576,656,4.129,657,4.129,658,3.576]],["title/classes/PermissionDto.html",[46,0.218,659,2.545]],["body/classes/PermissionDto.html",[7,0.016,16,0.142,17,0.122,18,0.122,28,0.307,45,0.142,46,0.262,47,0.009,48,0.012,49,0.009,51,1.057,53,1.599,55,0.543,56,1.803,68,1.995,69,0.736,70,1.138,71,1.476,74,0.773,82,1.879,109,1.078,167,1.755,278,1.879,280,2.161,295,2.783,369,1.966,371,3.819,514,3.079,519,1.966,541,3.453,659,3.938,660,4.016,661,5.973,662,5.973,663,4.637,664,4.637,665,3.057,666,3.057,667,3.301,668,3.301]],["title/classes/PermissionEntity.html",[46,0.218,519,1.636]],["body/classes/PermissionEntity.html",[7,0.016,16,0.126,17,0.108,18,0.108,28,0.306,45,0.126,46,0.232,47,0.008,48,0.011,49,0.008,51,0.939,53,1.478,54,3.603,55,0.482,56,1.668,67,1.102,68,1.882,69,0.821,70,1.087,71,1.646,74,0.863,77,3.642,82,2.238,89,2.851,91,2.583,94,3.4,99,3.4,102,2.38,103,3.837,105,4.11,107,2.534,108,1.405,109,1.087,224,1.918,369,1.745,487,2.931,492,2.931,509,2.38,519,2.342,528,3.104,669,3.566,670,4.11,671,4.438,672,4.117,673,4.117,674,4.117,675,4.117,676,2.931,677,3.203,678,4.117,679,3.566,680,2.715,681,3.566]],["title/controllers/PermissionsApiController.html",[24,2.748,117,1.496]],["body/controllers/PermissionsApiController.html",[7,0.016,16,0.075,17,0.064,18,0.064,20,1.195,24,2.692,28,0.283,29,0.434,45,0.075,46,0.138,47,0.005,48,0.007,49,0.005,55,0.286,57,2.849,67,0.653,68,1.942,69,0.642,70,1.206,71,1.288,74,0.675,108,0.833,109,0.973,117,1.466,119,1.238,120,2.704,121,1.925,122,3.472,123,2.628,124,1.609,125,2.764,127,1.738,129,1.341,130,1.189,131,4.448,132,1.707,133,2.315,135,1.738,144,1.738,146,3.437,147,1.609,148,1.609,149,1.609,150,2.328,151,1.502,152,1.26,153,1.331,154,1.502,155,1.609,159,1.876,160,1.26,161,3.437,162,1.502,163,1.502,164,1.502,167,0.898,169,2.524,170,1.779,171,2.313,173,1.452,175,2.524,176,3.816,177,3.052,178,3.407,179,2.124,180,3.052,181,2.849,183,2.493,184,1.609,186,3.052,187,2.315,188,1.609,189,2.493,190,2.493,191,2.493,195,1.609,196,1.609,197,2.493,338,0.767,356,1.762,422,1.899,427,1.899,438,3.275,509,3.013,510,1.899,676,2.692,682,2.114,683,2.441,684,2.441,685,2.114,686,3.275,687,2.441,688,3.437,689,2.441,690,1.899,691,2.849,692,2.441,693,2.114,694,3.959,695,2.441,696,2.441,697,2.441,698,2.441]],["title/modules/PermissionsModule.html",[0,1.213,10,2.376]],["body/modules/PermissionsModule.html",[0,1.943,2,2.073,3,2.744,7,0.015,10,4.686,13,3.027,14,2.395,15,2.395,16,0.15,17,0.129,18,0.129,27,2.827,28,0.313,29,0.87,30,3.01,31,2.172,45,0.15,46,0.276,47,0.009,48,0.012,49,0.009,204,3.369,205,3.572,519,2.073,520,3.804,691,4.874,699,4.235,700,4.235,701,4.235,702,4.89,703,4.89,704,4.89]],["title/injectables/PermissionsService.html",[207,0.779,691,2.376]],["body/injectables/PermissionsService.html",[7,0.016,16,0.092,17,0.079,18,0.079,28,0.284,29,0.532,31,1.328,45,0.092,46,0.169,47,0.006,48,0.009,49,0.006,55,0.35,68,1.582,69,0.822,70,1.222,74,0.886,108,1.021,109,1.16,119,1.444,120,2.904,121,1.505,123,2.055,129,1.715,130,1.521,132,2.185,133,2.326,167,0.71,170,1.505,171,2.031,173,1.858,179,1.021,207,0.89,208,1.16,210,3.559,211,2.715,212,2.715,217,2.715,219,2.715,221,3.14,224,1.394,226,1.841,338,1.386,356,1.394,387,3.152,453,3.559,465,1.972,482,3.43,509,3.563,519,1.268,520,2.327,676,3.14,688,4.514,691,2.715,694,2.715,705,2.59,706,3.819,707,3.819,708,2.991,709,2.991,710,4.41,711,4.41,712,2.991,713,2.991,714,3.819,715,2.991,716,2.991,717,2.991,718,3.819,719,2.991,720,2.991,721,2.991,722,2.991,723,4.41,724,2.991,725,2.991,726,2.991,727,2.991,728,4.41,729,2.59]],["title/classes/RoleDto.html",[46,0.218,730,3.002]],["body/classes/RoleDto.html",[7,0.016,16,0.129,17,0.111,18,0.111,28,0.308,45,0.129,46,0.238,47,0.008,48,0.011,49,0.008,51,0.961,53,1.502,55,0.494,56,1.694,68,1.904,69,0.777,70,1.097,71,1.386,74,0.817,82,1.707,109,1.097,125,1.871,129,1.084,130,0.961,167,1.709,179,1.438,187,1.871,278,1.707,280,1.964,295,2.614,338,1.325,369,1.786,371,3.646,373,3.699,376,2.594,514,2.939,528,3.133,529,3,541,3.243,659,2.779,665,2.779,667,3,668,3,694,2.594,730,4.364,731,3.65,732,4.214,733,5.61,734,4.214,735,4.214,736,3.65,737,3.65,738,4.214,739,4.214,740,4.214]],["title/classes/RoleEntity.html",[46,0.218,528,1.798]],["body/classes/RoleEntity.html",[7,0.016,16,0.125,17,0.108,18,0.108,28,0.305,45,0.125,46,0.231,47,0.008,48,0.011,49,0.008,51,0.933,53,1.473,54,3.593,55,0.48,56,1.661,67,1.096,68,1.877,69,0.819,70,1.084,71,1.642,74,0.861,77,3.628,78,3.184,82,1.659,89,2.84,91,2.577,94,3.387,99,3.387,102,2.366,103,3.826,104,4.28,105,4.098,107,2.52,108,1.397,109,1.084,187,2.76,224,1.907,369,1.735,487,2.915,492,2.915,519,2.818,523,2.366,528,2.564,666,2.699,671,4.425,694,2.52,741,3.545,742,4.094,743,4.094,744,4.094,745,4.094,746,2.915,747,4.094,748,3.545,749,4.094]],["title/controllers/RolesApiController.html",[25,2.748,117,1.496]],["body/controllers/RolesApiController.html",[7,0.016,16,0.076,17,0.065,18,0.065,20,1.208,25,2.714,28,0.284,29,0.439,45,0.076,46,0.139,47,0.005,48,0.007,49,0.005,55,0.289,57,2.868,67,0.66,68,1.948,69,0.646,70,1.208,71,1.295,74,0.679,108,0.842,109,0.977,117,1.478,119,1.248,120,2.71,121,1.789,122,3.489,123,2.641,124,1.626,125,2.774,127,1.756,129,1.348,130,1.195,131,4.255,132,1.717,133,2.328,135,1.756,144,1.756,146,3.456,147,1.626,148,1.626,149,1.626,150,2.346,151,1.518,152,1.273,153,1.344,154,1.518,155,1.626,159,1.888,160,1.273,161,3.456,162,1.518,163,1.518,164,1.518,167,0.905,169,2.54,170,1.789,171,2.323,173,1.46,175,2.54,176,3.828,177,3.072,178,3.418,179,2.132,180,3.072,181,2.868,182,1.918,183,2.513,184,3.072,186,3.072,187,2.069,188,1.626,189,1.626,190,2.513,191,2.513,195,1.626,196,1.626,197,2.513,338,0.775,356,1.776,422,1.918,427,1.918,523,3.03,524,1.918,670,1.626,680,4.255,685,2.136,686,3.301,693,2.136,746,2.714,750,2.136,751,2.466,752,2.466,753,2.466,754,3.456,755,2.466,756,1.918,757,2.868,758,2.466,759,2.466,760,2.466,761,2.466,762,2.466]],["title/modules/RolesModule.html",[0,1.213,11,2.376]],["body/modules/RolesModule.html",[0,1.943,2,2.073,3,2.744,7,0.015,11,4.686,13,3.027,14,2.395,15,2.395,16,0.15,17,0.129,18,0.129,27,2.827,28,0.313,29,0.87,30,3.01,31,2.172,45,0.15,46,0.276,47,0.009,48,0.012,49,0.009,204,3.369,205,3.572,528,2.279,529,3.482,757,4.874,763,4.235,764,4.235,765,4.235,766,4.89,767,4.89,768,4.89]],["title/injectables/RolesService.html",[207,0.779,757,2.376]],["body/injectables/RolesService.html",[7,0.016,16,0.074,17,0.063,18,0.063,28,0.272,29,0.427,31,1.066,45,0.074,46,0.135,47,0.005,48,0.007,49,0.005,55,0.281,68,1.56,69,0.809,70,1.245,74,0.869,108,0.819,109,1.133,119,1.222,120,2.789,121,1.274,123,2.134,129,1.689,130,1.498,132,2.151,133,1.657,167,0.57,170,1.563,171,1.776,173,1.83,187,3.037,207,0.753,208,0.93,210,3.18,211,2.297,212,2.297,217,2.297,219,2.297,224,1.118,226,1.477,338,1.173,356,1.118,375,2.035,387,3.231,453,3.18,465,1.582,478,2.078,482,3.562,519,2.19,523,3.235,528,2.407,529,1.709,680,4.078,681,2.078,706,3.232,707,3.232,714,3.232,718,3.232,729,2.078,746,2.657,754,4.217,757,2.297,769,2.078,770,3.232,771,3.232,772,2.4,773,2.4,774,3.732,775,3.232,776,2.4,777,3.732,778,2.4,779,3.232,780,2.4,781,2.4,782,4.975,783,4.811,784,2.4,785,2.4,786,2.4,787,2.4,788,2.4,789,2.4,790,2.078,791,2.4,792,2.4,793,2.4,794,2.4,795,2.4,796,2.4,797,2.4,798,2.4,799,3.732,800,2.903,801,1.867,802,3.732,803,2.4,804,2.078,805,2.4]],["title/classes/SessionDto.html",[46,0.218,256,2.545]],["body/classes/SessionDto.html",[7,0.016,16,0.122,17,0.105,18,0.105,28,0.302,45,0.122,46,0.224,47,0.008,48,0.01,49,0.008,51,0.905,53,1.442,55,0.465,56,1.627,67,1.062,68,1.847,69,0.809,70,1.154,71,1.512,74,0.85,82,2.479,109,0.647,125,1.763,129,1.021,130,0.905,167,1.772,179,1.355,251,3.215,256,3.553,266,1.682,278,1.608,280,1.849,289,2.443,295,2.851,338,1.248,358,4.356,361,4.034,369,1.682,371,3.537,373,3.553,376,2.443,514,3.058,541,3.537,552,2.826,665,2.617,667,2.826,668,2.826,737,3.437,806,3.437,807,3.969,808,3.969,809,3.969,810,3.969,811,3.087,812,3.969,813,3.969,814,3.969,815,3.969,816,3.969]],["title/classes/SessionEntity.html",[46,0.218,251,1.891]],["body/classes/SessionEntity.html",[7,0.016,16,0.117,17,0.1,18,0.1,28,0.297,45,0.117,46,0.215,47,0.007,48,0.01,49,0.007,51,0.869,53,1.403,54,3.463,55,0.446,56,1.582,59,4.265,67,1.727,68,1.809,69,0.861,70,1.14,71,1.727,74,0.905,80,3.972,81,4.077,82,2.427,91,2.501,92,3.3,94,4.408,99,3.226,102,2.203,103,3.687,106,4.539,107,2.346,108,1.301,109,0.622,111,3.456,112,4.077,224,1.776,251,2.567,278,1.544,358,4.265,361,3.95,369,1.615,514,1.776,531,2.346,817,3.3,818,4.66,819,3.811,820,3.811,821,3.811,822,3.811,823,3.811,824,3.811,825,2.964,826,3.811,827,3.811]],["title/modules/SessionsModule.html",[0,1.213,312,2.545]],["body/modules/SessionsModule.html",[0,1.943,2,2.073,3,2.744,7,0.015,13,3.027,14,2.395,15,2.395,16,0.15,17,0.129,18,0.129,27,2.827,28,0.313,29,0.87,30,3.01,31,2.172,45,0.15,46,0.276,47,0.009,48,0.012,49,0.009,204,3.369,205,3.572,251,2.395,312,5.019,341,4.577,811,3.804,828,4.235,829,4.235,830,4.235,831,4.89,832,4.89,833,4.89]],["title/injectables/SessionsService.html",[207,0.779,341,2.231]],["body/injectables/SessionsService.html",[7,0.016,16,0.081,17,0.07,18,0.07,28,0.29,29,0.47,31,1.174,45,0.081,46,0.149,47,0.005,48,0.008,49,0.005,55,0.31,67,0.708,68,1.859,69,0.789,70,1.205,74,0.854,80,1.627,108,0.902,109,1.044,119,1.317,120,2.902,121,1.372,123,2.267,129,1.646,130,1.46,132,2.161,133,1.785,170,1.855,171,2.107,173,1.784,179,2.185,207,0.811,208,1.025,210,3.346,211,2.475,212,2.475,217,2.475,219,2.475,221,1.882,224,1.232,226,1.627,227,2.289,251,1.295,256,1.743,266,1.121,338,1.264,341,2.324,348,3.584,354,2.289,356,1.232,375,1.441,387,3.597,453,3.346,465,1.743,493,2.289,531,3.6,782,4.228,783,4.228,800,2.056,801,2.056,811,2.056,818,2.056,825,3.127,834,2.289,835,4.02,836,4.02,837,2.643,838,2.643,839,4.02,840,4.02,841,2.643,842,2.643,843,2.643,844,4.02,845,2.643,846,2.643,847,4.02,848,2.643,849,4.697,850,2.643,851,2.643,852,2.643,853,2.643,854,2.643,855,5.436,856,2.289,857,5.436,858,2.289,859,2.643,860,2.643,861,4.02,862,2.643,863,4.02,864,2.643]],["title/modules/SuratModule.html",[0,1.213,865,2.748]],["body/modules/SuratModule.html",[0,2.044,2,2.25,3,2.887,7,0.015,13,3.185,14,2.599,15,2.599,16,0.163,17,0.14,18,0.14,28,0.286,29,0.944,45,0.163,46,0.3,47,0.01,48,0.013,49,0.01,204,3.545,865,5.446,866,4.596,867,4.596,868,5.044,869,5.307,870,5.307]],["title/injectables/SuratService.html",[207,0.779,868,2.545]],["body/injectables/SuratService.html",[7,0.015,16,0.18,17,0.155,18,0.155,28,0.258,29,1.045,45,0.18,46,0.331,47,0.011,48,0.013,49,0.011,207,1.394,208,2.277,868,4.556,871,5.086]],["title/classes/UpdateArticleDto.html",[46,0.218,222,2.748]],["body/classes/UpdateArticleDto.html",[7,0.015,16,0.174,17,0.149,18,0.149,28,0.297,45,0.174,46,0.32,47,0.011,48,0.013,49,0.011,51,1.291,53,1.516,121,1.933,214,3.734,222,4.815,225,4.905,496,4.405,872,4.905,873,3.274,874,3.274,875,3.274,876,5.664]],["title/classes/UpdateCategoryDto.html",[46,0.218,428,2.545]],["body/classes/UpdateCategoryDto.html",[7,0.015,16,0.174,17,0.149,18,0.149,28,0.297,45,0.174,46,0.32,47,0.011,48,0.013,49,0.011,51,1.291,53,1.516,121,1.933,420,3.274,428,4.459,433,4.032,434,4.405,497,4.405,873,3.274,874,3.274,875,3.274,877,5.664]],["title/classes/UpdatePermissionDto.html",[46,0.218,688,2.545]],["body/classes/UpdatePermissionDto.html",[7,0.015,16,0.174,17,0.149,18,0.149,28,0.297,45,0.174,46,0.32,47,0.011,48,0.013,49,0.011,51,1.291,53,1.516,121,1.933,509,3.274,511,4.405,676,4.032,688,4.459,690,4.405,873,3.274,874,3.274,875,3.274,878,5.664]],["title/classes/UpdateRoleDto.html",[46,0.218,754,2.545]],["body/classes/UpdateRoleDto.html",[7,0.016,16,0.151,17,0.13,18,0.13,28,0.323,45,0.151,46,0.35,47,0.01,48,0.012,49,0.01,51,1.123,53,1.318,55,0.577,56,1.874,69,0.837,71,1.217,74,0.637,121,1.681,130,1.415,187,3.018,519,2.881,523,2.846,525,3.83,659,4.092,666,3.246,736,4.264,746,3.506,754,4.092,756,4.827,873,2.846,874,2.846,875,2.846,879,4.264,880,4.924,881,3.83,882,4.924]],["title/classes/UpdateSessionDto.html",[46,0.218,849,2.748]],["body/classes/UpdateSessionDto.html",[7,0.015,16,0.152,17,0.131,18,0.131,28,0.315,45,0.152,46,0.353,47,0.01,48,0.012,49,0.01,51,1.134,53,1.332,55,0.583,56,1.886,69,0.613,71,1.229,74,0.644,80,3.845,121,1.698,167,1.621,278,2.016,467,2.437,505,3.406,514,2.911,531,3.062,533,3.87,818,5.311,825,3.87,849,4.447,873,2.876,874,2.876,875,2.876,883,5.41,884,4.975,885,4.975,886,6.247,887,4.975]],["title/classes/UpdateUserDto.html",[46,0.218,143,2.376]],["body/classes/UpdateUserDto.html",[7,0.016,16,0.131,17,0.112,18,0.112,28,0.318,45,0.131,46,0.358,47,0.008,48,0.011,49,0.008,51,0.972,53,1.141,55,0.499,56,1.707,69,0.89,70,0.922,71,1.568,74,0.821,121,1.455,126,2.325,130,1.647,143,3.481,157,2.812,158,4.455,167,1.506,187,2.817,467,2.089,500,3.693,505,3.083,506,3.269,519,2.864,528,3.148,537,3.317,539,3.905,666,2.812,670,4.183,677,3.317,873,2.465,874,2.465,875,2.465,879,4.897,881,3.317,888,4.264,889,4.264,890,4.264,891,4.264]],["title/classes/UpdateUserRequestDto.html",[46,0.218,892,3.002]],["body/classes/UpdateUserRequestDto.html",[7,0.015,16,0.141,17,0.121,18,0.121,28,0.317,45,0.141,46,0.336,47,0.009,48,0.012,49,0.009,51,1.05,53,1.233,55,0.54,56,1.796,67,1.763,69,0.568,70,0.97,71,1.138,74,0.596,121,1.572,158,3.922,167,1.564,254,4.627,257,3.243,278,1.867,280,2.147,295,2.147,302,3.99,467,2.257,505,3.243,506,3.438,514,2.772,541,2.663,560,3.28,561,3.28,568,4.69,665,3.038,873,2.663,874,2.663,875,2.663,892,4.627,893,6.587,894,5.948,895,5.948,896,4.607,897,4.607,898,4.607,899,4.607]],["title/classes/UserDto.html",[46,0.218,266,1.636]],["body/classes/UserDto.html",[7,0.016,16,0.094,17,0.081,18,0.081,28,0.257,45,0.094,46,0.173,47,0.006,48,0.009,49,0.006,51,0.699,53,1.203,55,0.359,56,1.356,59,3.785,66,4.135,68,1.605,69,0.829,70,1.218,71,1.608,74,0.893,80,1.888,82,2.724,91,1.189,109,0.955,130,1.024,141,2.604,167,1.84,173,0.855,257,3.898,266,2.254,278,1.243,280,1.43,295,3.033,369,1.301,371,3.073,514,3.133,538,4.107,539,3.602,541,3.762,552,2.184,553,2.023,555,2.386,557,2.386,562,3.891,565,5.069,571,3.495,576,3.891,647,3.495,665,2.023,667,2.184,668,2.184,900,2.657,901,4.604,902,5.852,903,4.493,904,6.509,905,3.068,906,5.852,907,3.068,908,3.068,909,3.068,910,4.493,911,4.493,912,3.068,913,3.068,914,3.068,915,2.657,916,3.068,917,3.068,918,3.068,919,4.493]],["title/classes/UserEntity.html",[46,0.218,91,1.496]],["body/classes/UserEntity.html",[7,0.016,16,0.089,17,0.076,18,0.076,28,0.29,45,0.089,46,0.164,47,0.006,48,0.008,49,0.006,50,3.755,51,0.661,53,1.154,54,2.974,55,0.34,56,1.301,59,3.663,66,4.002,68,1.553,69,0.882,70,1.151,71,1.769,74,0.938,77,2.842,78,3.353,80,3.506,81,2.256,82,2.308,88,2.512,89,3.292,91,1.671,94,4.267,99,2.653,103,3.167,104,4.002,105,3.392,107,1.785,108,0.99,109,0.929,111,1.912,112,2.256,113,2.512,126,1.581,141,2.52,157,1.912,173,0.808,187,2.285,224,1.351,229,2.256,230,4.002,251,2.79,288,2.512,348,1.912,369,1.229,487,3.069,490,2.512,492,3.069,519,2.414,528,2.654,538,3.392,539,3.506,647,3.353,666,1.912,670,3.392,677,2.256,680,1.912,694,1.785,856,4.455,858,2.512,901,4.455,915,2.512,920,2.512,921,4.311,922,2.9,923,2.9,924,2.9,925,2.9,926,2.9,927,2.9,928,2.9,929,2.9,930,2.9,931,2.9,932,2.9,933,2.9,934,5.144,935,2.9,936,2.9,937,2.9,938,2.9]],["title/controllers/UsersApiController.html",[26,2.748,117,1.496]],["body/controllers/UsersApiController.html",[7,0.016,16,0.061,17,0.052,18,0.052,20,0.969,26,2.28,28,0.271,29,0.352,45,0.061,46,0.112,47,0.004,48,0.006,49,0.004,55,0.232,57,2.483,67,1.598,68,1.803,69,0.736,70,1.16,71,1.145,74,0.6,108,0.675,109,0.831,117,1.242,119,1.049,120,2.561,121,1.582,122,3.134,123,2.372,124,1.305,125,3.158,126,2.527,129,1.192,130,1.057,131,2.112,132,1.518,133,2.059,134,1.714,137,4.719,138,1.714,139,1.714,141,2.925,142,1.714,143,2.853,146,3.056,147,1.305,148,1.305,149,1.305,150,1.971,151,1.218,152,1.021,153,1.079,154,1.218,155,1.305,156,1.218,157,2.112,158,1.305,159,1.634,160,1.021,161,3.056,162,1.218,163,1.218,164,1.218,166,1.218,167,0.47,168,1.714,169,2.199,170,1.582,171,2.112,172,1.409,173,1.291,174,1.714,175,2.199,176,3.566,177,2.66,178,3.184,179,1.958,180,2.66,181,2.483,182,1.539,183,2.112,184,1.305,185,1.714,186,2.66,187,1.791,188,1.305,189,1.305,190,2.112,191,2.112,192,2.774,193,1.714,194,1.714,195,1.305,196,1.305,197,2.112,198,1.714,252,4.015,257,3.455,259,4.93,266,2.615,273,4.409,275,4.409,276,4.409,277,1.714,278,0.802,289,1.218,292,4.015,293,4.968,295,1.492,571,5.428,632,2.774,633,2.774,671,1.409,939,1.714,940,3.202,941,1.979,942,5.448,943,1.979,944,1.979,945,3.202,946,1.979,947,1.979,948,3.202,949,3.202,950,1.979,951,3.202,952,3.202,953,1.979,954,3.202,955,1.979,956,1.979,957,3.202,958,1.979,959,1.979,960,3.202,961,1.979,962,1.979,963,1.979,964,1.979,965,1.979]],["title/modules/UsersModule.html",[0,1.213,12,2.376]],["body/modules/UsersModule.html",[0,1.943,2,2.073,3,2.744,7,0.015,12,4.686,13,3.027,14,2.395,15,2.395,16,0.15,17,0.129,18,0.129,27,2.827,28,0.313,29,0.87,30,3.01,31,2.172,45,0.15,46,0.276,47,0.009,48,0.012,49,0.009,91,1.896,159,3.208,204,3.369,205,3.572,553,3.224,966,4.235,967,4.235,968,4.235,969,4.89,970,4.89,971,4.89]],["title/injectables/UsersService.html",[159,1.564,207,0.779]],["body/injectables/UsersService.html",[7,0.016,16,0.043,17,0.037,18,0.037,28,0.246,29,0.248,31,0.619,45,0.043,46,0.079,47,0.003,48,0.005,49,0.003,55,0.163,67,1.496,68,1.898,69,0.809,70,1.246,74,0.839,91,0.927,108,0.476,109,1.042,119,0.783,120,2.927,121,0.816,123,1.115,126,2.492,129,1.643,130,1.457,132,2.092,133,2.171,141,1.538,143,3.175,157,1.577,159,0.969,167,0.331,170,2.24,171,2.477,173,1.78,176,0.806,179,1.907,187,3.008,207,0.483,208,0.541,210,2.292,211,1.933,212,1.473,217,0.859,219,1.473,221,1.703,224,0.65,226,0.859,238,1.861,266,0.591,307,4.467,338,0.752,356,0.65,375,2.03,385,1.861,387,3.578,394,0.993,396,0.92,453,2.292,465,0.92,519,1.578,528,1.735,538,2.071,539,1.933,553,0.92,670,4.212,671,1.703,679,1.208,680,1.577,694,0.859,748,1.208,770,2.072,771,2.072,775,2.072,779,2.072,782,4.805,783,4.71,790,1.208,800,2.896,801,2.896,804,1.208,972,1.208,973,2.392,974,2.392,975,3.141,976,3.141,977,3.141,978,2.392,979,1.861,980,5.158,981,2.392,982,1.395,983,1.395,984,2.392,985,1.395,986,2.392,987,1.395,988,2.392,989,1.395,990,1.395,991,2.392,992,1.395,993,1.395,994,1.395,995,1.395,996,1.395,997,1.395,998,1.395,999,1.395,1000,1.395,1001,2.392,1002,1.395,1003,2.392,1004,1.395,1005,1.395,1006,1.395,1007,1.395,1008,1.395,1009,2.392,1010,1.395,1011,1.395,1012,1.395,1013,1.395,1014,1.395,1015,1.395,1016,1.395,1017,1.395,1018,1.395,1019,2.392,1020,1.395,1021,3.141,1022,2.392,1023,2.392,1024,2.392,1025,2.392,1026,4.889,1027,1.395,1028,2.392,1029,1.395,1030,1.395,1031,1.395,1032,1.395,1033,1.395,1034,1.395,1035,1.395,1036,1.395,1037,1.395,1038,3.723,1039,2.392,1040,2.392,1041,1.395,1042,2.392,1043,1.395,1044,1.395,1045,2.392,1046,1.395,1047,1.395,1048,1.395,1049,1.395,1050,2.392,1051,2.392,1052,2.072,1053,1.395,1054,2.392,1055,1.395,1056,1.395]],["title/modules/WebModule.html",[0,1.213,1057,3.002]],["body/modules/WebModule.html",[0,2.121,2,2.391,7,0.015,16,0.173,17,0.149,18,0.149,20,3.305,28,0.297,29,1.004,45,0.173,46,0.318,47,0.011,48,0.013,49,0.011,579,5.139,1057,5.248,1058,5.641,1059,5.641]],["title/coverage.html",[1060,4.113]],["body/coverage.html",[7,0.016,18,0.06,21,1.611,22,1.611,23,1.611,24,1.611,25,1.611,26,1.611,46,0.43,47,0.004,48,0.007,49,0.004,50,1.492,52,1.96,64,1.308,67,1.339,69,0.279,76,1.308,91,0.877,117,2.346,118,1.96,126,1.234,143,1.393,152,1.168,153,1.234,156,2.715,158,2.351,159,0.917,179,0.772,202,1.492,207,1.419,209,1.96,214,1.492,222,1.611,233,1.96,251,1.109,256,1.492,262,1.611,266,0.959,281,1.393,283,1.611,284,1.761,285,1.761,313,1.492,314,1.492,315,1.492,324,1.611,337,1.96,341,1.308,368,1.761,369,1.87,370,1.96,371,1.308,372,1.96,377,3.14,380,1.96,399,2.773,400,1.761,402,1.96,419,1.96,420,1.308,428,1.492,430,1.393,432,1.761,434,1.761,450,1.96,483,1.96,495,1.96,496,2.773,497,2.773,509,1.308,510,1.761,511,2.773,516,1.393,517,2.715,519,0.959,523,1.308,524,1.761,525,2.773,528,1.055,531,1.393,532,1.96,533,2.773,537,2.773,560,1.611,561,3.14,568,1.611,579,1.611,580,1.96,590,1.761,591,1.96,592,1.96,602,1.96,641,1.761,642,1.96,644,1.761,645,1.96,655,1.96,659,1.492,660,1.96,669,1.96,682,1.96,688,1.492,690,1.761,691,1.393,705,1.96,730,1.761,731,1.96,741,1.96,750,1.96,754,1.492,756,1.761,757,1.393,769,1.96,806,1.96,817,1.96,834,1.96,849,1.611,868,1.492,871,1.96,872,1.96,883,1.96,892,1.761,900,1.96,920,1.96,939,1.96,972,1.96,979,1.761,1052,6.958,1060,1.761,1061,2.263,1062,2.263,1063,2.263,1064,4.411,1065,7.39,1066,2.263,1067,3.565,1068,6.603,1069,5.443,1070,1.96,1071,5.782,1072,6.269,1073,5.782,1074,3.565,1075,2.263,1076,2.263,1077,2.263,1078,2.263,1079,1.96,1080,1.96,1081,1.96,1082,1.96,1083,1.96,1084,1.96,1085,5.443,1086,1.96,1087,1.96,1088,1.96,1089,1.96,1090,1.96,1091,1.96,1092,1.96,1093,1.96,1094,2.263,1095,2.263]],["title/dependencies.html",[3,2.064,1096,3.214]],["body/dependencies.html",[3,1.787,7,0.016,29,0.716,31,1.787,46,0.307,47,0.008,48,0.011,49,0.008,108,1.374,278,1.631,280,1.875,298,3.131,320,2.194,322,3.131,348,2.654,351,2.865,352,4.793,389,4.387,394,2.865,467,1.971,468,3.486,658,3.486,881,3.131,1097,4.025,1098,4.025,1099,4.025,1100,5.44,1101,6.601,1102,4.025,1103,4.025,1104,5.44,1105,4.025,1106,5.44,1107,4.025,1108,5.44,1109,4.025,1110,4.025,1111,4.025,1112,4.025,1113,4.025,1114,4.025,1115,4.025,1116,4.025,1117,4.025,1118,4.025,1119,4.025,1120,4.025,1121,4.025,1122,4.025,1123,4.025,1124,4.025,1125,4.025,1126,4.025,1127,4.025,1128,4.025,1129,4.025,1130,4.025,1131,4.025,1132,4.025,1133,4.025,1134,4.025,1135,4.025,1136,4.025,1137,4.025,1138,4.025,1139,4.025,1140,4.025,1141,4.025,1142,4.025,1143,4.025,1144,4.025,1145,4.025,1146,4.025,1147,4.025,1148,4.025,1149,4.025,1150,4.025,1151,4.025,1152,4.025,1153,4.025,1154,4.025,1155,4.025]],["title/miscellaneous/functions.html",[1156,2.288,1157,4.025]],["body/miscellaneous/functions.html",[7,0.014,47,0.009,48,0.012,49,0.009,55,0.567,64,3.549,109,1.157,129,1.823,130,1.617,375,3.866,516,3.779,517,4.15,626,4.192,1084,4.192,1086,5.839,1087,5.317,1088,5.317,1089,5.317,1090,5.317,1091,5.317,1092,5.317,1093,4.192,1156,3.446,1157,4.192,1158,4.841,1159,6.743,1160,4.841,1161,4.841,1162,7.686,1163,4.841,1164,6.743,1165,4.841,1166,4.841]],["title/index.html",[55,0.376,1167,3.214,1168,3.214]],["body/index.html",[7,0.015,17,0.117,47,0.009,48,0.011,49,0.009,244,3.854,257,2.426,453,2.739,1060,3.461,1169,4.45,1170,4.45,1171,5.815,1172,4.45,1173,4.45,1174,4.45,1175,4.45,1176,4.45,1177,6.478,1178,4.45,1179,4.45,1180,4.45,1181,7.448,1182,4.45,1183,4.45,1184,4.45,1185,7.312,1186,4.45,1187,4.45,1188,5.815,1189,4.45,1190,4.45,1191,4.45,1192,4.45,1193,5.815,1194,5.815,1195,4.45,1196,4.45,1197,4.45,1198,5.815,1199,5.815,1200,4.45,1201,4.45,1202,4.45,1203,4.45,1204,4.45,1205,3.854,1206,4.45,1207,4.45,1208,4.45,1209,4.45,1210,4.45,1211,4.45,1212,4.45,1213,4.45,1214,4.45,1215,4.45,1216,4.45,1217,4.45,1218,4.45,1219,4.45,1220,4.45,1221,4.45,1222,4.45,1223,4.45,1224,5.815]],["title/modules.html",[2,2.241]],["body/modules.html",[1,3.669,2,2.185,6,3.398,7,0.012,8,3.398,9,3.398,10,3.173,11,3.173,12,3.173,47,0.01,48,0.012,49,0.01,312,3.398,865,3.669,1057,4.009,1205,6.793,1225,7.844,1226,7.844,1227,7.895,1228,5.154,1229,5.154]],["title/overview.html",[1230,4.579]],["body/overview.html",[1,5.375,2,1.39,3,2.094,4,2.839,5,2.839,6,4.391,7,0.015,8,5.132,9,4.391,10,4.224,11,4.224,12,4.224,13,2.309,14,1.606,15,1.606,20,1.606,47,0.006,48,0.009,49,0.006,51,0.748,159,2.78,199,2.839,200,2.839,201,2.839,202,4.525,208,1.271,281,4.224,308,2.839,309,2.839,310,2.839,311,2.839,312,4.391,313,3.64,314,3.64,315,3.64,341,3.967,401,2.55,430,4.224,443,2.839,444,2.839,445,2.839,691,4.224,699,2.839,700,2.839,701,2.839,757,4.224,763,2.839,764,2.839,765,2.839,828,2.839,829,2.839,830,2.839,865,4.298,866,2.839,867,2.839,868,3.64,966,2.839,967,2.839,968,2.839,1230,2.839,1231,3.279,1232,3.279,1233,3.279,1234,3.279,1235,3.279]],["title/miscellaneous/variables.html",[1156,2.288,1236,4.025]],["body/miscellaneous/variables.html",[7,0.016,47,0.008,48,0.01,49,0.008,55,0.464,67,1.835,69,0.488,70,1.069,111,4.662,125,2.911,156,2.436,170,1.836,173,1.498,178,2.776,179,1.836,251,1.939,262,4.35,266,1.678,271,3.829,285,3.079,324,3.829,332,3.428,392,3.829,408,4.184,410,4.753,417,3.079,558,3.079,561,3.829,568,3.829,979,4.184,1070,3.428,1079,3.428,1080,3.428,1081,4.658,1082,3.428,1083,4.658,1156,2.818,1236,3.428,1237,3.958,1238,3.958,1239,3.958,1240,3.958,1241,3.958,1242,3.958,1243,7.071,1244,5.379,1245,3.958,1246,3.958,1247,5.379,1248,3.958,1249,6.555,1250,3.958,1251,3.958,1252,3.958,1253,3.958,1254,3.958,1255,3.958,1256,3.958,1257,3.958,1258,5.379,1259,3.958]]],"invertedIndex":[["",{"_index":7,"title":{},"body":{"modules/ApiModule.html":{},"classes/ArticleEntity.html":{},"controllers/ArticlesApiController.html":{},"modules/ArticlesModule.html":{},"injectables/ArticlesService.html":{},"controllers/AuthApiController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseController.html":{},"classes/BaseDto.html":{},"injectables/BasicAuthGuard.html":{},"injectables/BasicStrategy.html":{},"guards/CanGuard.html":{},"controllers/CategoriesApiController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"classes/CategoryEntity.html":{},"classes/CreateArticleDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreatePermissionDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateSessionDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserRequestDto.html":{},"controllers/HaloController.html":{},"guards/HasRolesGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"classes/LocalBaseEntity.html":{},"injectables/LocalStrategy.html":{},"classes/PermissionDto.html":{},"classes/PermissionEntity.html":{},"controllers/PermissionsApiController.html":{},"modules/PermissionsModule.html":{},"injectables/PermissionsService.html":{},"classes/RoleDto.html":{},"classes/RoleEntity.html":{},"controllers/RolesApiController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/SessionDto.html":{},"classes/SessionEntity.html":{},"modules/SessionsModule.html":{},"injectables/SessionsService.html":{},"modules/SuratModule.html":{},"injectables/SuratService.html":{},"classes/UpdateArticleDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePermissionDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateSessionDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRequestDto.html":{},"classes/UserDto.html":{},"classes/UserEntity.html":{},"controllers/UsersApiController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"modules/WebModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":1052,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["0.0.1",{"_index":1098,"title":{},"body":{"dependencies.html":{}}}],["0.1.13",{"_index":1144,"title":{},"body":{"dependencies.html":{}}}],["0.13.1",{"_index":1123,"title":{},"body":{"dependencies.html":{}}}],["0.2.36",{"_index":1155,"title":{},"body":{"dependencies.html":{}}}],["0.4.0",{"_index":1122,"title":{},"body":{"dependencies.html":{}}}],["0.4.1",{"_index":1100,"title":{},"body":{"dependencies.html":{}}}],["0.6.5",{"_index":1140,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1065,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":1075,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":1077,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":1066,"title":{},"body":{"coverage.html":{}}}],["0/18",{"_index":1078,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1072,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1073,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1069,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1068,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1064,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1076,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1067,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1074,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":163,"title":{},"body":{"controllers/ArticlesApiController.html":{},"controllers/AuthApiController.html":{},"controllers/CategoriesApiController.html":{},"controllers/PermissionsApiController.html":{},"controllers/RolesApiController.html":{},"controllers/UsersApiController.html":{}}}],["1.0.0",{"_index":1104,"title":{},"body":{"dependencies.html":{}}}],["1.0.1",{"_index":1110,"title":{},"body":{"dependencies.html":{}}}],["1.11.0",{"_index":1130,"title":{},"body":{"dependencies.html":{}}}],["1.17.2",{"_index":1133,"title":{},"body":{"dependencies.html":{}}}],["1.4.5",{"_index":1128,"title":{},"body":{"dependencies.html":{}}}],["1.6.0",{"_index":1149,"title":{},"body":{"dependencies.html":{}}}],["1.7.4",{"_index":1125,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":1231,"title":{},"body":{"overview.html":{}}}],["14",{"_index":1233,"title":{},"body":{"overview.html":{}}}],["2",{"_index":1235,"title":{},"body":{"overview.html":{}}}],["2.0.0",{"_index":1116,"title":{},"body":{"dependencies.html":{}}}],["2.2.2",{"_index":1113,"title":{},"body":{"dependencies.html":{}}}],["2.2.5",{"_index":1138,"title":{},"body":{"dependencies.html":{}}}],["27",{"_index":1234,"title":{},"body":{"overview.html":{}}}],["3.0.2",{"_index":1146,"title":{},"body":{"dependencies.html":{}}}],["3.27.0",{"_index":1121,"title":{},"body":{"dependencies.html":{}}}],["375b3d55c0331917a66eb7c04743805d6cf53b72",{"_index":1253,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4.0.0",{"_index":1141,"title":{},"body":{"dependencies.html":{}}}],["4.1.2",{"_index":1136,"title":{},"body":{"dependencies.html":{}}}],["4.1.6",{"_index":1154,"title":{},"body":{"dependencies.html":{}}}],["4.2.0",{"_index":1151,"title":{},"body":{"dependencies.html":{}}}],["5.0.1",{"_index":1119,"title":{},"body":{"dependencies.html":{}}}],["5.0.9",{"_index":1114,"title":{},"body":{"dependencies.html":{}}}],["5.5.3",{"_index":1134,"title":{},"body":{"dependencies.html":{}}}],["60s",{"_index":336,"title":{},"body":{"modules/AuthModule.html":{}}}],["7",{"_index":1232,"title":{},"body":{"overview.html":{}}}],["7.2.0",{"_index":1148,"title":{},"body":{"dependencies.html":{}}}],["8.0.0",{"_index":1101,"title":{},"body":{"dependencies.html":{}}}],["8.0.1",{"_index":1105,"title":{},"body":{"dependencies.html":{}}}],["8.0.2",{"_index":1117,"title":{},"body":{"dependencies.html":{}}}],["8.0.5",{"_index":1108,"title":{},"body":{"dependencies.html":{}}}],["8.6.0",{"_index":1132,"title":{},"body":{"dependencies.html":{}}}],["ability",{"_index":414,"title":{},"body":{"guards/CanGuard.html":{}}}],["access_token",{"_index":294,"title":{},"body":{"controllers/AuthApiController.html":{},"injectables/AuthService.html":{}}}],["access_token'})@apiokresponse({type",{"_index":265,"title":{},"body":{"controllers/AuthApiController.html":{}}}],["access_token'})@useguards(jwtauthguard)@get",{"_index":269,"title":{},"body":{"controllers/AuthApiController.html":{}}}],["accessors",{"_index":647,"title":{},"body":{"classes/LocalBaseEntity.html":{},"classes/UserDto.html":{},"classes/UserEntity.html":{}}}],["action",{"_index":227,"title":{},"body":{"injectables/ArticlesService.html":{},"injectables/SessionsService.html":{}}}],["activesession",{"_index":262,"title":{},"body":{"controllers/AuthApiController.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["adds",{"_index":228,"title":{},"body":{"injectables/ArticlesService.html":{}}}],["agent",{"_index":360,"title":{},"body":{"injectables/AuthService.html":{}}}],["akan",{"_index":952,"title":{},"body":{"controllers/UsersApiController.html":{}}}],["akun",{"_index":904,"title":{},"body":{"classes/UserDto.html":{}}}],["alamat",{"_index":562,"title":{},"body":{"classes/CreateUserRequestDto.html":{},"classes/UserDto.html":{}}}],["amazing",{"_index":1206,"title":{},"body":{"index.html":{}}}],["andwhere",{"_index":1046,"title":{},"body":{"injectables/UsersService.html":{}}}],["andwhere('role.name",{"_index":1053,"title":{},"body":{"injectables/UsersService.html":{}}}],["apibasicauth",{"_index":272,"title":{},"body":{"controllers/AuthApiController.html":{}}}],["apibearerauth",{"_index":273,"title":{},"body":{"controllers/AuthApiController.html":{},"controllers/UsersApiController.html":{}}}],["apibearerauth()@apioperation({summary",{"_index":252,"title":{},"body":{"controllers/AuthApiController.html":{},"controllers/UsersApiController.html":{}}}],["apicreatedresponse",{"_index":274,"title":{},"body":{"controllers/AuthApiController.html":{}}}],["apimodule",{"_index":1,"title":{"modules/ApiModule.html":{}},"body":{"modules/ApiModule.html":{},"modules.html":{},"overview.html":{}}}],["apiokresponse",{"_index":275,"title":{},"body":{"controllers/AuthApiController.html":{},"controllers/UsersApiController.html":{}}}],["apioperation",{"_index":276,"title":{},"body":{"controllers/AuthApiController.html":{},"controllers/UsersApiController.html":{}}}],["apioperation({summary",{"_index":239,"title":{},"body":{"controllers/AuthApiController.html":{}}}],["apiparam",{"_index":960,"title":{},"body":{"controllers/UsersApiController.html":{}}}],["apiproperty",{"_index":514,"title":{},"body":{"classes/CreatePermissionDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserRequestDto.html":{},"classes/PermissionDto.html":{},"classes/RoleDto.html":{},"classes/SessionDto.html":{},"classes/SessionEntity.html":{},"classes/UpdateSessionDto.html":{},"classes/UpdateUserRequestDto.html":{},"classes/UserDto.html":{}}}],["apiproperty()@isdate()@isnotempty",{"_index":884,"title":{},"body":{"classes/UpdateSessionDto.html":{}}}],["apiproperty({example",{"_index":541,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserRequestDto.html":{},"classes/PermissionDto.html":{},"classes/RoleDto.html":{},"classes/SessionDto.html":{},"classes/UpdateUserRequestDto.html":{},"classes/UserDto.html":{}}}],["apitags",{"_index":277,"title":{},"body":{"controllers/AuthApiController.html":{},"controllers/UsersApiController.html":{}}}],["apitags('auth",{"_index":290,"title":{},"body":{"controllers/AuthApiController.html":{}}}],["apitags('users",{"_index":961,"title":{},"body":{"controllers/UsersApiController.html":{}}}],["app",{"_index":1183,"title":{},"body":{"index.html":{}}}],["applications",{"_index":1176,"title":{},"body":{"index.html":{}}}],["args",{"_index":1249,"title":{},"body":{"miscellaneous/variables.html":{}}}],["article",{"_index":229,"title":{},"body":{"injectables/ArticlesService.html":{},"classes/CategoryEntity.html":{},"classes/UserEntity.html":{}}}],["article.categories",{"_index":494,"title":{},"body":{"classes/CategoryEntity.html":{}}}],["article.dto",{"_index":225,"title":{},"body":{"injectables/ArticlesService.html":{},"classes/UpdateArticleDto.html":{}}}],["article.dto.ts",{"_index":496,"title":{},"body":{"classes/CreateArticleDto.html":{},"classes/UpdateArticleDto.html":{},"coverage.html":{}}}],["article.user",{"_index":936,"title":{},"body":{"classes/UserEntity.html":{}}}],["article/articles",{"_index":165,"title":{},"body":{"controllers/ArticlesApiController.html":{}}}],["article/categories",{"_index":435,"title":{},"body":{"controllers/CategoriesApiController.html":{}}}],["article_articles",{"_index":110,"title":{},"body":{"classes/ArticleEntity.html":{}}}],["article_categories",{"_index":491,"title":{},"body":{"classes/CategoryEntity.html":{}}}],["articleentity",{"_index":50,"title":{"classes/ArticleEntity.html":{}},"body":{"classes/ArticleEntity.html":{},"classes/CategoryEntity.html":{},"classes/UserEntity.html":{},"coverage.html":{}}}],["articles",{"_index":230,"title":{},"body":{"injectables/ArticlesService.html":{},"classes/CategoryEntity.html":{},"classes/UserEntity.html":{}}}],["articles.service",{"_index":206,"title":{},"body":{"modules/ArticlesModule.html":{}}}],["articlesapicontroller",{"_index":21,"title":{"controllers/ArticlesApiController.html":{}},"body":{"modules/ApiModule.html":{},"controllers/ArticlesApiController.html":{},"coverage.html":{}}}],["articlesmodule",{"_index":6,"title":{"modules/ArticlesModule.html":{}},"body":{"modules/ApiModule.html":{},"modules/ArticlesModule.html":{},"modules.html":{},"overview.html":{}}}],["articlesservice",{"_index":202,"title":{"injectables/ArticlesService.html":{}},"body":{"modules/ArticlesModule.html":{},"injectables/ArticlesService.html":{},"coverage.html":{},"overview.html":{}}}],["asctivesession",{"_index":627,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["async",{"_index":120,"title":{},"body":{"controllers/ArticlesApiController.html":{},"injectables/AuthService.html":{},"injectables/BasicStrategy.html":{},"guards/CanGuard.html":{},"controllers/CategoriesApiController.html":{},"injectables/CategoriesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/PermissionsApiController.html":{},"injectables/PermissionsService.html":{},"controllers/RolesApiController.html":{},"injectables/RolesService.html":{},"injectables/SessionsService.html":{},"controllers/UsersApiController.html":{},"injectables/UsersService.html":{}}}],["atau",{"_index":573,"title":{},"body":{"classes/CreateUserRequestDto.html":{},"injectables/JwtStrategy.html":{}}}],["attachpermissions",{"_index":770,"title":{},"body":{"injectables/RolesService.html":{},"injectables/UsersService.html":{}}}],["attachpermissions(uuid",{"_index":775,"title":{},"body":{"injectables/RolesService.html":{},"injectables/UsersService.html":{}}}],["attachroles",{"_index":973,"title":{},"body":{"injectables/UsersService.html":{}}}],["attachroles(uuid",{"_index":986,"title":{},"body":{"injectables/UsersService.html":{}}}],["auth",{"_index":291,"title":{},"body":{"controllers/AuthApiController.html":{}}}],["auth.guard",{"_index":154,"title":{},"body":{"controllers/ArticlesApiController.html":{},"controllers/AuthApiController.html":{},"controllers/CategoriesApiController.html":{},"controllers/PermissionsApiController.html":{},"controllers/RolesApiController.html":{},"controllers/UsersApiController.html":{}}}],["auth.guard.ts",{"_index":377,"title":{},"body":{"injectables/BasicAuthGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["auth.service",{"_index":317,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth_permissions",{"_index":678,"title":{},"body":{"classes/PermissionEntity.html":{}}}],["auth_roles",{"_index":747,"title":{},"body":{"classes/RoleEntity.html":{}}}],["auth_sessions",{"_index":826,"title":{},"body":{"classes/SessionEntity.html":{}}}],["auth_users",{"_index":935,"title":{},"body":{"classes/UserEntity.html":{}}}],["authapicontroller",{"_index":22,"title":{"controllers/AuthApiController.html":{}},"body":{"modules/ApiModule.html":{},"controllers/AuthApiController.html":{},"coverage.html":{}}}],["authguard",{"_index":378,"title":{},"body":{"injectables/BasicAuthGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["authguard('basic",{"_index":379,"title":{},"body":{"injectables/BasicAuthGuard.html":{}}}],["authguard('jwt",{"_index":601,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('local",{"_index":643,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["authmodule",{"_index":8,"title":{"modules/AuthModule.html":{}},"body":{"modules/ApiModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1216,"title":{},"body":{"index.html":{}}}],["authservice",{"_index":281,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthApiController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["authuuid",{"_index":137,"title":{},"body":{"controllers/ArticlesApiController.html":{},"controllers/UsersApiController.html":{}}}],["available",{"_index":1229,"title":{},"body":{"modules.html":{}}}],["await",{"_index":171,"title":{},"body":{"controllers/ArticlesApiController.html":{},"injectables/AuthService.html":{},"injectables/BasicStrategy.html":{},"guards/CanGuard.html":{},"controllers/CategoriesApiController.html":{},"injectables/CategoriesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/PermissionsApiController.html":{},"injectables/PermissionsService.html":{},"controllers/RolesApiController.html":{},"injectables/RolesService.html":{},"injectables/SessionsService.html":{},"controllers/UsersApiController.html":{},"injectables/UsersService.html":{}}}],["backers",{"_index":1207,"title":{},"body":{"index.html":{}}}],["baru",{"_index":293,"title":{},"body":{"controllers/AuthApiController.html":{},"controllers/UsersApiController.html":{}}}],["baru'})@apibasicauth()@apicreatedresponse({description",{"_index":242,"title":{},"body":{"controllers/AuthApiController.html":{}}}],["baru'})@apiokresponse({type",{"_index":941,"title":{},"body":{"controllers/UsersApiController.html":{}}}],["basecontroller",{"_index":368,"title":{"classes/BaseController.html":{}},"body":{"classes/BaseController.html":{},"coverage.html":{}}}],["basedto",{"_index":371,"title":{"classes/BaseDto.html":{}},"body":{"classes/BaseDto.html":{},"classes/PermissionDto.html":{},"classes/RoleDto.html":{},"classes/SessionDto.html":{},"classes/UserDto.html":{},"coverage.html":{}}}],["baseentity",{"_index":54,"title":{},"body":{"classes/ArticleEntity.html":{},"classes/CategoryEntity.html":{},"classes/LocalBaseEntity.html":{},"classes/PermissionEntity.html":{},"classes/RoleEntity.html":{},"classes/SessionEntity.html":{},"classes/UserEntity.html":{}}}],["basicauthguard",{"_index":283,"title":{"injectables/BasicAuthGuard.html":{}},"body":{"controllers/AuthApiController.html":{},"injectables/BasicAuthGuard.html":{},"coverage.html":{}}}],["basicstrategy",{"_index":313,"title":{"injectables/BasicStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/BasicStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["bcrypt",{"_index":394,"title":{},"body":{"injectables/BasicStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["berbeda",{"_index":636,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["berdasarkan",{"_index":949,"title":{},"body":{"controllers/UsersApiController.html":{}}}],["berhasil",{"_index":246,"title":{},"body":{"controllers/AuthApiController.html":{}}}],["body",{"_index":57,"title":{},"body":{"classes/ArticleEntity.html":{},"controllers/ArticlesApiController.html":{},"controllers/CategoriesApiController.html":{},"controllers/PermissionsApiController.html":{},"controllers/RolesApiController.html":{},"controllers/UsersApiController.html":{}}}],["boolean",{"_index":595,"title":{},"body":{"guards/HasRolesGuard.html":{}}}],["bootstrap",{"_index":1086,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["brackets",{"_index":1014,"title":{},"body":{"injectables/UsersService.html":{}}}],["brackets((qb",{"_index":1047,"title":{},"body":{"injectables/UsersService.html":{}}}],["browse",{"_index":1227,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1225,"title":{},"body":{"modules.html":{}}}],["building",{"_index":1172,"title":{},"body":{"index.html":{}}}],["bull",{"_index":1120,"title":{},"body":{"dependencies.html":{}}}],["c",{"_index":439,"title":{},"body":{"controllers/CategoriesApiController.html":{}}}],["canactivate",{"_index":403,"title":{},"body":{"guards/CanGuard.html":{},"guards/HasRolesGuard.html":{}}}],["canactivate(context",{"_index":407,"title":{},"body":{"guards/CanGuard.html":{},"guards/HasRolesGuard.html":{}}}],["canguard",{"_index":400,"title":{"guards/CanGuard.html":{}},"body":{"guards/CanGuard.html":{},"coverage.html":{}}}],["catch",{"_index":175,"title":{},"body":{"controllers/ArticlesApiController.html":{},"injectables/BasicStrategy.html":{},"controllers/CategoriesApiController.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/PermissionsApiController.html":{},"controllers/RolesApiController.html":{},"controllers/UsersApiController.html":{}}}],["categories",{"_index":58,"title":{},"body":{"classes/ArticleEntity.html":{}}}],["categories.service",{"_index":447,"title":{},"body":{"modules/CategoriesModule.html":{}}}],["categoriesapicontroller",{"_index":23,"title":{"controllers/CategoriesApiController.html":{}},"body":{"modules/ApiModule.html":{},"controllers/CategoriesApiController.html":{},"coverage.html":{}}}],["categoriesmodule",{"_index":9,"title":{"modules/CategoriesModule.html":{}},"body":{"modules/ApiModule.html":{},"modules/CategoriesModule.html":{},"modules.html":{},"overview.html":{}}}],["categoriesservice",{"_index":430,"title":{"injectables/CategoriesService.html":{}},"body":{"controllers/CategoriesApiController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"coverage.html":{},"overview.html":{}}}],["category",{"_index":114,"title":{},"body":{"classes/ArticleEntity.html":{},"controllers/CategoriesApiController.html":{},"injectables/CategoriesService.html":{}}}],["category.articles",{"_index":115,"title":{},"body":{"classes/ArticleEntity.html":{}}}],["category.dto",{"_index":433,"title":{},"body":{"controllers/CategoriesApiController.html":{},"injectables/CategoriesService.html":{},"classes/CategoryEntity.html":{},"classes/UpdateCategoryDto.html":{}}}],["category.dto.ts",{"_index":497,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["category.dto.ts:12",{"_index":502,"title":{},"body":{"classes/CreateCategoryDto.html":{}}}],["category.dto.ts:16",{"_index":504,"title":{},"body":{"classes/CreateCategoryDto.html":{}}}],["category.dto.ts:20",{"_index":501,"title":{},"body":{"classes/CreateCategoryDto.html":{}}}],["category.dto.ts:5",{"_index":499,"title":{},"body":{"classes/CreateCategoryDto.html":{}}}],["categoryentity",{"_index":76,"title":{"classes/CategoryEntity.html":{}},"body":{"classes/ArticleEntity.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"classes/CategoryEntity.html":{},"classes/CreateCategoryDto.html":{},"coverage.html":{}}}],["categoryentity(createcategorydto",{"_index":473,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["categoryrepository",{"_index":455,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["class",{"_index":46,"title":{"classes/ArticleEntity.html":{},"classes/BaseController.html":{},"classes/BaseDto.html":{},"classes/CategoryEntity.html":{},"classes/CreateArticleDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreatePermissionDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateSessionDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserRequestDto.html":{},"classes/LocalBaseEntity.html":{},"classes/PermissionDto.html":{},"classes/PermissionEntity.html":{},"classes/RoleDto.html":{},"classes/RoleEntity.html":{},"classes/SessionDto.html":{},"classes/SessionEntity.html":{},"classes/UpdateArticleDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePermissionDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateSessionDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRequestDto.html":{},"classes/UserDto.html":{},"classes/UserEntity.html":{}},"body":{"modules/ApiModule.html":{},"classes/ArticleEntity.html":{},"controllers/ArticlesApiController.html":{},"modules/ArticlesModule.html":{},"injectables/ArticlesService.html":{},"controllers/AuthApiController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseController.html":{},"classes/BaseDto.html":{},"injectables/BasicAuthGuard.html":{},"injectables/BasicStrategy.html":{},"guards/CanGuard.html":{},"controllers/CategoriesApiController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"classes/CategoryEntity.html":{},"classes/CreateArticleDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreatePermissionDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateSessionDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserRequestDto.html":{},"controllers/HaloController.html":{},"guards/HasRolesGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"classes/LocalBaseEntity.html":{},"injectables/LocalStrategy.html":{},"classes/PermissionDto.html":{},"classes/PermissionEntity.html":{},"controllers/PermissionsApiController.html":{},"modules/PermissionsModule.html":{},"injectables/PermissionsService.html":{},"classes/RoleDto.html":{},"classes/RoleEntity.html":{},"controllers/RolesApiController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/SessionDto.html":{},"classes/SessionEntity.html":{},"modules/SessionsModule.html":{},"injectables/SessionsService.html":{},"modules/SuratModule.html":{},"injectables/SuratService.html":{},"classes/UpdateArticleDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePermissionDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateSessionDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRequestDto.html":{},"classes/UserDto.html":{},"classes/UserEntity.html":{},"controllers/UsersApiController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"modules/WebModule.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":51,"title":{},"body":{"classes/ArticleEntity.html":{},"classes/BaseController.html":{},"classes/BaseDto.html":{},"classes/CategoryEntity.html":{},"classes/CreateArticleDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreatePermissionDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateSessionDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserRequestDto.html":{},"classes/LocalBaseEntity.html":{},"classes/PermissionDto.html":{},"classes/PermissionEntity.html":{},"classes/RoleDto.html":{},"classes/RoleEntity.html":{},"classes/SessionDto.html":{},"classes/SessionEntity.html":{},"classes/UpdateArticleDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePermissionDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateSessionDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRequestDto.html":{},"classes/UserDto.html":{},"classes/UserEntity.html":{},"overview.html":{}}}],["client",{"_index":619,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["cluster_apimodule",{"_index":4,"title":{},"body":{"modules/ApiModule.html":{},"overview.html":{}}}],["cluster_apimodule_imports",{"_index":5,"title":{},"body":{"modules/ApiModule.html":{},"overview.html":{}}}],["cluster_articlesmodule",{"_index":199,"title":{},"body":{"modules/ArticlesModule.html":{},"overview.html":{}}}],["cluster_articlesmodule_exports",{"_index":201,"title":{},"body":{"modules/ArticlesModule.html":{},"overview.html":{}}}],["cluster_articlesmodule_providers",{"_index":200,"title":{},"body":{"modules/ArticlesModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":308,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":311,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":310,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":309,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_categoriesmodule",{"_index":443,"title":{},"body":{"modules/CategoriesModule.html":{},"overview.html":{}}}],["cluster_categoriesmodule_exports",{"_index":444,"title":{},"body":{"modules/CategoriesModule.html":{},"overview.html":{}}}],["cluster_categoriesmodule_providers",{"_index":445,"title":{},"body":{"modules/CategoriesModule.html":{},"overview.html":{}}}],["cluster_permissionsmodule",{"_index":699,"title":{},"body":{"modules/PermissionsModule.html":{},"overview.html":{}}}],["cluster_permissionsmodule_exports",{"_index":701,"title":{},"body":{"modules/PermissionsModule.html":{},"overview.html":{}}}],["cluster_permissionsmodule_providers",{"_index":700,"title":{},"body":{"modules/PermissionsModule.html":{},"overview.html":{}}}],["cluster_rolesmodule",{"_index":763,"title":{},"body":{"modules/RolesModule.html":{},"overview.html":{}}}],["cluster_rolesmodule_exports",{"_index":764,"title":{},"body":{"modules/RolesModule.html":{},"overview.html":{}}}],["cluster_rolesmodule_providers",{"_index":765,"title":{},"body":{"modules/RolesModule.html":{},"overview.html":{}}}],["cluster_sessionsmodule",{"_index":828,"title":{},"body":{"modules/SessionsModule.html":{},"overview.html":{}}}],["cluster_sessionsmodule_exports",{"_index":829,"title":{},"body":{"modules/SessionsModule.html":{},"overview.html":{}}}],["cluster_sessionsmodule_providers",{"_index":830,"title":{},"body":{"modules/SessionsModule.html":{},"overview.html":{}}}],["cluster_suratmodule",{"_index":866,"title":{},"body":{"modules/SuratModule.html":{},"overview.html":{}}}],["cluster_suratmodule_providers",{"_index":867,"title":{},"body":{"modules/SuratModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":966,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":968,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":967,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["column",{"_index":94,"title":{},"body":{"classes/ArticleEntity.html":{},"classes/CategoryEntity.html":{},"classes/PermissionEntity.html":{},"classes/RoleEntity.html":{},"classes/SessionEntity.html":{},"classes/UserEntity.html":{}}}],["column({default",{"_index":81,"title":{},"body":{"classes/ArticleEntity.html":{},"classes/SessionEntity.html":{},"classes/UserEntity.html":{}}}],["column({nullable",{"_index":88,"title":{},"body":{"classes/ArticleEntity.html":{},"classes/UserEntity.html":{}}}],["column({type",{"_index":72,"title":{},"body":{"classes/ArticleEntity.html":{},"classes/CategoryEntity.html":{}}}],["column({unique",{"_index":487,"title":{},"body":{"classes/CategoryEntity.html":{},"classes/PermissionEntity.html":{},"classes/RoleEntity.html":{},"classes/UserEntity.html":{}}}],["comparesync",{"_index":393,"title":{},"body":{"injectables/BasicStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["comparesync(pass",{"_index":397,"title":{},"body":{"injectables/BasicStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["compression",{"_index":1124,"title":{},"body":{"dependencies.html":{}}}],["const",{"_index":170,"title":{},"body":{"controllers/ArticlesApiController.html":{},"injectables/AuthService.html":{},"injectables/BasicStrategy.html":{},"guards/CanGuard.html":{},"controllers/CategoriesApiController.html":{},"injectables/CategoriesService.html":{},"classes/CreateUserRequestDto.html":{},"guards/HasRolesGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/PermissionsApiController.html":{},"injectables/PermissionsService.html":{},"controllers/RolesApiController.html":{},"injectables/RolesService.html":{},"injectables/SessionsService.html":{},"controllers/UsersApiController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["constants",{"_index":325,"title":{},"body":{"modules/AuthModule.html":{}}}],["constructor",{"_index":338,"title":{},"body":{"injectables/AuthService.html":{},"classes/BaseDto.html":{},"injectables/BasicStrategy.html":{},"guards/CanGuard.html":{},"controllers/CategoriesApiController.html":{},"injectables/CategoriesService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateUserDto.html":{},"guards/HasRolesGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LocalBaseEntity.html":{},"injectables/LocalStrategy.html":{},"controllers/PermissionsApiController.html":{},"injectables/PermissionsService.html":{},"classes/RoleDto.html":{},"controllers/RolesApiController.html":{},"injectables/RolesService.html":{},"classes/SessionDto.html":{},"injectables/SessionsService.html":{},"injectables/UsersService.html":{}}}],["constructor(categoryrepository",{"_index":452,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["constructor(createdto",{"_index":649,"title":{},"body":{"classes/LocalBaseEntity.html":{}}}],["constructor(data",{"_index":373,"title":{},"body":{"classes/BaseDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateUserDto.html":{},"classes/RoleDto.html":{},"classes/SessionDto.html":{}}}],["constructor(permissionrepository",{"_index":708,"title":{},"body":{"injectables/PermissionsService.html":{}}}],["constructor(private",{"_index":166,"title":{},"body":{"controllers/ArticlesApiController.html":{},"controllers/AuthApiController.html":{},"injectables/BasicStrategy.html":{},"guards/HasRolesGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/UsersApiController.html":{}}}],["constructor(reflector",{"_index":404,"title":{},"body":{"guards/CanGuard.html":{},"guards/HasRolesGuard.html":{}}}],["constructor(request",{"_index":339,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(rolerepository",{"_index":772,"title":{},"body":{"injectables/RolesService.html":{}}}],["constructor(sessionrepository",{"_index":837,"title":{},"body":{"injectables/SessionsService.html":{}}}],["constructor(sessionservice",{"_index":603,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["constructor(usersrepository",{"_index":982,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(usersservice",{"_index":382,"title":{},"body":{"injectables/BasicStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["context",{"_index":410,"title":{},"body":{"guards/CanGuard.html":{},"guards/HasRolesGuard.html":{},"miscellaneous/variables.html":{}}}],["context.getclass",{"_index":416,"title":{},"body":{"guards/CanGuard.html":{},"guards/HasRolesGuard.html":{}}}],["context.gethandler",{"_index":415,"title":{},"body":{"guards/CanGuard.html":{},"guards/HasRolesGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":417,"title":{},"body":{"guards/CanGuard.html":{},"guards/HasRolesGuard.html":{},"miscellaneous/variables.html":{}}}],["controller",{"_index":117,"title":{"controllers/ArticlesApiController.html":{},"controllers/AuthApiController.html":{},"controllers/CategoriesApiController.html":{},"controllers/HaloController.html":{},"controllers/PermissionsApiController.html":{},"controllers/RolesApiController.html":{},"controllers/UsersApiController.html":{}},"body":{"controllers/ArticlesApiController.html":{},"controllers/AuthApiController.html":{},"controllers/CategoriesApiController.html":{},"controllers/HaloController.html":{},"controllers/PermissionsApiController.html":{},"controllers/RolesApiController.html":{},"controllers/UsersApiController.html":{},"coverage.html":{}}}],["controller('halo",{"_index":588,"title":{},"body":{"controllers/HaloController.html":{}}}],["controller.ts",{"_index":370,"title":{},"body":{"classes/BaseController.html":{},"coverage.html":{}}}],["controllers",{"_index":20,"title":{},"body":{"modules/ApiModule.html":{},"controllers/ArticlesApiController.html":{},"controllers/AuthApiController.html":{},"controllers/CategoriesApiController.html":{},"controllers/HaloController.html":{},"controllers/PermissionsApiController.html":{},"controllers/RolesApiController.html":{},"controllers/UsersApiController.html":{},"modules/WebModule.html":{},"overview.html":{}}}],["controllers/articles.controller",{"_index":38,"title":{},"body":{"modules/ApiModule.html":{}}}],["controllers/auth.controller",{"_index":39,"title":{},"body":{"modules/ApiModule.html":{}}}],["controllers/categories.controller",{"_index":40,"title":{},"body":{"modules/ApiModule.html":{}}}],["controllers/permissions.controller",{"_index":41,"title":{},"body":{"modules/ApiModule.html":{}}}],["controllers/roles.controller",{"_index":42,"title":{},"body":{"modules/ApiModule.html":{}}}],["controllers/users.controller",{"_index":43,"title":{},"body":{"modules/ApiModule.html":{}}}],["cookie",{"_index":1126,"title":{},"body":{"dependencies.html":{}}}],["corebaseentity",{"_index":646,"title":{},"body":{"classes/LocalBaseEntity.html":{}}}],["count",{"_index":1038,"title":{},"body":{"injectables/UsersService.html":{}}}],["coverage",{"_index":1060,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":121,"title":{},"body":{"controllers/ArticlesApiController.html":{},"injectables/ArticlesService.html":{},"controllers/CategoriesApiController.html":{},"injectables/CategoriesService.html":{},"controllers/PermissionsApiController.html":{},"injectables/PermissionsService.html":{},"controllers/RolesApiController.html":{},"injectables/RolesService.html":{},"injectables/SessionsService.html":{},"classes/UpdateArticleDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePermissionDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateSessionDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRequestDto.html":{},"controllers/UsersApiController.html":{},"injectables/UsersService.html":{}}}],["create(@user('uuid",{"_index":182,"title":{},"body":{"controllers/ArticlesApiController.html":{},"controllers/RolesApiController.html":{},"controllers/UsersApiController.html":{}}}],["create(createarticledto",{"_index":213,"title":{},"body":{"injectables/ArticlesService.html":{}}}],["create(createcategorydto",{"_index":456,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["create(createpermissiondto",{"_index":711,"title":{},"body":{"injectables/PermissionsService.html":{}}}],["create(createroledto",{"_index":777,"title":{},"body":{"injectables/RolesService.html":{}}}],["create(createsessiondto",{"_index":840,"title":{},"body":{"injectables/SessionsService.html":{}}}],["create(createuserdto",{"_index":988,"title":{},"body":{"injectables/UsersService.html":{}}}],["create(useruuid",{"_index":124,"title":{},"body":{"controllers/ArticlesApiController.html":{},"controllers/CategoriesApiController.html":{},"controllers/PermissionsApiController.html":{},"controllers/RolesApiController.html":{},"controllers/UsersApiController.html":{}}}],["createable",{"_index":183,"title":{},"body":{"controllers/ArticlesApiController.html":{},"controllers/CategoriesApiController.html":{},"controllers/PermissionsApiController.html":{},"controllers/RolesApiController.html":{},"controllers/UsersApiController.html":{}}}],["createarticledto",{"_index":214,"title":{"classes/CreateArticleDto.html":{}},"body":{"injectables/ArticlesService.html":{},"classes/CreateArticleDto.html":{},"classes/UpdateArticleDto.html":{},"coverage.html":{}}}],["createcategorydto",{"_index":420,"title":{"classes/CreateCategoryDto.html":{}},"body":{"controllers/CategoriesApiController.html":{},"injectables/CategoriesService.html":{},"classes/CategoryEntity.html":{},"classes/CreateCategoryDto.html":{},"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["createdat",{"_index":59,"title":{},"body":{"classes/ArticleEntity.html":{},"classes/SessionEntity.html":{},"classes/UserDto.html":{},"classes/UserEntity.html":{}}}],["createdto",{"_index":650,"title":{},"body":{"classes/LocalBaseEntity.html":{}}}],["createparamdecorator",{"_index":1244,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createpermissiondto",{"_index":509,"title":{"classes/CreatePermissionDto.html":{}},"body":{"classes/CreatePermissionDto.html":{},"classes/PermissionEntity.html":{},"controllers/PermissionsApiController.html":{},"injectables/PermissionsService.html":{},"classes/UpdatePermissionDto.html":{},"coverage.html":{}}}],["createquerybuilder('user",{"_index":1040,"title":{},"body":{"injectables/UsersService.html":{}}}],["createroledto",{"_index":523,"title":{"classes/CreateRoleDto.html":{}},"body":{"classes/CreateRoleDto.html":{},"classes/RoleEntity.html":{},"controllers/RolesApiController.html":{},"injectables/RolesService.html":{},"classes/UpdateRoleDto.html":{},"coverage.html":{}}}],["createsessiondto",{"_index":531,"title":{"classes/CreateSessionDto.html":{}},"body":{"classes/CreateSessionDto.html":{},"classes/SessionEntity.html":{},"injectables/SessionsService.html":{},"classes/UpdateSessionDto.html":{},"coverage.html":{}}}],["createuserdto",{"_index":126,"title":{"classes/CreateUserDto.html":{}},"body":{"controllers/ArticlesApiController.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserEntity.html":{},"controllers/UsersApiController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createuserrequestdto",{"_index":560,"title":{"classes/CreateUserRequestDto.html":{}},"body":{"classes/CreateUserRequestDto.html":{},"classes/UpdateUserRequestDto.html":{},"coverage.html":{}}}],["csurf",{"_index":1129,"title":{},"body":{"dependencies.html":{}}}],["current_timestamp",{"_index":112,"title":{},"body":{"classes/ArticleEntity.html":{},"classes/SessionEntity.html":{},"classes/UserEntity.html":{}}}],["currentpassword",{"_index":893,"title":{},"body":{"classes/UpdateUserRequestDto.html":{}}}],["dan",{"_index":621,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["dari",{"_index":633,"title":{},"body":{"injectables/JwtStrategy.html":{},"controllers/UsersApiController.html":{}}}],["data",{"_index":125,"title":{},"body":{"controllers/ArticlesApiController.html":{},"controllers/AuthApiController.html":{},"classes/BaseDto.html":{},"controllers/CategoriesApiController.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateUserDto.html":{},"controllers/PermissionsApiController.html":{},"classes/RoleDto.html":{},"controllers/RolesApiController.html":{},"classes/SessionDto.html":{},"controllers/UsersApiController.html":{},"miscellaneous/variables.html":{}}}],["data)).nopassword",{"_index":194,"title":{},"body":{"controllers/ArticlesApiController.html":{},"controllers/UsersApiController.html":{}}}],["data.permissions",{"_index":738,"title":{},"body":{"classes/RoleDto.html":{}}}],["data.permissions.map",{"_index":739,"title":{},"body":{"classes/RoleDto.html":{}}}],["data.user",{"_index":812,"title":{},"body":{"classes/SessionDto.html":{}}}],["datatype",{"_index":665,"title":{},"body":{"classes/PermissionDto.html":{},"classes/RoleDto.html":{},"classes/SessionDto.html":{},"classes/UpdateUserRequestDto.html":{},"classes/UserDto.html":{}}}],["datatype.uuid",{"_index":668,"title":{},"body":{"classes/PermissionDto.html":{},"classes/RoleDto.html":{},"classes/SessionDto.html":{},"classes/UserDto.html":{}}}],["date",{"_index":80,"title":{},"body":{"classes/ArticleEntity.html":{},"classes/SessionEntity.html":{},"injectables/SessionsService.html":{},"classes/UpdateSessionDto.html":{},"classes/UserDto.html":{},"classes/UserEntity.html":{}}}],["date.past",{"_index":919,"title":{},"body":{"classes/UserDto.html":{}}}],["db",{"_index":634,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["decorators",{"_index":71,"title":{},"body":{"classes/ArticleEntity.html":{},"controllers/ArticlesApiController.html":{},"controllers/AuthApiController.html":{},"controllers/CategoriesApiController.html":{},"classes/CategoryEntity.html":{},"classes/CreateCategoryDto.html":{},"classes/CreatePermissionDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserRequestDto.html":{},"controllers/HaloController.html":{},"classes/PermissionDto.html":{},"classes/PermissionEntity.html":{},"controllers/PermissionsApiController.html":{},"classes/RoleDto.html":{},"classes/RoleEntity.html":{},"controllers/RolesApiController.html":{},"classes/SessionDto.html":{},"classes/SessionEntity.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateSessionDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRequestDto.html":{},"classes/UserDto.html":{},"classes/UserEntity.html":{},"controllers/UsersApiController.html":{}}}],["default",{"_index":111,"title":{},"body":{"classes/ArticleEntity.html":{},"classes/CategoryEntity.html":{},"classes/SessionEntity.html":{},"classes/UserEntity.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":74,"title":{},"body":{"classes/ArticleEntity.html":{},"controllers/ArticlesApiController.html":{},"injectables/ArticlesService.html":{},"controllers/AuthApiController.html":{},"injectables/AuthService.html":{},"classes/BaseDto.html":{},"injectables/BasicStrategy.html":{},"guards/CanGuard.html":{},"controllers/CategoriesApiController.html":{},"injectables/CategoriesService.html":{},"classes/CategoryEntity.html":{},"classes/CreateCategoryDto.html":{},"classes/CreatePermissionDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateSessionDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserRequestDto.html":{},"controllers/HaloController.html":{},"guards/HasRolesGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LocalBaseEntity.html":{},"injectables/LocalStrategy.html":{},"classes/PermissionDto.html":{},"classes/PermissionEntity.html":{},"controllers/PermissionsApiController.html":{},"injectables/PermissionsService.html":{},"classes/RoleDto.html":{},"classes/RoleEntity.html":{},"controllers/RolesApiController.html":{},"injectables/RolesService.html":{},"classes/SessionDto.html":{},"classes/SessionEntity.html":{},"injectables/SessionsService.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateSessionDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRequestDto.html":{},"classes/UserDto.html":{},"classes/UserEntity.html":{},"controllers/UsersApiController.html":{},"injectables/UsersService.html":{}}}],["deletable",{"_index":197,"title":{},"body":{"controllers/ArticlesApiController.html":{},"controllers/CategoriesApiController.html":{},"controllers/PermissionsApiController.html":{},"controllers/RolesApiController.html":{},"controllers/UsersApiController.html":{}}}],["delete",{"_index":122,"title":{},"body":{"controllers/ArticlesApiController.html":{},"controllers/AuthApiController.html":{},"controllers/CategoriesApiController.html":{},"controllers/PermissionsApiController.html":{},"controllers/RolesApiController.html":{},"controllers/UsersApiController.html":{}}}],["delete(':uuid",{"_index":195,"title":{},"body":{"controllers/ArticlesApiController.html":{},"controllers/CategoriesApiController.html":{},"controllers/PermissionsApiController.html":{},"controllers/RolesApiController.html":{},"controllers/UsersApiController.html":{}}}],["delete(@user('uuid",{"_index":196,"title":{},"body":{"controllers/ArticlesApiController.html":{},"controllers/CategoriesApiController.html":{},"controllers/PermissionsApiController.html":{},"controllers/RolesApiController.html":{},"controllers/UsersApiController.html":{}}}],["delete(authuuid",{"_index":134,"title":{},"body":{"controllers/ArticlesApiController.html":{},"controllers/UsersApiController.html":{}}}],["delete(useruuid",{"_index":422,"title":{},"body":{"controllers/CategoriesApiController.html":{},"controllers/PermissionsApiController.html":{},"controllers/RolesApiController.html":{}}}],["dengan",{"_index":620,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["dependencies",{"_index":3,"title":{"dependencies.html":{}},"body":{"modules/ApiModule.html":{},"modules/ArticlesModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/PermissionsModule.html":{},"modules/RolesModule.html":{},"modules/SessionsModule.html":{},"modules/SuratModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":257,"title":{},"body":{"controllers/AuthApiController.html":{},"classes/CategoryEntity.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateUserRequestDto.html":{},"classes/UpdateUserRequestDto.html":{},"classes/UserDto.html":{},"controllers/UsersApiController.html":{},"index.html":{}}}],["deta",{"_index":802,"title":{},"body":{"injectables/RolesService.html":{}}}],["detachpermissions",{"_index":771,"title":{},"body":{"injectables/RolesService.html":{},"injectables/UsersService.html":{}}}],["detachpermissions(uuid",{"_index":779,"title":{},"body":{"injectables/RolesService.html":{},"injectables/UsersService.html":{}}}],["detachroles",{"_index":974,"title":{},"body":{"injectables/UsersService.html":{}}}],["detachroles(uuid",{"_index":991,"title":{},"body":{"injectables/UsersService.html":{}}}],["development",{"_index":1184,"title":{},"body":{"index.html":{}}}],["device",{"_index":358,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateSessionDto.html":{},"classes/SessionDto.html":{},"classes/SessionEntity.html":{}}}],["diakses",{"_index":635,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["dicabut",{"_index":303,"title":{},"body":{"controllers/AuthApiController.html":{}}}],["dicabut'})@useguards(jwtauthguard)@delete",{"_index":260,"title":{},"body":{"controllers/AuthApiController.html":{}}}],["dicari",{"_index":962,"title":{},"body":{"controllers/UsersApiController.html":{}}}],["dicari'})@apiokresponse({type",{"_index":953,"title":{},"body":{"controllers/UsersApiController.html":{}}}],["dicuri",{"_index":638,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["didaftarkan",{"_index":963,"title":{},"body":{"controllers/UsersApiController.html":{}}}],["didaftarkan'})@useguards(jwtauthguard)@post",{"_index":943,"title":{},"body":{"controllers/UsersApiController.html":{}}}],["digunakan",{"_index":572,"title":{},"body":{"classes/CreateUserRequestDto.html":{}}}],["dihapus",{"_index":965,"title":{},"body":{"controllers/UsersApiController.html":{}}}],["dihapus'})@useguards(jwtauthguard)@delete(':uuid",{"_index":946,"title":{},"body":{"controllers/UsersApiController.html":{}}}],["diperbaharui",{"_index":964,"title":{},"body":{"controllers/UsersApiController.html":{}}}],["diperbaharui'})@useguards(jwtauthguard)@patch(':uuid",{"_index":958,"title":{},"body":{"controllers/UsersApiController.html":{}}}],["diperoleh",{"_index":954,"title":{},"body":{"controllers/UsersApiController.html":{}}}],["diupdate",{"_index":911,"title":{},"body":{"classes/UserDto.html":{}}}],["dll",{"_index":630,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["documentation",{"_index":1061,"title":{},"body":{"coverage.html":{}}}],["dont",{"_index":186,"title":{},"body":{"controllers/ArticlesApiController.html":{},"controllers/CategoriesApiController.html":{},"controllers/PermissionsApiController.html":{},"controllers/RolesApiController.html":{},"controllers/UsersApiController.html":{}}}],["dotenv",{"_index":1131,"title":{},"body":{"dependencies.html":{}}}],["dto",{"_index":667,"title":{},"body":{"classes/PermissionDto.html":{},"classes/RoleDto.html":{},"classes/SessionDto.html":{},"classes/UserDto.html":{}}}],["dto.ts",{"_index":372,"title":{},"body":{"classes/BaseDto.html":{},"coverage.html":{}}}],["dto.ts:1",{"_index":374,"title":{},"body":{"classes/BaseDto.html":{}}}],["dto/create",{"_index":224,"title":{},"body":{"injectables/ArticlesService.html":{},"injectables/CategoriesService.html":{},"classes/CategoryEntity.html":{},"classes/PermissionEntity.html":{},"injectables/PermissionsService.html":{},"classes/RoleEntity.html":{},"injectables/RolesService.html":{},"classes/SessionEntity.html":{},"injectables/SessionsService.html":{},"classes/UserEntity.html":{},"injectables/UsersService.html":{}}}],["dto/session.dto",{"_index":851,"title":{},"body":{"injectables/SessionsService.html":{}}}],["dto/update",{"_index":226,"title":{},"body":{"injectables/ArticlesService.html":{},"injectables/CategoriesService.html":{},"injectables/PermissionsService.html":{},"injectables/RolesService.html":{},"injectables/SessionsService.html":{},"injectables/UsersService.html":{}}}],["dto/user.dto",{"_index":1016,"title":{},"body":{"injectables/UsersService.html":{}}}],["e",{"_index":176,"title":{},"body":{"controllers/ArticlesApiController.html":{},"classes/BaseDto.html":{},"controllers/CategoriesApiController.html":{},"controllers/PermissionsApiController.html":{},"controllers/RolesApiController.html":{},"controllers/UsersApiController.html":{},"injectables/UsersService.html":{}}}],["e2e",{"_index":1195,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":1173,"title":{},"body":{"index.html":{}}}],["email",{"_index":538,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserRequestDto.html":{},"classes/UserDto.html":{},"classes/UserEntity.html":{},"injectables/UsersService.html":{}}}],["email'})@isnotempty()@isstring()@isemail()@isunique(userentity",{"_index":563,"title":{},"body":{"classes/CreateUserRequestDto.html":{}}}],["emitter",{"_index":1103,"title":{},"body":{"dependencies.html":{}}}],["entities/category.entity",{"_index":448,"title":{},"body":{"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"classes/CreateCategoryDto.html":{}}}],["entities/permission.entity",{"_index":520,"title":{},"body":{"classes/CreatePermissionDto.html":{},"modules/PermissionsModule.html":{},"injectables/PermissionsService.html":{}}}],["entities/role.entity",{"_index":529,"title":{},"body":{"classes/CreateRoleDto.html":{},"classes/RoleDto.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{}}}],["entities/session.entity",{"_index":811,"title":{},"body":{"classes/SessionDto.html":{},"modules/SessionsModule.html":{},"injectables/SessionsService.html":{}}}],["entities/user.entity",{"_index":553,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserRequestDto.html":{},"classes/UserDto.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["entity",{"_index":103,"title":{},"body":{"classes/ArticleEntity.html":{},"classes/CategoryEntity.html":{},"classes/PermissionEntity.html":{},"classes/RoleEntity.html":{},"classes/SessionEntity.html":{},"classes/UserEntity.html":{}}}],["entity.ts",{"_index":645,"title":{},"body":{"classes/LocalBaseEntity.html":{},"coverage.html":{}}}],["entity.ts:10",{"_index":653,"title":{},"body":{"classes/LocalBaseEntity.html":{}}}],["entity.ts:3",{"_index":651,"title":{},"body":{"classes/LocalBaseEntity.html":{}}}],["entitynotfounderror",{"_index":161,"title":{},"body":{"controllers/ArticlesApiController.html":{},"controllers/CategoriesApiController.html":{},"controllers/PermissionsApiController.html":{},"controllers/RolesApiController.html":{},"controllers/UsersApiController.html":{}}}],["equal",{"_index":1087,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["example",{"_index":295,"title":{},"body":{"controllers/AuthApiController.html":{},"classes/CreatePermissionDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserRequestDto.html":{},"classes/PermissionDto.html":{},"classes/RoleDto.html":{},"classes/SessionDto.html":{},"classes/UpdateUserRequestDto.html":{},"classes/UserDto.html":{},"controllers/UsersApiController.html":{}}}],["executioncontext",{"_index":408,"title":{},"body":{"guards/CanGuard.html":{},"guards/HasRolesGuard.html":{},"miscellaneous/variables.html":{}}}],["exists.decorator.ts",{"_index":1090,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["expiresin",{"_index":335,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":45,"title":{},"body":{"modules/ApiModule.html":{},"classes/ArticleEntity.html":{},"controllers/ArticlesApiController.html":{},"modules/ArticlesModule.html":{},"injectables/ArticlesService.html":{},"controllers/AuthApiController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseController.html":{},"classes/BaseDto.html":{},"injectables/BasicAuthGuard.html":{},"injectables/BasicStrategy.html":{},"guards/CanGuard.html":{},"controllers/CategoriesApiController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"classes/CategoryEntity.html":{},"classes/CreateArticleDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreatePermissionDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateSessionDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserRequestDto.html":{},"controllers/HaloController.html":{},"guards/HasRolesGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"classes/LocalBaseEntity.html":{},"injectables/LocalStrategy.html":{},"classes/PermissionDto.html":{},"classes/PermissionEntity.html":{},"controllers/PermissionsApiController.html":{},"modules/PermissionsModule.html":{},"injectables/PermissionsService.html":{},"classes/RoleDto.html":{},"classes/RoleEntity.html":{},"controllers/RolesApiController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/SessionDto.html":{},"classes/SessionEntity.html":{},"modules/SessionsModule.html":{},"injectables/SessionsService.html":{},"modules/SuratModule.html":{},"injectables/SuratService.html":{},"classes/UpdateArticleDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePermissionDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateSessionDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRequestDto.html":{},"classes/UserDto.html":{},"classes/UserEntity.html":{},"controllers/UsersApiController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"modules/WebModule.html":{}}}],["exports",{"_index":205,"title":{},"body":{"modules/ArticlesModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/PermissionsModule.html":{},"modules/RolesModule.html":{},"modules/SessionsModule.html":{},"modules/UsersModule.html":{}}}],["express",{"_index":352,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["extends",{"_index":53,"title":{},"body":{"classes/ArticleEntity.html":{},"injectables/BasicAuthGuard.html":{},"injectables/BasicStrategy.html":{},"classes/CategoryEntity.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"classes/LocalBaseEntity.html":{},"injectables/LocalStrategy.html":{},"classes/PermissionDto.html":{},"classes/PermissionEntity.html":{},"classes/RoleDto.html":{},"classes/RoleEntity.html":{},"classes/SessionDto.html":{},"classes/SessionEntity.html":{},"classes/UpdateArticleDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePermissionDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateSessionDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRequestDto.html":{},"classes/UserDto.html":{},"classes/UserEntity.html":{}}}],["extractjwt",{"_index":607,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":611,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["faker",{"_index":280,"title":{},"body":{"controllers/AuthApiController.html":{},"classes/CreatePermissionDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserRequestDto.html":{},"classes/PermissionDto.html":{},"classes/RoleDto.html":{},"classes/SessionDto.html":{},"classes/UpdateUserRequestDto.html":{},"classes/UserDto.html":{},"dependencies.html":{}}}],["fakergeneratedpassword",{"_index":568,"title":{},"body":{"classes/CreateUserRequestDto.html":{},"classes/UpdateUserRequestDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["file",{"_index":18,"title":{},"body":{"modules/ApiModule.html":{},"classes/ArticleEntity.html":{},"controllers/ArticlesApiController.html":{},"modules/ArticlesModule.html":{},"injectables/ArticlesService.html":{},"controllers/AuthApiController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseController.html":{},"classes/BaseDto.html":{},"injectables/BasicAuthGuard.html":{},"injectables/BasicStrategy.html":{},"guards/CanGuard.html":{},"controllers/CategoriesApiController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"classes/CategoryEntity.html":{},"classes/CreateArticleDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreatePermissionDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateSessionDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserRequestDto.html":{},"controllers/HaloController.html":{},"guards/HasRolesGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"classes/LocalBaseEntity.html":{},"injectables/LocalStrategy.html":{},"classes/PermissionDto.html":{},"classes/PermissionEntity.html":{},"controllers/PermissionsApiController.html":{},"modules/PermissionsModule.html":{},"injectables/PermissionsService.html":{},"classes/RoleDto.html":{},"classes/RoleEntity.html":{},"controllers/RolesApiController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/SessionDto.html":{},"classes/SessionEntity.html":{},"modules/SessionsModule.html":{},"injectables/SessionsService.html":{},"modules/SuratModule.html":{},"injectables/SuratService.html":{},"classes/UpdateArticleDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePermissionDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateSessionDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRequestDto.html":{},"classes/UserDto.html":{},"classes/UserEntity.html":{},"controllers/UsersApiController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"modules/WebModule.html":{},"coverage.html":{}}}],["findall",{"_index":210,"title":{},"body":{"injectables/ArticlesService.html":{},"injectables/CategoriesService.html":{},"injectables/PermissionsService.html":{},"injectables/RolesService.html":{},"injectables/SessionsService.html":{},"injectables/UsersService.html":{}}}],["findbyemail",{"_index":975,"title":{},"body":{"injectables/UsersService.html":{}}}],["findbyemail(email",{"_index":994,"title":{},"body":{"injectables/UsersService.html":{}}}],["findbyname",{"_index":706,"title":{},"body":{"injectables/PermissionsService.html":{},"injectables/RolesService.html":{}}}],["findbyname(name",{"_index":714,"title":{},"body":{"injectables/PermissionsService.html":{},"injectables/RolesService.html":{}}}],["findbyslug",{"_index":451,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["findbyslug(slug",{"_index":459,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["findbyusername",{"_index":976,"title":{},"body":{"injectables/UsersService.html":{}}}],["findbyusername(username",{"_index":996,"title":{},"body":{"injectables/UsersService.html":{}}}],["findone",{"_index":211,"title":{},"body":{"injectables/ArticlesService.html":{},"injectables/CategoriesService.html":{},"injectables/PermissionsService.html":{},"injectables/RolesService.html":{},"injectables/SessionsService.html":{},"injectables/UsersService.html":{}}}],["findone(uuid",{"_index":217,"title":{},"body":{"injectables/ArticlesService.html":{},"injectables/CategoriesService.html":{},"injectables/PermissionsService.html":{},"injectables/RolesService.html":{},"injectables/SessionsService.html":{},"injectables/UsersService.html":{}}}],["findonebyoptions",{"_index":977,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonebyoptions(options",{"_index":999,"title":{},"body":{"injectables/UsersService.html":{}}}],["findoneoptions",{"_index":783,"title":{},"body":{"injectables/RolesService.html":{},"injectables/SessionsService.html":{},"injectables/UsersService.html":{}}}],["forbiddenexception",{"_index":146,"title":{},"body":{"controllers/ArticlesApiController.html":{},"controllers/CategoriesApiController.html":{},"controllers/PermissionsApiController.html":{},"controllers/RolesApiController.html":{},"controllers/UsersApiController.html":{}}}],["framework",{"_index":1171,"title":{},"body":{"index.html":{}}}],["function",{"_index":1085,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":1157,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["gensaltsync",{"_index":1012,"title":{},"body":{"injectables/UsersService.html":{}}}],["gensaltsync(10",{"_index":1019,"title":{},"body":{"injectables/UsersService.html":{}}}],["get(':name",{"_index":686,"title":{},"body":{"controllers/PermissionsApiController.html":{},"controllers/RolesApiController.html":{}}}],["get(':slug",{"_index":425,"title":{},"body":{"controllers/CategoriesApiController.html":{}}}],["get(':username",{"_index":139,"title":{},"body":{"controllers/ArticlesApiController.html":{},"controllers/UsersApiController.html":{}}}],["get()@render('index",{"_index":584,"title":{},"body":{"controllers/HaloController.html":{}}}],["get(@param('name",{"_index":693,"title":{},"body":{"controllers/PermissionsApiController.html":{},"controllers/RolesApiController.html":{}}}],["get(@param('slug",{"_index":436,"title":{},"body":{"controllers/CategoriesApiController.html":{}}}],["get(@param('username",{"_index":168,"title":{},"body":{"controllers/ArticlesApiController.html":{},"controllers/UsersApiController.html":{}}}],["get(name",{"_index":685,"title":{},"body":{"controllers/PermissionsApiController.html":{},"controllers/RolesApiController.html":{}}}],["get(slug",{"_index":424,"title":{},"body":{"controllers/CategoriesApiController.html":{}}}],["get(username",{"_index":138,"title":{},"body":{"controllers/ArticlesApiController.html":{},"controllers/UsersApiController.html":{}}}],["getcount",{"_index":1051,"title":{},"body":{"injectables/UsersService.html":{}}}],["getnopassword",{"_index":915,"title":{},"body":{"classes/UserDto.html":{},"classes/UserEntity.html":{}}}],["getrequest",{"_index":1246,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getting",{"_index":1167,"title":{"index.html":{}},"body":{}}],["gettojson",{"_index":652,"title":{},"body":{"classes/LocalBaseEntity.html":{}}}],["getuser",{"_index":835,"title":{},"body":{"injectables/SessionsService.html":{}}}],["getuser(uuid",{"_index":844,"title":{},"body":{"injectables/SessionsService.html":{}}}],["graph",{"_index":1228,"title":{},"body":{"modules.html":{}}}],["grow",{"_index":1202,"title":{},"body":{"index.html":{}}}],["guard",{"_index":399,"title":{"guards/CanGuard.html":{},"guards/HasRolesGuard.html":{}},"body":{"coverage.html":{}}}],["guards",{"_index":401,"title":{},"body":{"guards/CanGuard.html":{},"guards/HasRolesGuard.html":{},"overview.html":{}}}],["halo",{"_index":582,"title":{},"body":{"controllers/HaloController.html":{}}}],["halo/halo.controller",{"_index":1059,"title":{},"body":{"modules/WebModule.html":{}}}],["halocontroller",{"_index":579,"title":{"controllers/HaloController.html":{}},"body":{"controllers/HaloController.html":{},"modules/WebModule.html":{},"coverage.html":{}}}],["hash('haval160,4",{"_index":1255,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hash('sha512",{"_index":1256,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hashsync",{"_index":1013,"title":{},"body":{"injectables/UsersService.html":{}}}],["hashsync(createuserdto.password",{"_index":1018,"title":{},"body":{"injectables/UsersService.html":{}}}],["hashsync(updateuserdto.password",{"_index":1030,"title":{},"body":{"injectables/UsersService.html":{}}}],["haspermissions",{"_index":978,"title":{},"body":{"injectables/UsersService.html":{}}}],["haspermissions(uuid",{"_index":1001,"title":{},"body":{"injectables/UsersService.html":{}}}],["hasroles",{"_index":979,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["hasroles(uuid",{"_index":1003,"title":{},"body":{"injectables/UsersService.html":{}}}],["hasrolesguard",{"_index":590,"title":{"guards/HasRolesGuard.html":{}},"body":{"guards/HasRolesGuard.html":{},"coverage.html":{}}}],["hbs",{"_index":1135,"title":{},"body":{"dependencies.html":{}}}],["here",{"_index":1213,"title":{},"body":{"index.html":{}}}],["histories",{"_index":60,"title":{},"body":{"classes/ArticleEntity.html":{}}}],["http",{"_index":390,"title":{},"body":{"injectables/BasicStrategy.html":{}}}],["https://nestjs.com",{"_index":1220,"title":{},"body":{"index.html":{}}}],["identifier",{"_index":1062,"title":{},"body":{"coverage.html":{}}}],["ignoreexpiration",{"_index":612,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["implements",{"_index":411,"title":{},"body":{"guards/CanGuard.html":{},"guards/HasRolesGuard.html":{}}}],["import",{"_index":28,"title":{},"body":{"modules/ApiModule.html":{},"classes/ArticleEntity.html":{},"controllers/ArticlesApiController.html":{},"modules/ArticlesModule.html":{},"injectables/ArticlesService.html":{},"controllers/AuthApiController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BasicAuthGuard.html":{},"injectables/BasicStrategy.html":{},"guards/CanGuard.html":{},"controllers/CategoriesApiController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"classes/CategoryEntity.html":{},"classes/CreateCategoryDto.html":{},"classes/CreatePermissionDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateSessionDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserRequestDto.html":{},"controllers/HaloController.html":{},"guards/HasRolesGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"classes/LocalBaseEntity.html":{},"injectables/LocalStrategy.html":{},"classes/PermissionDto.html":{},"classes/PermissionEntity.html":{},"controllers/PermissionsApiController.html":{},"modules/PermissionsModule.html":{},"injectables/PermissionsService.html":{},"classes/RoleDto.html":{},"classes/RoleEntity.html":{},"controllers/RolesApiController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/SessionDto.html":{},"classes/SessionEntity.html":{},"modules/SessionsModule.html":{},"injectables/SessionsService.html":{},"modules/SuratModule.html":{},"injectables/SuratService.html":{},"classes/UpdateArticleDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePermissionDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateSessionDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRequestDto.html":{},"classes/UserDto.html":{},"classes/UserEntity.html":{},"controllers/UsersApiController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"modules/WebModule.html":{}}}],["imports",{"_index":27,"title":{},"body":{"modules/ApiModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/PermissionsModule.html":{},"modules/RolesModule.html":{},"modules/SessionsModule.html":{},"modules/UsersModule.html":{}}}],["index",{"_index":55,"title":{"index.html":{}},"body":{"classes/ArticleEntity.html":{},"controllers/ArticlesApiController.html":{},"injectables/ArticlesService.html":{},"controllers/AuthApiController.html":{},"injectables/AuthService.html":{},"injectables/BasicStrategy.html":{},"guards/CanGuard.html":{},"controllers/CategoriesApiController.html":{},"injectables/CategoriesService.html":{},"classes/CategoryEntity.html":{},"classes/CreateCategoryDto.html":{},"classes/CreatePermissionDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateSessionDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserRequestDto.html":{},"controllers/HaloController.html":{},"guards/HasRolesGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LocalBaseEntity.html":{},"injectables/LocalStrategy.html":{},"classes/PermissionDto.html":{},"classes/PermissionEntity.html":{},"controllers/PermissionsApiController.html":{},"injectables/PermissionsService.html":{},"classes/RoleDto.html":{},"classes/RoleEntity.html":{},"controllers/RolesApiController.html":{},"injectables/RolesService.html":{},"classes/SessionDto.html":{},"classes/SessionEntity.html":{},"injectables/SessionsService.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateSessionDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRequestDto.html":{},"classes/UserDto.html":{},"classes/UserEntity.html":{},"controllers/UsersApiController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":16,"title":{},"body":{"modules/ApiModule.html":{},"classes/ArticleEntity.html":{},"controllers/ArticlesApiController.html":{},"modules/ArticlesModule.html":{},"injectables/ArticlesService.html":{},"controllers/AuthApiController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseController.html":{},"classes/BaseDto.html":{},"injectables/BasicAuthGuard.html":{},"injectables/BasicStrategy.html":{},"guards/CanGuard.html":{},"controllers/CategoriesApiController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"classes/CategoryEntity.html":{},"classes/CreateArticleDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreatePermissionDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateSessionDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserRequestDto.html":{},"controllers/HaloController.html":{},"guards/HasRolesGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"classes/LocalBaseEntity.html":{},"injectables/LocalStrategy.html":{},"classes/PermissionDto.html":{},"classes/PermissionEntity.html":{},"controllers/PermissionsApiController.html":{},"modules/PermissionsModule.html":{},"injectables/PermissionsService.html":{},"classes/RoleDto.html":{},"classes/RoleEntity.html":{},"controllers/RolesApiController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/SessionDto.html":{},"classes/SessionEntity.html":{},"modules/SessionsModule.html":{},"injectables/SessionsService.html":{},"modules/SuratModule.html":{},"injectables/SuratService.html":{},"classes/UpdateArticleDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePermissionDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateSessionDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRequestDto.html":{},"classes/UserDto.html":{},"classes/UserEntity.html":{},"controllers/UsersApiController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"modules/WebModule.html":{}}}],["ini",{"_index":302,"title":{},"body":{"controllers/AuthApiController.html":{},"classes/UpdateUserRequestDto.html":{}}}],["ini'})@apiokresponse({type",{"_index":255,"title":{},"body":{"controllers/AuthApiController.html":{}}}],["ini'})@isnotempty()@isstring",{"_index":896,"title":{},"body":{"classes/UpdateUserRequestDto.html":{}}}],["inject",{"_index":349,"title":{},"body":{"injectables/AuthService.html":{}}}],["inject(request",{"_index":355,"title":{},"body":{"injectables/AuthService.html":{}}}],["injectable",{"_index":207,"title":{"injectables/ArticlesService.html":{},"injectables/AuthService.html":{},"injectables/BasicAuthGuard.html":{},"injectables/BasicStrategy.html":{},"injectables/CategoriesService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PermissionsService.html":{},"injectables/RolesService.html":{},"injectables/SessionsService.html":{},"injectables/SuratService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/ArticlesService.html":{},"injectables/AuthService.html":{},"injectables/BasicAuthGuard.html":{},"injectables/BasicStrategy.html":{},"guards/CanGuard.html":{},"injectables/CategoriesService.html":{},"guards/HasRolesGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PermissionsService.html":{},"injectables/RolesService.html":{},"injectables/SessionsService.html":{},"injectables/SuratService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":208,"title":{},"body":{"injectables/ArticlesService.html":{},"injectables/AuthService.html":{},"injectables/BasicAuthGuard.html":{},"injectables/BasicStrategy.html":{},"injectables/CategoriesService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PermissionsService.html":{},"injectables/RolesService.html":{},"injectables/SessionsService.html":{},"injectables/SuratService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectrepository",{"_index":465,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/PermissionsService.html":{},"injectables/RolesService.html":{},"injectables/SessionsService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(categoryentity",{"_index":469,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["injectrepository(permissionentity",{"_index":721,"title":{},"body":{"injectables/PermissionsService.html":{}}}],["injectrepository(roleentity",{"_index":791,"title":{},"body":{"injectables/RolesService.html":{}}}],["injectrepository(sessionentity",{"_index":852,"title":{},"body":{"injectables/SessionsService.html":{}}}],["injectrepository(userentity",{"_index":1017,"title":{},"body":{"injectables/UsersService.html":{}}}],["installation",{"_index":1180,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":1182,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":177,"title":{},"body":{"controllers/ArticlesApiController.html":{},"controllers/CategoriesApiController.html":{},"controllers/PermissionsApiController.html":{},"controllers/RolesApiController.html":{},"controllers/UsersApiController.html":{}}}],["internet",{"_index":552,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserRequestDto.html":{},"classes/SessionDto.html":{},"classes/UserDto.html":{}}}],["internet.email",{"_index":555,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserRequestDto.html":{},"classes/UserDto.html":{}}}],["internet.ip",{"_index":816,"title":{},"body":{"classes/SessionDto.html":{}}}],["internet.ipv6",{"_index":815,"title":{},"body":{"classes/SessionDto.html":{}}}],["internet.password",{"_index":558,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserRequestDto.html":{},"miscellaneous/variables.html":{}}}],["internet.useragent",{"_index":814,"title":{},"body":{"classes/SessionDto.html":{}}}],["internet.username",{"_index":557,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserRequestDto.html":{},"classes/UserDto.html":{}}}],["ip",{"_index":361,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateSessionDto.html":{},"injectables/JwtStrategy.html":{},"classes/SessionDto.html":{},"classes/SessionEntity.html":{}}}],["isdate",{"_index":886,"title":{},"body":{"classes/UpdateSessionDto.html":{}}}],["isemail",{"_index":550,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserRequestDto.html":{}}}],["isequalto",{"_index":1089,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["isequalto(property",{"_index":1161,"title":{},"body":{"miscellaneous/functions.html":{}}}],["isexists",{"_index":1091,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["isexists(target",{"_index":1163,"title":{},"body":{"miscellaneous/functions.html":{}}}],["isnotempty",{"_index":505,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreatePermissionDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserRequestDto.html":{},"classes/UpdateSessionDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRequestDto.html":{}}}],["isnotempty()@isstring",{"_index":500,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/UpdateUserDto.html":{}}}],["isnotempty()@isstring()@isunique(permissionentity)@apiproperty({example",{"_index":512,"title":{},"body":{"classes/CreatePermissionDto.html":{}}}],["isnotempty()@isstring()@isunique(roleentity)@apiproperty({example",{"_index":526,"title":{},"body":{"classes/CreateRoleDto.html":{}}}],["isnotempty()@slug(categoryentity",{"_index":503,"title":{},"body":{"classes/CreateCategoryDto.html":{}}}],["isstring",{"_index":506,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreatePermissionDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserRequestDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRequestDto.html":{}}}],["issuper",{"_index":1054,"title":{},"body":{"injectables/UsersService.html":{}}}],["isunique",{"_index":516,"title":{},"body":{"classes/CreatePermissionDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserRequestDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["isunique(permissionentity",{"_index":521,"title":{},"body":{"classes/CreatePermissionDto.html":{}}}],["isunique(roleentity",{"_index":530,"title":{},"body":{"classes/CreateRoleDto.html":{}}}],["isunique(target",{"_index":1165,"title":{},"body":{"miscellaneous/functions.html":{}}}],["isunique(userentity",{"_index":556,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserRequestDto.html":{}}}],["jika",{"_index":245,"title":{},"body":{"controllers/AuthApiController.html":{},"injectables/JwtStrategy.html":{}}}],["join",{"_index":1209,"title":{},"body":{"index.html":{}}}],["jointable",{"_index":104,"title":{},"body":{"classes/ArticleEntity.html":{},"classes/RoleEntity.html":{},"classes/UserEntity.html":{}}}],["json.stringify(this",{"_index":654,"title":{},"body":{"classes/LocalBaseEntity.html":{}}}],["jwt",{"_index":298,"title":{},"body":{"controllers/AuthApiController.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwtauthguard",{"_index":152,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"controllers/ArticlesApiController.html":{},"controllers/AuthApiController.html":{},"controllers/CategoriesApiController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/PermissionsApiController.html":{},"controllers/RolesApiController.html":{},"controllers/UsersApiController.html":{},"coverage.html":{}}}],["jwtconstants",{"_index":324,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtconstants.secret",{"_index":333,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["jwtfromrequest",{"_index":610,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":321,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":331,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":342,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":314,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":1217,"title":{},"body":{"index.html":{}}}],["kata",{"_index":894,"title":{},"body":{"classes/UpdateUserRequestDto.html":{}}}],["katasandi",{"_index":578,"title":{},"body":{"classes/CreateUserRequestDto.html":{}}}],["katasandi'})@isnotempty()@isstring()@minlength(6",{"_index":569,"title":{},"body":{"classes/CreateUserRequestDto.html":{}}}],["ke",{"_index":268,"title":{},"body":{"controllers/AuthApiController.html":{},"injectables/JwtStrategy.html":{}}}],["kemungkinan",{"_index":637,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["keperluan",{"_index":629,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["lastseen",{"_index":818,"title":{},"body":{"classes/SessionEntity.html":{},"injectables/SessionsService.html":{},"classes/UpdateSessionDto.html":{}}}],["leftjoin('role.permissions",{"_index":1043,"title":{},"body":{"injectables/UsersService.html":{}}}],["leftjoin('user.permissions",{"_index":1041,"title":{},"body":{"injectables/UsersService.html":{}}}],["leftjoin('user.roles",{"_index":1042,"title":{},"body":{"injectables/UsersService.html":{}}}],["lengkap",{"_index":576,"title":{},"body":{"classes/CreateUserRequestDto.html":{},"classes/UserDto.html":{}}}],["lengkap'})@isnotempty()@isstring",{"_index":566,"title":{},"body":{"classes/CreateUserRequestDto.html":{}}}],["license",{"_index":1223,"title":{},"body":{"index.html":{}}}],["licensed",{"_index":1199,"title":{},"body":{"index.html":{}}}],["lingu",{"_index":951,"title":{},"body":{"controllers/UsersApiController.html":{}}}],["lingusecret",{"_index":1257,"title":{},"body":{"miscellaneous/variables.html":{}}}],["literal",{"_index":238,"title":{},"body":{"controllers/AuthApiController.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}}}],["local",{"_index":658,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["localauthguard",{"_index":641,"title":{"injectables/LocalAuthGuard.html":{}},"body":{"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["localbaseentity",{"_index":644,"title":{"classes/LocalBaseEntity.html":{}},"body":{"classes/LocalBaseEntity.html":{},"coverage.html":{}}}],["localstrategy",{"_index":315,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["logger",{"_index":1011,"title":{},"body":{"injectables/UsersService.html":{}}}],["login",{"_index":234,"title":{},"body":{"controllers/AuthApiController.html":{},"injectables/AuthService.html":{},"classes/CreateUserRequestDto.html":{}}}],["login(@request",{"_index":300,"title":{},"body":{"controllers/AuthApiController.html":{}}}],["login(undefined",{"_index":237,"title":{},"body":{"controllers/AuthApiController.html":{}}}],["login(user",{"_index":344,"title":{},"body":{"injectables/AuthService.html":{}}}],["logout",{"_index":235,"title":{},"body":{"controllers/AuthApiController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["logout(@activesession",{"_index":304,"title":{},"body":{"controllers/AuthApiController.html":{}}}],["logout(activesession",{"_index":250,"title":{},"body":{"controllers/AuthApiController.html":{}}}],["logout(session",{"_index":346,"title":{},"body":{"injectables/AuthService.html":{}}}],["lorem",{"_index":515,"title":{},"body":{"classes/CreatePermissionDto.html":{},"classes/CreateRoleDto.html":{}}}],["lorem.word",{"_index":522,"title":{},"body":{"classes/CreatePermissionDto.html":{},"classes/CreateRoleDto.html":{}}}],["lower",{"_index":471,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["manytomany",{"_index":105,"title":{},"body":{"classes/ArticleEntity.html":{},"classes/CategoryEntity.html":{},"classes/PermissionEntity.html":{},"classes/RoleEntity.html":{},"classes/UserEntity.html":{}}}],["manytomany(undefined",{"_index":77,"title":{},"body":{"classes/ArticleEntity.html":{},"classes/CategoryEntity.html":{},"classes/PermissionEntity.html":{},"classes/RoleEntity.html":{},"classes/UserEntity.html":{}}}],["manytoone",{"_index":106,"title":{},"body":{"classes/ArticleEntity.html":{},"classes/SessionEntity.html":{}}}],["manytoone(undefined",{"_index":92,"title":{},"body":{"classes/ArticleEntity.html":{},"classes/SessionEntity.html":{}}}],["matching",{"_index":48,"title":{},"body":{"modules/ApiModule.html":{},"classes/ArticleEntity.html":{},"controllers/ArticlesApiController.html":{},"modules/ArticlesModule.html":{},"injectables/ArticlesService.html":{},"controllers/AuthApiController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseController.html":{},"classes/BaseDto.html":{},"injectables/BasicAuthGuard.html":{},"injectables/BasicStrategy.html":{},"guards/CanGuard.html":{},"controllers/CategoriesApiController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"classes/CategoryEntity.html":{},"classes/CreateArticleDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreatePermissionDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateSessionDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserRequestDto.html":{},"controllers/HaloController.html":{},"guards/HasRolesGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"classes/LocalBaseEntity.html":{},"injectables/LocalStrategy.html":{},"classes/PermissionDto.html":{},"classes/PermissionEntity.html":{},"controllers/PermissionsApiController.html":{},"modules/PermissionsModule.html":{},"injectables/PermissionsService.html":{},"classes/RoleDto.html":{},"classes/RoleEntity.html":{},"controllers/RolesApiController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/SessionDto.html":{},"classes/SessionEntity.html":{},"modules/SessionsModule.html":{},"injectables/SessionsService.html":{},"modules/SuratModule.html":{},"injectables/SuratService.html":{},"classes/UpdateArticleDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePermissionDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateSessionDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRequestDto.html":{},"classes/UserDto.html":{},"classes/UserEntity.html":{},"controllers/UsersApiController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"modules/WebModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["memanggil",{"_index":577,"title":{},"body":{"classes/CreateUserRequestDto.html":{}}}],["memanggil'})@isnotempty()@isstring()@isunique(userentity",{"_index":574,"title":{},"body":{"classes/CreateUserRequestDto.html":{}}}],["memasang",{"_index":625,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["memastikan",{"_index":622,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["membuat",{"_index":240,"title":{},"body":{"controllers/AuthApiController.html":{}}}],["memeriksa",{"_index":264,"title":{},"body":{"controllers/AuthApiController.html":{}}}],["memperbaharui",{"_index":957,"title":{},"body":{"controllers/UsersApiController.html":{}}}],["mencabut",{"_index":253,"title":{},"body":{"controllers/AuthApiController.html":{}}}],["mencetak",{"_index":661,"title":{},"body":{"classes/PermissionDto.html":{}}}],["mencocokan",{"_index":618,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["mendaftarkan",{"_index":940,"title":{},"body":{"controllers/UsersApiController.html":{}}}],["mengabil",{"_index":948,"title":{},"body":{"controllers/UsersApiController.html":{}}}],["menghapus",{"_index":632,"title":{},"body":{"injectables/JwtStrategy.html":{},"controllers/UsersApiController.html":{}}}],["message",{"_index":586,"title":{},"body":{"controllers/HaloController.html":{}}}],["metadata",{"_index":1143,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":119,"title":{},"body":{"controllers/ArticlesApiController.html":{},"injectables/ArticlesService.html":{},"controllers/AuthApiController.html":{},"injectables/AuthService.html":{},"injectables/BasicStrategy.html":{},"guards/CanGuard.html":{},"controllers/CategoriesApiController.html":{},"injectables/CategoriesService.html":{},"controllers/HaloController.html":{},"guards/HasRolesGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/PermissionsApiController.html":{},"injectables/PermissionsService.html":{},"controllers/RolesApiController.html":{},"injectables/RolesService.html":{},"injectables/SessionsService.html":{},"controllers/UsersApiController.html":{},"injectables/UsersService.html":{}}}],["minlength",{"_index":551,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserRequestDto.html":{}}}],["minlength(6",{"_index":559,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserRequestDto.html":{}}}],["miscellaneous",{"_index":1156,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1198,"title":{},"body":{"index.html":{}}}],["mode",{"_index":1188,"title":{},"body":{"index.html":{}}}],["module",{"_index":0,"title":{"modules/ApiModule.html":{},"modules/ArticlesModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/PermissionsModule.html":{},"modules/RolesModule.html":{},"modules/SessionsModule.html":{},"modules/SuratModule.html":{},"modules/UsersModule.html":{},"modules/WebModule.html":{}},"body":{"modules/ApiModule.html":{},"modules/ArticlesModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/PermissionsModule.html":{},"modules/RolesModule.html":{},"modules/SessionsModule.html":{},"modules/SuratModule.html":{},"modules/UsersModule.html":{},"modules/WebModule.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/ApiModule.html":{},"modules/ArticlesModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/PermissionsModule.html":{},"modules/RolesModule.html":{},"modules/SessionsModule.html":{},"modules/SuratModule.html":{},"modules/UsersModule.html":{},"modules/WebModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":1212,"title":{},"body":{"index.html":{}}}],["mysql2",{"_index":1137,"title":{},"body":{"dependencies.html":{}}}],["myśliwiec",{"_index":1218,"title":{},"body":{"index.html":{}}}],["nama",{"_index":565,"title":{},"body":{"classes/CreateUserRequestDto.html":{},"classes/UserDto.html":{}}}],["name",{"_index":109,"title":{},"body":{"classes/ArticleEntity.html":{},"controllers/ArticlesApiController.html":{},"injectables/ArticlesService.html":{},"controllers/AuthApiController.html":{},"injectables/AuthService.html":{},"classes/BaseDto.html":{},"injectables/BasicStrategy.html":{},"guards/CanGuard.html":{},"controllers/CategoriesApiController.html":{},"injectables/CategoriesService.html":{},"classes/CategoryEntity.html":{},"classes/CreateCategoryDto.html":{},"classes/CreatePermissionDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserRequestDto.html":{},"guards/HasRolesGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LocalBaseEntity.html":{},"injectables/LocalStrategy.html":{},"classes/PermissionDto.html":{},"classes/PermissionEntity.html":{},"controllers/PermissionsApiController.html":{},"injectables/PermissionsService.html":{},"classes/RoleDto.html":{},"classes/RoleEntity.html":{},"controllers/RolesApiController.html":{},"injectables/RolesService.html":{},"classes/SessionDto.html":{},"classes/SessionEntity.html":{},"injectables/SessionsService.html":{},"classes/UserDto.html":{},"classes/UserEntity.html":{},"controllers/UsersApiController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["name.findname",{"_index":554,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserRequestDto.html":{}}}],["name.firstname",{"_index":917,"title":{},"body":{"classes/UserDto.html":{}}}],["name.lastname",{"_index":918,"title":{},"body":{"classes/UserDto.html":{}}}],["nest",{"_index":1177,"title":{},"body":{"index.html":{}}}],["nestcafold",{"_index":1224,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":1222,"title":{},"body":{"index.html":{}}}],["nestjs/axios",{"_index":1097,"title":{},"body":{"dependencies.html":{}}}],["nestjs/bull",{"_index":1099,"title":{},"body":{"dependencies.html":{}}}],["nestjs/common",{"_index":29,"title":{},"body":{"modules/ApiModule.html":{},"controllers/ArticlesApiController.html":{},"modules/ArticlesModule.html":{},"injectables/ArticlesService.html":{},"controllers/AuthApiController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BasicAuthGuard.html":{},"injectables/BasicStrategy.html":{},"guards/CanGuard.html":{},"controllers/CategoriesApiController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"controllers/HaloController.html":{},"guards/HasRolesGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/PermissionsApiController.html":{},"modules/PermissionsModule.html":{},"injectables/PermissionsService.html":{},"controllers/RolesApiController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"modules/SessionsModule.html":{},"injectables/SessionsService.html":{},"modules/SuratModule.html":{},"injectables/SuratService.html":{},"controllers/UsersApiController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"modules/WebModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":351,"title":{},"body":{"injectables/AuthService.html":{},"guards/CanGuard.html":{},"guards/HasRolesGuard.html":{},"dependencies.html":{}}}],["nestjs/event",{"_index":1102,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":322,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":874,"title":{},"body":{"classes/UpdateArticleDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePermissionDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateSessionDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRequestDto.html":{}}}],["nestjs/passport",{"_index":320,"title":{},"body":{"modules/AuthModule.html":{},"injectables/BasicAuthGuard.html":{},"injectables/BasicStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1106,"title":{},"body":{"dependencies.html":{}}}],["nestjs/schedule",{"_index":1109,"title":{},"body":{"dependencies.html":{}}}],["nestjs/serve",{"_index":1111,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":278,"title":{},"body":{"controllers/AuthApiController.html":{},"classes/CreatePermissionDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserRequestDto.html":{},"classes/PermissionDto.html":{},"classes/RoleDto.html":{},"classes/SessionDto.html":{},"classes/SessionEntity.html":{},"classes/UpdateSessionDto.html":{},"classes/UpdateUserRequestDto.html":{},"classes/UserDto.html":{},"controllers/UsersApiController.html":{},"dependencies.html":{}}}],["nestjs/throttler",{"_index":1115,"title":{},"body":{"dependencies.html":{}}}],["nestjs/typeorm",{"_index":31,"title":{},"body":{"modules/ApiModule.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"modules/PermissionsModule.html":{},"injectables/PermissionsService.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"modules/SessionsModule.html":{},"injectables/SessionsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/websockets",{"_index":1118,"title":{},"body":{"dependencies.html":{}}}],["new",{"_index":179,"title":{},"body":{"controllers/ArticlesApiController.html":{},"injectables/ArticlesService.html":{},"controllers/AuthApiController.html":{},"injectables/BasicStrategy.html":{},"controllers/CategoriesApiController.html":{},"injectables/CategoriesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/PermissionsApiController.html":{},"injectables/PermissionsService.html":{},"classes/RoleDto.html":{},"controllers/RolesApiController.html":{},"classes/SessionDto.html":{},"injectables/SessionsService.html":{},"controllers/UsersApiController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["node.js",{"_index":1170,"title":{},"body":{"index.html":{}}}],["nopassword",{"_index":901,"title":{},"body":{"classes/UserDto.html":{},"classes/UserEntity.html":{}}}],["notfoundexception",{"_index":147,"title":{},"body":{"controllers/ArticlesApiController.html":{},"controllers/CategoriesApiController.html":{},"controllers/PermissionsApiController.html":{},"controllers/RolesApiController.html":{},"controllers/UsersApiController.html":{}}}],["notfoundexception(e.message",{"_index":180,"title":{},"body":{"controllers/ArticlesApiController.html":{},"controllers/CategoriesApiController.html":{},"controllers/PermissionsApiController.html":{},"controllers/RolesApiController.html":{},"controllers/UsersApiController.html":{}}}],["npm",{"_index":1181,"title":{},"body":{"index.html":{}}}],["null",{"_index":493,"title":{},"body":{"classes/CategoryEntity.html":{},"injectables/SessionsService.html":{}}}],["nullable",{"_index":113,"title":{},"body":{"classes/ArticleEntity.html":{},"classes/UserEntity.html":{}}}],["number",{"_index":1022,"title":{},"body":{"injectables/UsersService.html":{}}}],["object",{"_index":1252,"title":{},"body":{"miscellaneous/variables.html":{}}}],["object.assign(category",{"_index":480,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["object.assign(permission",{"_index":727,"title":{},"body":{"injectables/PermissionsService.html":{}}}],["object.assign(request",{"_index":631,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["object.assign(session",{"_index":860,"title":{},"body":{"injectables/SessionsService.html":{}}}],["object.assign(this",{"_index":376,"title":{},"body":{"classes/BaseDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateUserDto.html":{},"classes/LocalBaseEntity.html":{},"classes/RoleDto.html":{},"classes/SessionDto.html":{}}}],["object.assign(updateuserdto",{"_index":1031,"title":{},"body":{"injectables/UsersService.html":{}}}],["object.assign(user",{"_index":1032,"title":{},"body":{"injectables/UsersService.html":{}}}],["officegen",{"_index":1139,"title":{},"body":{"dependencies.html":{}}}],["onetomany",{"_index":934,"title":{},"body":{"classes/UserEntity.html":{}}}],["onetomany(undefined",{"_index":921,"title":{},"body":{"classes/UserEntity.html":{}}}],["open",{"_index":1200,"title":{},"body":{"index.html":{}}}],["operator",{"_index":733,"title":{},"body":{"classes/RoleDto.html":{}}}],["optional",{"_index":130,"title":{},"body":{"controllers/ArticlesApiController.html":{},"injectables/ArticlesService.html":{},"controllers/AuthApiController.html":{},"injectables/AuthService.html":{},"classes/BaseDto.html":{},"injectables/BasicStrategy.html":{},"guards/CanGuard.html":{},"controllers/CategoriesApiController.html":{},"injectables/CategoriesService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateUserDto.html":{},"guards/HasRolesGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LocalBaseEntity.html":{},"injectables/LocalStrategy.html":{},"controllers/PermissionsApiController.html":{},"injectables/PermissionsService.html":{},"classes/RoleDto.html":{},"controllers/RolesApiController.html":{},"injectables/RolesService.html":{},"classes/SessionDto.html":{},"injectables/SessionsService.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserDto.html":{},"controllers/UsersApiController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":782,"title":{},"body":{"injectables/RolesService.html":{},"injectables/SessionsService.html":{},"injectables/UsersService.html":{}}}],["out",{"_index":15,"title":{},"body":{"modules/ApiModule.html":{},"modules/ArticlesModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/PermissionsModule.html":{},"modules/RolesModule.html":{},"modules/SessionsModule.html":{},"modules/SuratModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["overview",{"_index":1230,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1096,"title":{"dependencies.html":{}},"body":{}}],["page",{"_index":1021,"title":{},"body":{"injectables/UsersService.html":{}}}],["param",{"_index":148,"title":{},"body":{"controllers/ArticlesApiController.html":{},"controllers/CategoriesApiController.html":{},"controllers/PermissionsApiController.html":{},"controllers/RolesApiController.html":{},"controllers/UsersApiController.html":{}}}],["param('uuid",{"_index":190,"title":{},"body":{"controllers/ArticlesApiController.html":{},"controllers/CategoriesApiController.html":{},"controllers/PermissionsApiController.html":{},"controllers/RolesApiController.html":{},"controllers/UsersApiController.html":{}}}],["parameters",{"_index":129,"title":{},"body":{"controllers/ArticlesApiController.html":{},"injectables/ArticlesService.html":{},"controllers/AuthApiController.html":{},"injectables/AuthService.html":{},"classes/BaseDto.html":{},"injectables/BasicStrategy.html":{},"guards/CanGuard.html":{},"controllers/CategoriesApiController.html":{},"injectables/CategoriesService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateUserDto.html":{},"guards/HasRolesGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LocalBaseEntity.html":{},"injectables/LocalStrategy.html":{},"controllers/PermissionsApiController.html":{},"injectables/PermissionsService.html":{},"classes/RoleDto.html":{},"controllers/RolesApiController.html":{},"injectables/RolesService.html":{},"classes/SessionDto.html":{},"injectables/SessionsService.html":{},"controllers/UsersApiController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["parent",{"_index":61,"title":{},"body":{"classes/ArticleEntity.html":{}}}],["parser",{"_index":1127,"title":{},"body":{"dependencies.html":{}}}],["partial",{"_index":498,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateUserDto.html":{}}}],["partialtype",{"_index":873,"title":{},"body":{"classes/UpdateArticleDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePermissionDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateSessionDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRequestDto.html":{}}}],["partialtype(createarticledto",{"_index":876,"title":{},"body":{"classes/UpdateArticleDto.html":{}}}],["partialtype(createcategorydto",{"_index":877,"title":{},"body":{"classes/UpdateCategoryDto.html":{}}}],["partialtype(createpermissiondto",{"_index":878,"title":{},"body":{"classes/UpdatePermissionDto.html":{}}}],["partialtype(createroledto",{"_index":882,"title":{},"body":{"classes/UpdateRoleDto.html":{}}}],["partialtype(createsessiondto",{"_index":887,"title":{},"body":{"classes/UpdateSessionDto.html":{}}}],["partialtype(createuserdto",{"_index":891,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["partialtype(createuserrequestdto",{"_index":899,"title":{},"body":{"classes/UpdateUserRequestDto.html":{}}}],["pass",{"_index":385,"title":{},"body":{"injectables/BasicStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/UsersService.html":{}}}],["passport",{"_index":389,"title":{},"body":{"injectables/BasicStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":319,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":391,"title":{},"body":{"injectables/BasicStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":395,"title":{},"body":{"injectables/BasicStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passreqtocallback",{"_index":614,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":539,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserRequestDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserDto.html":{},"classes/UserEntity.html":{},"injectables/UsersService.html":{}}}],["patch",{"_index":149,"title":{},"body":{"controllers/ArticlesApiController.html":{},"controllers/CategoriesApiController.html":{},"controllers/PermissionsApiController.html":{},"controllers/RolesApiController.html":{},"controllers/UsersApiController.html":{}}}],["patch(':uuid",{"_index":188,"title":{},"body":{"controllers/ArticlesApiController.html":{},"controllers/CategoriesApiController.html":{},"controllers/PermissionsApiController.html":{},"controllers/RolesApiController.html":{},"controllers/UsersApiController.html":{}}}],["path",{"_index":164,"title":{},"body":{"controllers/ArticlesApiController.html":{},"controllers/AuthApiController.html":{},"controllers/CategoriesApiController.html":{},"controllers/PermissionsApiController.html":{},"controllers/RolesApiController.html":{},"controllers/UsersApiController.html":{}}}],["pembuatan",{"_index":903,"title":{},"body":{"classes/UserDto.html":{}}}],["pemilik",{"_index":906,"title":{},"body":{"classes/UserDto.html":{}}}],["pengguna",{"_index":571,"title":{},"body":{"classes/CreateUserRequestDto.html":{},"classes/UserDto.html":{},"controllers/UsersApiController.html":{}}}],["pengguna'})@apiokresponse({type",{"_index":945,"title":{},"body":{"controllers/UsersApiController.html":{}}}],["permission",{"_index":694,"title":{},"body":{"controllers/PermissionsApiController.html":{},"injectables/PermissionsService.html":{},"classes/RoleDto.html":{},"classes/RoleEntity.html":{},"classes/UserEntity.html":{},"injectables/UsersService.html":{}}}],["permission.dto",{"_index":676,"title":{},"body":{"classes/PermissionEntity.html":{},"controllers/PermissionsApiController.html":{},"injectables/PermissionsService.html":{},"classes/UpdatePermissionDto.html":{}}}],["permission.dto.ts",{"_index":511,"title":{},"body":{"classes/CreatePermissionDto.html":{},"classes/UpdatePermissionDto.html":{},"coverage.html":{}}}],["permission.dto.ts:12",{"_index":513,"title":{},"body":{"classes/CreatePermissionDto.html":{}}}],["permission.roles",{"_index":749,"title":{},"body":{"classes/RoleEntity.html":{}}}],["permission.users",{"_index":937,"title":{},"body":{"classes/UserEntity.html":{}}}],["permissiondto",{"_index":659,"title":{"classes/PermissionDto.html":{}},"body":{"classes/PermissionDto.html":{},"classes/RoleDto.html":{},"classes/UpdateRoleDto.html":{},"coverage.html":{}}}],["permissiondto(permission",{"_index":740,"title":{},"body":{"classes/RoleDto.html":{}}}],["permissionentity",{"_index":519,"title":{"classes/PermissionEntity.html":{}},"body":{"classes/CreatePermissionDto.html":{},"classes/PermissionDto.html":{},"classes/PermissionEntity.html":{},"modules/PermissionsModule.html":{},"injectables/PermissionsService.html":{},"classes/RoleEntity.html":{},"injectables/RolesService.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserEntity.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["permissionentity(createpermissiondto",{"_index":722,"title":{},"body":{"injectables/PermissionsService.html":{}}}],["permissionrepository",{"_index":710,"title":{},"body":{"injectables/PermissionsService.html":{}}}],["permissions",{"_index":187,"title":{},"body":{"controllers/ArticlesApiController.html":{},"controllers/CategoriesApiController.html":{},"controllers/PermissionsApiController.html":{},"classes/RoleDto.html":{},"classes/RoleEntity.html":{},"controllers/RolesApiController.html":{},"injectables/RolesService.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserEntity.html":{},"controllers/UsersApiController.html":{},"injectables/UsersService.html":{}}}],["permissions.includes(e.name",{"_index":804,"title":{},"body":{"injectables/RolesService.html":{},"injectables/UsersService.html":{}}}],["permissions.service",{"_index":703,"title":{},"body":{"modules/PermissionsModule.html":{}}}],["permissions/entities/permission.entity",{"_index":790,"title":{},"body":{"injectables/RolesService.html":{},"injectables/UsersService.html":{}}}],["permissions/permissions.module",{"_index":328,"title":{},"body":{"modules/AuthModule.html":{}}}],["permissionsapicontroller",{"_index":24,"title":{"controllers/PermissionsApiController.html":{}},"body":{"modules/ApiModule.html":{},"controllers/PermissionsApiController.html":{},"coverage.html":{}}}],["permissionsmodule",{"_index":10,"title":{"modules/PermissionsModule.html":{}},"body":{"modules/ApiModule.html":{},"modules/AuthModule.html":{},"modules/PermissionsModule.html":{},"modules.html":{},"overview.html":{}}}],["permissionsservice",{"_index":691,"title":{"injectables/PermissionsService.html":{}},"body":{"controllers/PermissionsApiController.html":{},"modules/PermissionsModule.html":{},"injectables/PermissionsService.html":{},"coverage.html":{},"overview.html":{}}}],["php7",{"_index":1254,"title":{},"body":{"miscellaneous/variables.html":{}}}],["please",{"_index":1210,"title":{},"body":{"index.html":{}}}],["post",{"_index":150,"title":{},"body":{"controllers/ArticlesApiController.html":{},"controllers/AuthApiController.html":{},"controllers/CategoriesApiController.html":{},"controllers/PermissionsApiController.html":{},"controllers/RolesApiController.html":{},"controllers/UsersApiController.html":{}}}],["prefix",{"_index":581,"title":{},"body":{"controllers/HaloController.html":{}}}],["primarygeneratedcolumn",{"_index":107,"title":{},"body":{"classes/ArticleEntity.html":{},"classes/CategoryEntity.html":{},"classes/PermissionEntity.html":{},"classes/RoleEntity.html":{},"classes/SessionEntity.html":{},"classes/UserEntity.html":{}}}],["primarygeneratedcolumn('uuid",{"_index":99,"title":{},"body":{"classes/ArticleEntity.html":{},"classes/CategoryEntity.html":{},"classes/PermissionEntity.html":{},"classes/RoleEntity.html":{},"classes/SessionEntity.html":{},"classes/UserEntity.html":{}}}],["private",{"_index":356,"title":{},"body":{"injectables/AuthService.html":{},"guards/CanGuard.html":{},"controllers/CategoriesApiController.html":{},"injectables/CategoriesService.html":{},"injectables/JwtStrategy.html":{},"controllers/PermissionsApiController.html":{},"injectables/PermissionsService.html":{},"controllers/RolesApiController.html":{},"injectables/RolesService.html":{},"injectables/SessionsService.html":{},"injectables/UsersService.html":{}}}],["production",{"_index":1190,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":1169,"title":{},"body":{"index.html":{}}}],["project",{"_index":1201,"title":{},"body":{"index.html":{}}}],["promise",{"_index":387,"title":{},"body":{"injectables/BasicStrategy.html":{},"guards/CanGuard.html":{},"injectables/CategoriesService.html":{},"injectables/LocalStrategy.html":{},"injectables/PermissionsService.html":{},"injectables/RolesService.html":{},"injectables/SessionsService.html":{},"injectables/UsersService.html":{}}}],["properties",{"_index":56,"title":{},"body":{"classes/ArticleEntity.html":{},"controllers/AuthApiController.html":{},"classes/CategoryEntity.html":{},"classes/CreateCategoryDto.html":{},"classes/CreatePermissionDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateSessionDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserRequestDto.html":{},"classes/PermissionDto.html":{},"classes/PermissionEntity.html":{},"classes/RoleDto.html":{},"classes/RoleEntity.html":{},"classes/SessionDto.html":{},"classes/SessionEntity.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateSessionDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRequestDto.html":{},"classes/UserDto.html":{},"classes/UserEntity.html":{}}}],["property",{"_index":626,"title":{},"body":{"injectables/JwtStrategy.html":{},"miscellaneous/functions.html":{}}}],["providers",{"_index":204,"title":{},"body":{"modules/ArticlesModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/PermissionsModule.html":{},"modules/RolesModule.html":{},"modules/SessionsModule.html":{},"modules/SuratModule.html":{},"modules/UsersModule.html":{}}}],["publishedat",{"_index":62,"title":{},"body":{"classes/ArticleEntity.html":{}}}],["publishedby",{"_index":63,"title":{},"body":{"classes/ArticleEntity.html":{}}}],["qb.orwhere('rolepermission.name",{"_index":1049,"title":{},"body":{"injectables/UsersService.html":{}}}],["qb.where('permission.name",{"_index":1048,"title":{},"body":{"injectables/UsersService.html":{}}}],["random",{"_index":279,"title":{},"body":{"controllers/AuthApiController.html":{}}}],["random.alphanumeric(256",{"_index":296,"title":{},"body":{"controllers/AuthApiController.html":{}}}],["read",{"_index":1211,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":167,"title":{},"body":{"controllers/ArticlesApiController.html":{},"injectables/AuthService.html":{},"injectables/BasicStrategy.html":{},"guards/CanGuard.html":{},"controllers/CategoriesApiController.html":{},"injectables/CategoriesService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreatePermissionDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserRequestDto.html":{},"guards/HasRolesGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/PermissionDto.html":{},"controllers/PermissionsApiController.html":{},"injectables/PermissionsService.html":{},"classes/RoleDto.html":{},"controllers/RolesApiController.html":{},"injectables/RolesService.html":{},"classes/SessionDto.html":{},"classes/UpdateSessionDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRequestDto.html":{},"classes/UserDto.html":{},"controllers/UsersApiController.html":{},"injectables/UsersService.html":{}}}],["reflect",{"_index":1142,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":405,"title":{},"body":{"guards/CanGuard.html":{},"guards/HasRolesGuard.html":{}}}],["relations",{"_index":800,"title":{},"body":{"injectables/RolesService.html":{},"injectables/SessionsService.html":{},"injectables/UsersService.html":{}}}],["remove",{"_index":212,"title":{},"body":{"injectables/ArticlesService.html":{},"injectables/CategoriesService.html":{},"injectables/PermissionsService.html":{},"injectables/RolesService.html":{},"injectables/SessionsService.html":{},"injectables/UsersService.html":{}}}],["remove(await",{"_index":864,"title":{},"body":{"injectables/SessionsService.html":{}}}],["remove(uuid",{"_index":219,"title":{},"body":{"injectables/ArticlesService.html":{},"injectables/CategoriesService.html":{},"injectables/PermissionsService.html":{},"injectables/RolesService.html":{},"injectables/SessionsService.html":{},"injectables/UsersService.html":{}}}],["removebyname",{"_index":707,"title":{},"body":{"injectables/PermissionsService.html":{},"injectables/RolesService.html":{}}}],["removebyname(name",{"_index":718,"title":{},"body":{"injectables/PermissionsService.html":{},"injectables/RolesService.html":{}}}],["removes",{"_index":232,"title":{},"body":{"injectables/ArticlesService.html":{}}}],["render",{"_index":587,"title":{},"body":{"controllers/HaloController.html":{}}}],["render('index",{"_index":589,"title":{},"body":{"controllers/HaloController.html":{}}}],["repository",{"_index":453,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/PermissionsService.html":{},"injectables/RolesService.html":{},"injectables/SessionsService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["request",{"_index":271,"title":{},"body":{"controllers/AuthApiController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["request.activesession",{"_index":1247,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request.activesession[data",{"_index":1248,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request.dto",{"_index":898,"title":{},"body":{"classes/UpdateUserRequestDto.html":{}}}],["request.dto.ts",{"_index":561,"title":{},"body":{"classes/CreateUserRequestDto.html":{},"classes/UpdateUserRequestDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["request.dto.ts:13",{"_index":567,"title":{},"body":{"classes/CreateUserRequestDto.html":{}}}],["request.dto.ts:17",{"_index":897,"title":{},"body":{"classes/UpdateUserRequestDto.html":{}}}],["request.dto.ts:20",{"_index":564,"title":{},"body":{"classes/CreateUserRequestDto.html":{}}}],["request.dto.ts:29",{"_index":575,"title":{},"body":{"classes/CreateUserRequestDto.html":{}}}],["request.dto.ts:35",{"_index":570,"title":{},"body":{"classes/CreateUserRequestDto.html":{}}}],["request.ip",{"_index":624,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["request.user",{"_index":1258,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request.user[data",{"_index":1259,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requiredability",{"_index":412,"title":{},"body":{"guards/CanGuard.html":{}}}],["requiredroles",{"_index":596,"title":{},"body":{"guards/HasRolesGuard.html":{}}}],["requiredroles.some((role",{"_index":598,"title":{},"body":{"guards/HasRolesGuard.html":{}}}],["reset",{"_index":14,"title":{},"body":{"modules/ApiModule.html":{},"modules/ArticlesModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/PermissionsModule.html":{},"modules/RolesModule.html":{},"modules/SessionsModule.html":{},"modules/SuratModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["respon",{"_index":243,"title":{},"body":{"controllers/AuthApiController.html":{}}}],["result",{"_index":47,"title":{},"body":{"modules/ApiModule.html":{},"classes/ArticleEntity.html":{},"controllers/ArticlesApiController.html":{},"modules/ArticlesModule.html":{},"injectables/ArticlesService.html":{},"controllers/AuthApiController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseController.html":{},"classes/BaseDto.html":{},"injectables/BasicAuthGuard.html":{},"injectables/BasicStrategy.html":{},"guards/CanGuard.html":{},"controllers/CategoriesApiController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"classes/CategoryEntity.html":{},"classes/CreateArticleDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreatePermissionDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateSessionDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserRequestDto.html":{},"controllers/HaloController.html":{},"guards/HasRolesGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"classes/LocalBaseEntity.html":{},"injectables/LocalStrategy.html":{},"classes/PermissionDto.html":{},"classes/PermissionEntity.html":{},"controllers/PermissionsApiController.html":{},"modules/PermissionsModule.html":{},"injectables/PermissionsService.html":{},"classes/RoleDto.html":{},"classes/RoleEntity.html":{},"controllers/RolesApiController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/SessionDto.html":{},"classes/SessionEntity.html":{},"modules/SessionsModule.html":{},"injectables/SessionsService.html":{},"modules/SuratModule.html":{},"injectables/SuratService.html":{},"classes/UpdateArticleDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePermissionDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateSessionDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRequestDto.html":{},"classes/UserDto.html":{},"classes/UserEntity.html":{},"controllers/UsersApiController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"modules/WebModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":49,"title":{},"body":{"modules/ApiModule.html":{},"classes/ArticleEntity.html":{},"controllers/ArticlesApiController.html":{},"modules/ArticlesModule.html":{},"injectables/ArticlesService.html":{},"controllers/AuthApiController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseController.html":{},"classes/BaseDto.html":{},"injectables/BasicAuthGuard.html":{},"injectables/BasicStrategy.html":{},"guards/CanGuard.html":{},"controllers/CategoriesApiController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"classes/CategoryEntity.html":{},"classes/CreateArticleDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreatePermissionDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateSessionDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserRequestDto.html":{},"controllers/HaloController.html":{},"guards/HasRolesGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"classes/LocalBaseEntity.html":{},"injectables/LocalStrategy.html":{},"classes/PermissionDto.html":{},"classes/PermissionEntity.html":{},"controllers/PermissionsApiController.html":{},"modules/PermissionsModule.html":{},"injectables/PermissionsService.html":{},"classes/RoleDto.html":{},"classes/RoleEntity.html":{},"controllers/RolesApiController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/SessionDto.html":{},"classes/SessionEntity.html":{},"modules/SessionsModule.html":{},"injectables/SessionsService.html":{},"modules/SuratModule.html":{},"injectables/SuratService.html":{},"classes/UpdateArticleDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePermissionDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateSessionDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRequestDto.html":{},"classes/UserDto.html":{},"classes/UserEntity.html":{},"controllers/UsersApiController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"modules/WebModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":173,"title":{},"body":{"controllers/ArticlesApiController.html":{},"injectables/ArticlesService.html":{},"controllers/AuthApiController.html":{},"injectables/AuthService.html":{},"injectables/BasicStrategy.html":{},"guards/CanGuard.html":{},"controllers/CategoriesApiController.html":{},"injectables/CategoriesService.html":{},"controllers/HaloController.html":{},"guards/HasRolesGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LocalBaseEntity.html":{},"injectables/LocalStrategy.html":{},"controllers/PermissionsApiController.html":{},"injectables/PermissionsService.html":{},"controllers/RolesApiController.html":{},"injectables/RolesService.html":{},"injectables/SessionsService.html":{},"classes/UserDto.html":{},"classes/UserEntity.html":{},"controllers/UsersApiController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":132,"title":{},"body":{"controllers/ArticlesApiController.html":{},"injectables/ArticlesService.html":{},"controllers/AuthApiController.html":{},"injectables/AuthService.html":{},"injectables/BasicStrategy.html":{},"guards/CanGuard.html":{},"controllers/CategoriesApiController.html":{},"injectables/CategoriesService.html":{},"controllers/HaloController.html":{},"guards/HasRolesGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/PermissionsApiController.html":{},"injectables/PermissionsService.html":{},"controllers/RolesApiController.html":{},"injectables/RolesService.html":{},"injectables/SessionsService.html":{},"controllers/UsersApiController.html":{},"injectables/UsersService.html":{}}}],["rimraf",{"_index":1145,"title":{},"body":{"dependencies.html":{}}}],["role",{"_index":680,"title":{},"body":{"classes/PermissionEntity.html":{},"controllers/RolesApiController.html":{},"injectables/RolesService.html":{},"classes/UserEntity.html":{},"injectables/UsersService.html":{}}}],["role.dto",{"_index":746,"title":{},"body":{"classes/RoleEntity.html":{},"controllers/RolesApiController.html":{},"injectables/RolesService.html":{},"classes/UpdateRoleDto.html":{}}}],["role.dto.ts",{"_index":525,"title":{},"body":{"classes/CreateRoleDto.html":{},"classes/UpdateRoleDto.html":{},"coverage.html":{}}}],["role.dto.ts:12",{"_index":527,"title":{},"body":{"classes/CreateRoleDto.html":{}}}],["role.dto.ts:9",{"_index":880,"title":{},"body":{"classes/UpdateRoleDto.html":{}}}],["role.name).includes(role",{"_index":600,"title":{},"body":{"guards/HasRolesGuard.html":{}}}],["role.permissions",{"_index":681,"title":{},"body":{"classes/PermissionEntity.html":{},"injectables/RolesService.html":{}}}],["role.permissions.filter((e",{"_index":803,"title":{},"body":{"injectables/RolesService.html":{}}}],["role.users",{"_index":938,"title":{},"body":{"classes/UserEntity.html":{}}}],["roledto",{"_index":730,"title":{"classes/RoleDto.html":{}},"body":{"classes/RoleDto.html":{},"coverage.html":{}}}],["roleentity",{"_index":528,"title":{"classes/RoleEntity.html":{}},"body":{"classes/CreateRoleDto.html":{},"classes/PermissionEntity.html":{},"classes/RoleDto.html":{},"classes/RoleEntity.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateUserDto.html":{},"classes/UserEntity.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["roleentity(createroledto",{"_index":793,"title":{},"body":{"injectables/RolesService.html":{}}}],["rolepermission",{"_index":1044,"title":{},"body":{"injectables/UsersService.html":{}}}],["rolerepository",{"_index":774,"title":{},"body":{"injectables/RolesService.html":{}}}],["roles",{"_index":670,"title":{},"body":{"classes/PermissionEntity.html":{},"controllers/RolesApiController.html":{},"classes/UpdateUserDto.html":{},"classes/UserEntity.html":{},"injectables/UsersService.html":{}}}],["roles.decorator.ts",{"_index":1081,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["roles.guard.ts",{"_index":592,"title":{},"body":{"guards/HasRolesGuard.html":{},"coverage.html":{}}}],["roles.guard.ts:6",{"_index":593,"title":{},"body":{"guards/HasRolesGuard.html":{}}}],["roles.guard.ts:9",{"_index":594,"title":{},"body":{"guards/HasRolesGuard.html":{}}}],["roles.includes(e.name",{"_index":1037,"title":{},"body":{"injectables/UsersService.html":{}}}],["roles.service",{"_index":767,"title":{},"body":{"modules/RolesModule.html":{}}}],["roles/entities/role.entity",{"_index":1015,"title":{},"body":{"injectables/UsersService.html":{}}}],["roles/roles.module",{"_index":329,"title":{},"body":{"modules/AuthModule.html":{}}}],["rolesapicontroller",{"_index":25,"title":{"controllers/RolesApiController.html":{}},"body":{"modules/ApiModule.html":{},"controllers/RolesApiController.html":{},"coverage.html":{}}}],["rolesmodule",{"_index":11,"title":{"modules/RolesModule.html":{}},"body":{"modules/ApiModule.html":{},"modules/AuthModule.html":{},"modules/RolesModule.html":{},"modules.html":{},"overview.html":{}}}],["rolesservice",{"_index":757,"title":{"injectables/RolesService.html":{}},"body":{"controllers/RolesApiController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"coverage.html":{},"overview.html":{}}}],["run",{"_index":1185,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":1147,"title":{},"body":{"dependencies.html":{}}}],["saat",{"_index":254,"title":{},"body":{"controllers/AuthApiController.html":{},"classes/CreateUserRequestDto.html":{},"classes/UpdateUserRequestDto.html":{}}}],["saja",{"_index":942,"title":{},"body":{"controllers/UsersApiController.html":{}}}],["sandi",{"_index":895,"title":{},"body":{"classes/UpdateUserRequestDto.html":{}}}],["save(session",{"_index":862,"title":{},"body":{"injectables/SessionsService.html":{}}}],["scalable",{"_index":1174,"title":{},"body":{"index.html":{}}}],["schema",{"_index":247,"title":{},"body":{"controllers/AuthApiController.html":{}}}],["secret",{"_index":332,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["secretorkey",{"_index":613,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["seen",{"_index":836,"title":{},"body":{"injectables/SessionsService.html":{}}}],["seen(uuid",{"_index":847,"title":{},"body":{"injectables/SessionsService.html":{}}}],["server",{"_index":244,"title":{},"body":{"controllers/AuthApiController.html":{},"index.html":{}}}],["sesei",{"_index":258,"title":{},"body":{"controllers/AuthApiController.html":{}}}],["sesi",{"_index":241,"title":{},"body":{"controllers/AuthApiController.html":{},"injectables/JwtStrategy.html":{}}}],["session",{"_index":348,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/SessionsService.html":{},"classes/UserEntity.html":{},"dependencies.html":{}}}],["session.decorator",{"_index":286,"title":{},"body":{"controllers/AuthApiController.html":{}}}],["session.decorator.ts",{"_index":1083,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["session.dto",{"_index":825,"title":{},"body":{"classes/SessionEntity.html":{},"injectables/SessionsService.html":{},"classes/UpdateSessionDto.html":{}}}],["session.dto.ts",{"_index":533,"title":{},"body":{"classes/CreateSessionDto.html":{},"classes/UpdateSessionDto.html":{},"coverage.html":{}}}],["session.dto.ts:10",{"_index":885,"title":{},"body":{"classes/UpdateSessionDto.html":{}}}],["session.dto.ts:4",{"_index":536,"title":{},"body":{"classes/CreateSessionDto.html":{}}}],["session.dto.ts:5",{"_index":534,"title":{},"body":{"classes/CreateSessionDto.html":{}}}],["session.dto.ts:6",{"_index":535,"title":{},"body":{"classes/CreateSessionDto.html":{}}}],["session.ip",{"_index":623,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["session.user",{"_index":858,"title":{},"body":{"injectables/SessionsService.html":{},"classes/UserEntity.html":{}}}],["session.uuid",{"_index":366,"title":{},"body":{"injectables/AuthService.html":{}}}],["sessiondto",{"_index":256,"title":{"classes/SessionDto.html":{}},"body":{"controllers/AuthApiController.html":{},"classes/SessionDto.html":{},"injectables/SessionsService.html":{},"coverage.html":{}}}],["sessiondto(session",{"_index":855,"title":{},"body":{"injectables/SessionsService.html":{}}}],["sessionentity",{"_index":251,"title":{"classes/SessionEntity.html":{}},"body":{"controllers/AuthApiController.html":{},"injectables/AuthService.html":{},"classes/SessionDto.html":{},"classes/SessionEntity.html":{},"modules/SessionsModule.html":{},"injectables/SessionsService.html":{},"classes/UserEntity.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["sessionentity(createsessiondto",{"_index":854,"title":{},"body":{"injectables/SessionsService.html":{}}}],["sessionrepository",{"_index":839,"title":{},"body":{"injectables/SessionsService.html":{}}}],["sessions",{"_index":856,"title":{},"body":{"injectables/SessionsService.html":{},"classes/UserEntity.html":{}}}],["sessions.service",{"_index":832,"title":{},"body":{"modules/SessionsModule.html":{}}}],["sessions/entities/session.entity",{"_index":353,"title":{},"body":{"injectables/AuthService.html":{}}}],["sessions/sessions.module",{"_index":327,"title":{},"body":{"modules/AuthModule.html":{}}}],["sessions/sessions.service",{"_index":350,"title":{},"body":{"injectables/AuthService.html":{}}}],["sessionservice",{"_index":340,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["sessionsmodule",{"_index":312,"title":{"modules/SessionsModule.html":{}},"body":{"modules/AuthModule.html":{},"modules/SessionsModule.html":{},"modules.html":{},"overview.html":{}}}],["sessionsservice",{"_index":341,"title":{"injectables/SessionsService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"modules/SessionsModule.html":{},"injectables/SessionsService.html":{},"coverage.html":{},"overview.html":{}}}],["sessionuuid",{"_index":615,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["setmetadata('ability",{"_index":1250,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setmetadata('roles",{"_index":1251,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setparameters",{"_index":1050,"title":{},"body":{"injectables/UsersService.html":{}}}],["side",{"_index":1175,"title":{},"body":{"index.html":{}}}],["signoptions",{"_index":334,"title":{},"body":{"modules/AuthModule.html":{}}}],["skip",{"_index":1023,"title":{},"body":{"injectables/UsersService.html":{}}}],["slug",{"_index":64,"title":{},"body":{"classes/ArticleEntity.html":{},"controllers/CategoriesApiController.html":{},"injectables/CategoriesService.html":{},"classes/CategoryEntity.html":{},"classes/CreateCategoryDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["slug(categoryentity",{"_index":508,"title":{},"body":{"classes/CreateCategoryDto.html":{}}}],["slug(target",{"_index":1166,"title":{},"body":{"miscellaneous/functions.html":{}}}],["slugify",{"_index":468,"title":{},"body":{"injectables/CategoriesService.html":{},"dependencies.html":{}}}],["slugify(createcategorydto.slug",{"_index":470,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["socket.io",{"_index":1107,"title":{},"body":{"dependencies.html":{}}}],["source",{"_index":17,"title":{},"body":{"modules/ApiModule.html":{},"classes/ArticleEntity.html":{},"controllers/ArticlesApiController.html":{},"modules/ArticlesModule.html":{},"injectables/ArticlesService.html":{},"controllers/AuthApiController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseController.html":{},"classes/BaseDto.html":{},"injectables/BasicAuthGuard.html":{},"injectables/BasicStrategy.html":{},"guards/CanGuard.html":{},"controllers/CategoriesApiController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"classes/CategoryEntity.html":{},"classes/CreateArticleDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreatePermissionDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateSessionDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserRequestDto.html":{},"controllers/HaloController.html":{},"guards/HasRolesGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"classes/LocalBaseEntity.html":{},"injectables/LocalStrategy.html":{},"classes/PermissionDto.html":{},"classes/PermissionEntity.html":{},"controllers/PermissionsApiController.html":{},"modules/PermissionsModule.html":{},"injectables/PermissionsService.html":{},"classes/RoleDto.html":{},"classes/RoleEntity.html":{},"controllers/RolesApiController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/SessionDto.html":{},"classes/SessionEntity.html":{},"modules/SessionsModule.html":{},"injectables/SessionsService.html":{},"modules/SuratModule.html":{},"injectables/SuratService.html":{},"classes/UpdateArticleDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePermissionDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateSessionDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRequestDto.html":{},"classes/UserDto.html":{},"classes/UserEntity.html":{},"controllers/UsersApiController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"modules/WebModule.html":{},"index.html":{}}}],["sponsors",{"_index":1204,"title":{},"body":{"index.html":{}}}],["sqlite3",{"_index":1150,"title":{},"body":{"dependencies.html":{}}}],["src/.../active",{"_index":1237,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../can.decorator.ts",{"_index":1238,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../constants.ts",{"_index":1241,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../create",{"_index":1239,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../has",{"_index":1240,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../is",{"_index":1159,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../main.ts",{"_index":1158,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../slug.decorator.ts",{"_index":1160,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../user.decorator.ts",{"_index":1242,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/article/articles/articles.module",{"_index":32,"title":{},"body":{"modules/ApiModule.html":{}}}],["src/article/articles/articles.module.ts",{"_index":203,"title":{},"body":{"modules/ArticlesModule.html":{}}}],["src/article/articles/articles.service.ts",{"_index":209,"title":{},"body":{"injectables/ArticlesService.html":{},"coverage.html":{}}}],["src/article/articles/articles.service.ts:11",{"_index":216,"title":{},"body":{"injectables/ArticlesService.html":{}}}],["src/article/articles/articles.service.ts:15",{"_index":218,"title":{},"body":{"injectables/ArticlesService.html":{}}}],["src/article/articles/articles.service.ts:19",{"_index":223,"title":{},"body":{"injectables/ArticlesService.html":{}}}],["src/article/articles/articles.service.ts:23",{"_index":220,"title":{},"body":{"injectables/ArticlesService.html":{}}}],["src/article/articles/articles.service.ts:7",{"_index":215,"title":{},"body":{"injectables/ArticlesService.html":{}}}],["src/article/articles/dto/create",{"_index":495,"title":{},"body":{"classes/CreateArticleDto.html":{},"coverage.html":{}}}],["src/article/articles/dto/update",{"_index":872,"title":{},"body":{"classes/UpdateArticleDto.html":{},"coverage.html":{}}}],["src/article/articles/entities/article.entity",{"_index":490,"title":{},"body":{"classes/CategoryEntity.html":{},"classes/UserEntity.html":{}}}],["src/article/articles/entities/article.entity.ts",{"_index":52,"title":{},"body":{"classes/ArticleEntity.html":{},"coverage.html":{}}}],["src/article/articles/entities/article.entity.ts:18",{"_index":100,"title":{},"body":{"classes/ArticleEntity.html":{}}}],["src/article/articles/entities/article.entity.ts:21",{"_index":96,"title":{},"body":{"classes/ArticleEntity.html":{}}}],["src/article/articles/entities/article.entity.ts:24",{"_index":95,"title":{},"body":{"classes/ArticleEntity.html":{}}}],["src/article/articles/entities/article.entity.ts:27",{"_index":75,"title":{},"body":{"classes/ArticleEntity.html":{}}}],["src/article/articles/entities/article.entity.ts:30",{"_index":83,"title":{},"body":{"classes/ArticleEntity.html":{}}}],["src/article/articles/entities/article.entity.ts:33",{"_index":97,"title":{},"body":{"classes/ArticleEntity.html":{}}}],["src/article/articles/entities/article.entity.ts:36",{"_index":90,"title":{},"body":{"classes/ArticleEntity.html":{}}}],["src/article/articles/entities/article.entity.ts:40",{"_index":79,"title":{},"body":{"classes/ArticleEntity.html":{}}}],["src/article/articles/entities/article.entity.ts:43",{"_index":85,"title":{},"body":{"classes/ArticleEntity.html":{}}}],["src/article/articles/entities/article.entity.ts:46",{"_index":87,"title":{},"body":{"classes/ArticleEntity.html":{}}}],["src/article/articles/entities/article.entity.ts:49",{"_index":98,"title":{},"body":{"classes/ArticleEntity.html":{}}}],["src/article/articles/entities/article.entity.ts:52",{"_index":93,"title":{},"body":{"classes/ArticleEntity.html":{}}}],["src/article/categories/categories.module",{"_index":33,"title":{},"body":{"modules/ApiModule.html":{}}}],["src/article/categories/categories.module.ts",{"_index":446,"title":{},"body":{"modules/CategoriesModule.html":{}}}],["src/article/categories/categories.service",{"_index":431,"title":{},"body":{"controllers/CategoriesApiController.html":{}}}],["src/article/categories/categories.service.ts",{"_index":450,"title":{},"body":{"injectables/CategoriesService.html":{},"coverage.html":{}}}],["src/article/categories/categories.service.ts:12",{"_index":454,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/article/categories/categories.service.ts:18",{"_index":457,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/article/categories/categories.service.ts:31",{"_index":458,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/article/categories/categories.service.ts:35",{"_index":461,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/article/categories/categories.service.ts:39",{"_index":460,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/article/categories/categories.service.ts:43",{"_index":464,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/article/categories/categories.service.ts:54",{"_index":462,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/article/categories/dto/create",{"_index":432,"title":{},"body":{"controllers/CategoriesApiController.html":{},"classes/CreateCategoryDto.html":{},"coverage.html":{}}}],["src/article/categories/dto/update",{"_index":434,"title":{},"body":{"controllers/CategoriesApiController.html":{},"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["src/article/categories/entities/category.entity",{"_index":101,"title":{},"body":{"classes/ArticleEntity.html":{}}}],["src/article/categories/entities/category.entity.ts",{"_index":483,"title":{},"body":{"classes/CategoryEntity.html":{},"coverage.html":{}}}],["src/article/categories/entities/category.entity.ts:12",{"_index":486,"title":{},"body":{"classes/CategoryEntity.html":{}}}],["src/article/categories/entities/category.entity.ts:15",{"_index":488,"title":{},"body":{"classes/CategoryEntity.html":{}}}],["src/article/categories/entities/category.entity.ts:18",{"_index":485,"title":{},"body":{"classes/CategoryEntity.html":{}}}],["src/article/categories/entities/category.entity.ts:21",{"_index":484,"title":{},"body":{"classes/CategoryEntity.html":{}}}],["src/article/categories/entities/category.entity.ts:9",{"_index":489,"title":{},"body":{"classes/CategoryEntity.html":{}}}],["src/auth/auth.module",{"_index":34,"title":{},"body":{"modules/ApiModule.html":{}}}],["src/auth/auth.module.ts",{"_index":316,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service",{"_index":282,"title":{},"body":{"controllers/AuthApiController.html":{}}}],["src/auth/auth.service.ts",{"_index":337,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:10",{"_index":343,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:18",{"_index":345,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:33",{"_index":347,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/constants",{"_index":608,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/constants.ts",{"_index":1070,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/permissions/dto/create",{"_index":510,"title":{},"body":{"classes/CreatePermissionDto.html":{},"controllers/PermissionsApiController.html":{},"coverage.html":{}}}],["src/auth/permissions/dto/permission.dto",{"_index":736,"title":{},"body":{"classes/RoleDto.html":{},"classes/UpdateRoleDto.html":{}}}],["src/auth/permissions/dto/permission.dto.ts",{"_index":660,"title":{},"body":{"classes/PermissionDto.html":{},"coverage.html":{}}}],["src/auth/permissions/dto/permission.dto.ts:11",{"_index":663,"title":{},"body":{"classes/PermissionDto.html":{}}}],["src/auth/permissions/dto/permission.dto.ts:8",{"_index":664,"title":{},"body":{"classes/PermissionDto.html":{}}}],["src/auth/permissions/dto/update",{"_index":690,"title":{},"body":{"controllers/PermissionsApiController.html":{},"classes/UpdatePermissionDto.html":{},"coverage.html":{}}}],["src/auth/permissions/entities/permission.entity",{"_index":666,"title":{},"body":{"classes/PermissionDto.html":{},"classes/RoleEntity.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserEntity.html":{}}}],["src/auth/permissions/entities/permission.entity.ts",{"_index":669,"title":{},"body":{"classes/PermissionEntity.html":{},"coverage.html":{}}}],["src/auth/permissions/entities/permission.entity.ts:10",{"_index":675,"title":{},"body":{"classes/PermissionEntity.html":{}}}],["src/auth/permissions/entities/permission.entity.ts:13",{"_index":672,"title":{},"body":{"classes/PermissionEntity.html":{}}}],["src/auth/permissions/entities/permission.entity.ts:16",{"_index":674,"title":{},"body":{"classes/PermissionEntity.html":{}}}],["src/auth/permissions/entities/permission.entity.ts:19",{"_index":673,"title":{},"body":{"classes/PermissionEntity.html":{}}}],["src/auth/permissions/permissions.module",{"_index":35,"title":{},"body":{"modules/ApiModule.html":{}}}],["src/auth/permissions/permissions.module.ts",{"_index":702,"title":{},"body":{"modules/PermissionsModule.html":{}}}],["src/auth/permissions/permissions.service",{"_index":692,"title":{},"body":{"controllers/PermissionsApiController.html":{}}}],["src/auth/permissions/permissions.service.ts",{"_index":705,"title":{},"body":{"injectables/PermissionsService.html":{},"coverage.html":{}}}],["src/auth/permissions/permissions.service.ts:15",{"_index":712,"title":{},"body":{"injectables/PermissionsService.html":{}}}],["src/auth/permissions/permissions.service.ts:21",{"_index":713,"title":{},"body":{"injectables/PermissionsService.html":{}}}],["src/auth/permissions/permissions.service.ts:25",{"_index":716,"title":{},"body":{"injectables/PermissionsService.html":{}}}],["src/auth/permissions/permissions.service.ts:29",{"_index":715,"title":{},"body":{"injectables/PermissionsService.html":{}}}],["src/auth/permissions/permissions.service.ts:33",{"_index":720,"title":{},"body":{"injectables/PermissionsService.html":{}}}],["src/auth/permissions/permissions.service.ts:41",{"_index":717,"title":{},"body":{"injectables/PermissionsService.html":{}}}],["src/auth/permissions/permissions.service.ts:45",{"_index":719,"title":{},"body":{"injectables/PermissionsService.html":{}}}],["src/auth/permissions/permissions.service.ts:9",{"_index":709,"title":{},"body":{"injectables/PermissionsService.html":{}}}],["src/auth/roles/dto/create",{"_index":524,"title":{},"body":{"classes/CreateRoleDto.html":{},"controllers/RolesApiController.html":{},"coverage.html":{}}}],["src/auth/roles/dto/role.dto.ts",{"_index":731,"title":{},"body":{"classes/RoleDto.html":{},"coverage.html":{}}}],["src/auth/roles/dto/role.dto.ts:20",{"_index":735,"title":{},"body":{"classes/RoleDto.html":{}}}],["src/auth/roles/dto/role.dto.ts:23",{"_index":734,"title":{},"body":{"classes/RoleDto.html":{}}}],["src/auth/roles/dto/role.dto.ts:7",{"_index":732,"title":{},"body":{"classes/RoleDto.html":{}}}],["src/auth/roles/dto/update",{"_index":756,"title":{},"body":{"controllers/RolesApiController.html":{},"classes/UpdateRoleDto.html":{},"coverage.html":{}}}],["src/auth/roles/entities/role.entity",{"_index":677,"title":{},"body":{"classes/PermissionEntity.html":{},"classes/UpdateUserDto.html":{},"classes/UserEntity.html":{}}}],["src/auth/roles/entities/role.entity.ts",{"_index":741,"title":{},"body":{"classes/RoleEntity.html":{},"coverage.html":{}}}],["src/auth/roles/entities/role.entity.ts:16",{"_index":745,"title":{},"body":{"classes/RoleEntity.html":{}}}],["src/auth/roles/entities/role.entity.ts:19",{"_index":742,"title":{},"body":{"classes/RoleEntity.html":{}}}],["src/auth/roles/entities/role.entity.ts:22",{"_index":744,"title":{},"body":{"classes/RoleEntity.html":{}}}],["src/auth/roles/entities/role.entity.ts:26",{"_index":743,"title":{},"body":{"classes/RoleEntity.html":{}}}],["src/auth/roles/roles.module",{"_index":36,"title":{},"body":{"modules/ApiModule.html":{}}}],["src/auth/roles/roles.module.ts",{"_index":766,"title":{},"body":{"modules/RolesModule.html":{}}}],["src/auth/roles/roles.service",{"_index":758,"title":{},"body":{"controllers/RolesApiController.html":{}}}],["src/auth/roles/roles.service.ts",{"_index":769,"title":{},"body":{"injectables/RolesService.html":{},"coverage.html":{}}}],["src/auth/roles/roles.service.ts:10",{"_index":773,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/auth/roles/roles.service.ts:16",{"_index":778,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/auth/roles/roles.service.ts:20",{"_index":781,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/auth/roles/roles.service.ts:24",{"_index":785,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/auth/roles/roles.service.ts:28",{"_index":784,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/auth/roles/roles.service.ts:32",{"_index":789,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/auth/roles/roles.service.ts:43",{"_index":786,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/auth/roles/roles.service.ts:47",{"_index":787,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/auth/roles/roles.service.ts:51",{"_index":776,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/auth/roles/roles.service.ts:59",{"_index":780,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/auth/sessions/dto/create",{"_index":532,"title":{},"body":{"classes/CreateSessionDto.html":{},"coverage.html":{}}}],["src/auth/sessions/dto/session.dto",{"_index":287,"title":{},"body":{"controllers/AuthApiController.html":{}}}],["src/auth/sessions/dto/session.dto.ts",{"_index":806,"title":{},"body":{"classes/SessionDto.html":{},"coverage.html":{}}}],["src/auth/sessions/dto/session.dto.ts:14",{"_index":810,"title":{},"body":{"classes/SessionDto.html":{}}}],["src/auth/sessions/dto/session.dto.ts:17",{"_index":808,"title":{},"body":{"classes/SessionDto.html":{}}}],["src/auth/sessions/dto/session.dto.ts:20",{"_index":809,"title":{},"body":{"classes/SessionDto.html":{}}}],["src/auth/sessions/dto/session.dto.ts:7",{"_index":807,"title":{},"body":{"classes/SessionDto.html":{}}}],["src/auth/sessions/dto/update",{"_index":883,"title":{},"body":{"classes/UpdateSessionDto.html":{},"coverage.html":{}}}],["src/auth/sessions/entities/session.entity",{"_index":288,"title":{},"body":{"controllers/AuthApiController.html":{},"classes/UserEntity.html":{}}}],["src/auth/sessions/entities/session.entity.ts",{"_index":817,"title":{},"body":{"classes/SessionEntity.html":{},"coverage.html":{}}}],["src/auth/sessions/entities/session.entity.ts:10",{"_index":824,"title":{},"body":{"classes/SessionEntity.html":{}}}],["src/auth/sessions/entities/session.entity.ts:13",{"_index":820,"title":{},"body":{"classes/SessionEntity.html":{}}}],["src/auth/sessions/entities/session.entity.ts:16",{"_index":821,"title":{},"body":{"classes/SessionEntity.html":{}}}],["src/auth/sessions/entities/session.entity.ts:19",{"_index":823,"title":{},"body":{"classes/SessionEntity.html":{}}}],["src/auth/sessions/entities/session.entity.ts:22",{"_index":819,"title":{},"body":{"classes/SessionEntity.html":{}}}],["src/auth/sessions/entities/session.entity.ts:25",{"_index":822,"title":{},"body":{"classes/SessionEntity.html":{}}}],["src/auth/sessions/sessions.module.ts",{"_index":831,"title":{},"body":{"modules/SessionsModule.html":{}}}],["src/auth/sessions/sessions.service",{"_index":609,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/sessions/sessions.service.ts",{"_index":834,"title":{},"body":{"injectables/SessionsService.html":{},"coverage.html":{}}}],["src/auth/sessions/sessions.service.ts:11",{"_index":838,"title":{},"body":{"injectables/SessionsService.html":{}}}],["src/auth/sessions/sessions.service.ts:17",{"_index":841,"title":{},"body":{"injectables/SessionsService.html":{}}}],["src/auth/sessions/sessions.service.ts:25",{"_index":842,"title":{},"body":{"injectables/SessionsService.html":{}}}],["src/auth/sessions/sessions.service.ts:29",{"_index":843,"title":{},"body":{"injectables/SessionsService.html":{}}}],["src/auth/sessions/sessions.service.ts:35",{"_index":845,"title":{},"body":{"injectables/SessionsService.html":{}}}],["src/auth/sessions/sessions.service.ts:43",{"_index":848,"title":{},"body":{"injectables/SessionsService.html":{}}}],["src/auth/sessions/sessions.service.ts:47",{"_index":850,"title":{},"body":{"injectables/SessionsService.html":{}}}],["src/auth/sessions/sessions.service.ts:60",{"_index":846,"title":{},"body":{"injectables/SessionsService.html":{}}}],["src/auth/strategies/basic.strategy.ts",{"_index":380,"title":{},"body":{"injectables/BasicStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/basic.strategy.ts:14",{"_index":386,"title":{},"body":{"injectables/BasicStrategy.html":{}}}],["src/auth/strategies/basic.strategy.ts:9",{"_index":383,"title":{},"body":{"injectables/BasicStrategy.html":{}}}],["src/auth/strategies/jwt.strategy.ts",{"_index":602,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/jwt.strategy.ts:10",{"_index":604,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategies/jwt.strategy.ts:23",{"_index":606,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategies/local.strategy.ts",{"_index":655,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/local.strategy.ts:14",{"_index":657,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/strategies/local.strategy.ts:9",{"_index":656,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/users/dto/create",{"_index":156,"title":{},"body":{"controllers/ArticlesApiController.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserRequestDto.html":{},"controllers/UsersApiController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/users/dto/update",{"_index":158,"title":{},"body":{"controllers/ArticlesApiController.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRequestDto.html":{},"controllers/UsersApiController.html":{},"coverage.html":{}}}],["src/auth/users/dto/user.dto",{"_index":289,"title":{},"body":{"controllers/AuthApiController.html":{},"injectables/BasicStrategy.html":{},"classes/CreateSessionDto.html":{},"injectables/LocalStrategy.html":{},"classes/SessionDto.html":{},"controllers/UsersApiController.html":{}}}],["src/auth/users/dto/user.dto.ts",{"_index":900,"title":{},"body":{"classes/UserDto.html":{},"coverage.html":{}}}],["src/auth/users/dto/user.dto.ts:14",{"_index":908,"title":{},"body":{"classes/UserDto.html":{}}}],["src/auth/users/dto/user.dto.ts:20",{"_index":907,"title":{},"body":{"classes/UserDto.html":{}}}],["src/auth/users/dto/user.dto.ts:23",{"_index":913,"title":{},"body":{"classes/UserDto.html":{}}}],["src/auth/users/dto/user.dto.ts:26",{"_index":905,"title":{},"body":{"classes/UserDto.html":{}}}],["src/auth/users/dto/user.dto.ts:32",{"_index":912,"title":{},"body":{"classes/UserDto.html":{}}}],["src/auth/users/dto/user.dto.ts:34",{"_index":909,"title":{},"body":{"classes/UserDto.html":{}}}],["src/auth/users/dto/user.dto.ts:36",{"_index":916,"title":{},"body":{"classes/UserDto.html":{}}}],["src/auth/users/dto/user.dto.ts:8",{"_index":914,"title":{},"body":{"classes/UserDto.html":{}}}],["src/auth/users/entities/user.entity",{"_index":102,"title":{},"body":{"classes/ArticleEntity.html":{},"controllers/AuthApiController.html":{},"guards/CanGuard.html":{},"guards/HasRolesGuard.html":{},"classes/PermissionEntity.html":{},"classes/RoleEntity.html":{},"classes/SessionEntity.html":{}}}],["src/auth/users/entities/user.entity.ts",{"_index":920,"title":{},"body":{"classes/UserEntity.html":{},"coverage.html":{}}}],["src/auth/users/entities/user.entity.ts:19",{"_index":932,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/auth/users/entities/user.entity.ts:22",{"_index":925,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/auth/users/entities/user.entity.ts:25",{"_index":924,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/auth/users/entities/user.entity.ts:28",{"_index":931,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/auth/users/entities/user.entity.ts:31",{"_index":926,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/auth/users/entities/user.entity.ts:34",{"_index":929,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/auth/users/entities/user.entity.ts:37",{"_index":923,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/auth/users/entities/user.entity.ts:40",{"_index":930,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/auth/users/entities/user.entity.ts:43",{"_index":922,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/auth/users/entities/user.entity.ts:47",{"_index":927,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/auth/users/entities/user.entity.ts:51",{"_index":928,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/auth/users/entities/user.entity.ts:53",{"_index":933,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/auth/users/users.module",{"_index":37,"title":{},"body":{"modules/ApiModule.html":{}}}],["src/auth/users/users.module.ts",{"_index":969,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/auth/users/users.service",{"_index":160,"title":{},"body":{"controllers/ArticlesApiController.html":{},"injectables/BasicStrategy.html":{},"guards/CanGuard.html":{},"controllers/CategoriesApiController.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/PermissionsApiController.html":{},"controllers/RolesApiController.html":{},"controllers/UsersApiController.html":{}}}],["src/auth/users/users.service.ts",{"_index":972,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/auth/users/users.service.ts:102",{"_index":985,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/auth/users/users.service.ts:112",{"_index":990,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/auth/users/users.service.ts:124",{"_index":987,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/auth/users/users.service.ts:13",{"_index":983,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/auth/users/users.service.ts:134",{"_index":992,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/auth/users/users.service.ts:144",{"_index":1002,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/auth/users/users.service.ts:164",{"_index":1004,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/auth/users/users.service.ts:176",{"_index":1010,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/auth/users/users.service.ts:19",{"_index":989,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/auth/users/users.service.ts:28",{"_index":1007,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/auth/users/users.service.ts:41",{"_index":993,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/auth/users/users.service.ts:47",{"_index":998,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/auth/users/users.service.ts:56",{"_index":1000,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/auth/users/users.service.ts:64",{"_index":997,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/auth/users/users.service.ts:75",{"_index":995,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/auth/users/users.service.ts:82",{"_index":1008,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/auth/users/users.service.ts:96",{"_index":1005,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/base",{"_index":369,"title":{},"body":{"classes/BaseController.html":{},"classes/BaseDto.html":{},"classes/CategoryEntity.html":{},"classes/LocalBaseEntity.html":{},"classes/PermissionDto.html":{},"classes/PermissionEntity.html":{},"classes/RoleDto.html":{},"classes/RoleEntity.html":{},"classes/SessionDto.html":{},"classes/SessionEntity.html":{},"classes/UserDto.html":{},"classes/UserEntity.html":{},"coverage.html":{}}}],["src/http/api/api.module.ts",{"_index":19,"title":{},"body":{"modules/ApiModule.html":{}}}],["src/http/api/controllers/articles.controller.ts",{"_index":118,"title":{},"body":{"controllers/ArticlesApiController.html":{},"coverage.html":{}}}],["src/http/api/controllers/articles.controller.ts:25",{"_index":140,"title":{},"body":{"controllers/ArticlesApiController.html":{}}}],["src/http/api/controllers/articles.controller.ts:41",{"_index":128,"title":{},"body":{"controllers/ArticlesApiController.html":{}}}],["src/http/api/controllers/articles.controller.ts:53",{"_index":145,"title":{},"body":{"controllers/ArticlesApiController.html":{}}}],["src/http/api/controllers/articles.controller.ts:79",{"_index":136,"title":{},"body":{"controllers/ArticlesApiController.html":{}}}],["src/http/api/controllers/auth.controller.ts",{"_index":233,"title":{},"body":{"controllers/AuthApiController.html":{},"coverage.html":{}}}],["src/http/api/controllers/auth.controller.ts:48",{"_index":249,"title":{},"body":{"controllers/AuthApiController.html":{}}}],["src/http/api/controllers/auth.controller.ts:60",{"_index":261,"title":{},"body":{"controllers/AuthApiController.html":{}}}],["src/http/api/controllers/auth.controller.ts:72",{"_index":270,"title":{},"body":{"controllers/AuthApiController.html":{}}}],["src/http/api/controllers/categories.controller.ts",{"_index":419,"title":{},"body":{"controllers/CategoriesApiController.html":{},"coverage.html":{}}}],["src/http/api/controllers/categories.controller.ts:29",{"_index":426,"title":{},"body":{"controllers/CategoriesApiController.html":{}}}],["src/http/api/controllers/categories.controller.ts:45",{"_index":421,"title":{},"body":{"controllers/CategoriesApiController.html":{}}}],["src/http/api/controllers/categories.controller.ts:64",{"_index":429,"title":{},"body":{"controllers/CategoriesApiController.html":{}}}],["src/http/api/controllers/categories.controller.ts:93",{"_index":423,"title":{},"body":{"controllers/CategoriesApiController.html":{}}}],["src/http/api/controllers/permissions.controller.ts",{"_index":682,"title":{},"body":{"controllers/PermissionsApiController.html":{},"coverage.html":{}}}],["src/http/api/controllers/permissions.controller.ts:29",{"_index":687,"title":{},"body":{"controllers/PermissionsApiController.html":{}}}],["src/http/api/controllers/permissions.controller.ts:45",{"_index":683,"title":{},"body":{"controllers/PermissionsApiController.html":{}}}],["src/http/api/controllers/permissions.controller.ts:63",{"_index":689,"title":{},"body":{"controllers/PermissionsApiController.html":{}}}],["src/http/api/controllers/permissions.controller.ts:92",{"_index":684,"title":{},"body":{"controllers/PermissionsApiController.html":{}}}],["src/http/api/controllers/roles.controller.ts",{"_index":750,"title":{},"body":{"controllers/RolesApiController.html":{},"coverage.html":{}}}],["src/http/api/controllers/roles.controller.ts:29",{"_index":753,"title":{},"body":{"controllers/RolesApiController.html":{}}}],["src/http/api/controllers/roles.controller.ts:45",{"_index":751,"title":{},"body":{"controllers/RolesApiController.html":{}}}],["src/http/api/controllers/roles.controller.ts:57",{"_index":755,"title":{},"body":{"controllers/RolesApiController.html":{}}}],["src/http/api/controllers/roles.controller.ts:83",{"_index":752,"title":{},"body":{"controllers/RolesApiController.html":{}}}],["src/http/api/controllers/users.controller.ts",{"_index":939,"title":{},"body":{"controllers/UsersApiController.html":{},"coverage.html":{}}}],["src/http/api/controllers/users.controller.ts:117",{"_index":947,"title":{},"body":{"controllers/UsersApiController.html":{}}}],["src/http/api/controllers/users.controller.ts:45",{"_index":956,"title":{},"body":{"controllers/UsersApiController.html":{}}}],["src/http/api/controllers/users.controller.ts:67",{"_index":944,"title":{},"body":{"controllers/UsersApiController.html":{}}}],["src/http/api/controllers/users.controller.ts:85",{"_index":959,"title":{},"body":{"controllers/UsersApiController.html":{}}}],["src/http/decorators/can.decorator.ts",{"_index":1079,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/http/decorators/has",{"_index":1080,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/http/decorators/user.decorator",{"_index":155,"title":{},"body":{"controllers/ArticlesApiController.html":{},"controllers/CategoriesApiController.html":{},"controllers/PermissionsApiController.html":{},"controllers/RolesApiController.html":{},"controllers/UsersApiController.html":{}}}],["src/http/decorators/user.decorator.ts",{"_index":1082,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/http/guards/basic",{"_index":284,"title":{},"body":{"controllers/AuthApiController.html":{},"injectables/BasicAuthGuard.html":{},"coverage.html":{}}}],["src/http/guards/can.guard.ts",{"_index":402,"title":{},"body":{"guards/CanGuard.html":{},"coverage.html":{}}}],["src/http/guards/can.guard.ts:13",{"_index":409,"title":{},"body":{"guards/CanGuard.html":{}}}],["src/http/guards/can.guard.ts:7",{"_index":406,"title":{},"body":{"guards/CanGuard.html":{}}}],["src/http/guards/has",{"_index":591,"title":{},"body":{"guards/HasRolesGuard.html":{},"coverage.html":{}}}],["src/http/guards/jwt",{"_index":153,"title":{},"body":{"controllers/ArticlesApiController.html":{},"controllers/AuthApiController.html":{},"controllers/CategoriesApiController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/PermissionsApiController.html":{},"controllers/RolesApiController.html":{},"controllers/UsersApiController.html":{},"coverage.html":{}}}],["src/http/guards/local",{"_index":642,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["src/http/sessions/decorators/active",{"_index":285,"title":{},"body":{"controllers/AuthApiController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/http/web/halo/halo.controller.ts",{"_index":580,"title":{},"body":{"controllers/HaloController.html":{},"coverage.html":{}}}],["src/http/web/halo/halo.controller.ts:9",{"_index":585,"title":{},"body":{"controllers/HaloController.html":{}}}],["src/http/web/web.module.ts",{"_index":1058,"title":{},"body":{"modules/WebModule.html":{}}}],["src/main.ts",{"_index":1084,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/pdd/surat/surat.module.ts",{"_index":869,"title":{},"body":{"modules/SuratModule.html":{}}}],["src/pdd/surat/surat.service.ts",{"_index":871,"title":{},"body":{"injectables/SuratService.html":{},"coverage.html":{}}}],["src/validator/decorators/is",{"_index":517,"title":{},"body":{"classes/CreatePermissionDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserRequestDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/validator/decorators/slug.decorator",{"_index":507,"title":{},"body":{"classes/CreateCategoryDto.html":{}}}],["src/validator/decorators/slug.decorator.ts",{"_index":1093,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["start",{"_index":1186,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1189,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":1191,"title":{},"body":{"index.html":{}}}],["started",{"_index":1168,"title":{"index.html":{}},"body":{}}],["starter",{"_index":1179,"title":{},"body":{"index.html":{}}}],["statements",{"_index":1063,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":1112,"title":{},"body":{"dependencies.html":{}}}],["stay",{"_index":1214,"title":{},"body":{"index.html":{}}}],["strategies/basic.strategy",{"_index":330,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategies/jwt.strategy",{"_index":326,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategies/local.strategy",{"_index":318,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy",{"_index":388,"title":{},"body":{"injectables/BasicStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["string",{"_index":70,"title":{},"body":{"classes/ArticleEntity.html":{},"controllers/ArticlesApiController.html":{},"injectables/ArticlesService.html":{},"controllers/AuthApiController.html":{},"injectables/BasicStrategy.html":{},"controllers/CategoriesApiController.html":{},"injectables/CategoriesService.html":{},"classes/CategoryEntity.html":{},"classes/CreateCategoryDto.html":{},"classes/CreatePermissionDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateSessionDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserRequestDto.html":{},"controllers/HaloController.html":{},"injectables/JwtStrategy.html":{},"classes/LocalBaseEntity.html":{},"injectables/LocalStrategy.html":{},"classes/PermissionDto.html":{},"classes/PermissionEntity.html":{},"controllers/PermissionsApiController.html":{},"injectables/PermissionsService.html":{},"classes/RoleDto.html":{},"classes/RoleEntity.html":{},"controllers/RolesApiController.html":{},"injectables/RolesService.html":{},"classes/SessionDto.html":{},"classes/SessionEntity.html":{},"injectables/SessionsService.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRequestDto.html":{},"classes/UserDto.html":{},"classes/UserEntity.html":{},"controllers/UsersApiController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["sub",{"_index":365,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["summary",{"_index":292,"title":{},"body":{"controllers/AuthApiController.html":{},"controllers/UsersApiController.html":{}}}],["super",{"_index":396,"title":{},"body":{"injectables/BasicStrategy.html":{},"injectables/JwtStrategy.html":{},"classes/LocalBaseEntity.html":{},"injectables/LocalStrategy.html":{},"injectables/UsersService.html":{}}}],["super(data",{"_index":737,"title":{},"body":{"classes/RoleDto.html":{},"classes/SessionDto.html":{}}}],["support",{"_index":1205,"title":{},"body":{"index.html":{},"modules.html":{}}}],["surat",{"_index":662,"title":{},"body":{"classes/PermissionDto.html":{}}}],["surat.service",{"_index":870,"title":{},"body":{"modules/SuratModule.html":{}}}],["suratmodule",{"_index":865,"title":{"modules/SuratModule.html":{}},"body":{"modules/SuratModule.html":{},"modules.html":{},"overview.html":{}}}],["suratservice",{"_index":868,"title":{"injectables/SuratService.html":{}},"body":{"modules/SuratModule.html":{},"injectables/SuratService.html":{},"coverage.html":{},"overview.html":{}}}],["svg",{"_index":1226,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":1152,"title":{},"body":{"dependencies.html":{}}}],["switchtohttp",{"_index":1245,"title":{},"body":{"miscellaneous/variables.html":{}}}],["table",{"_index":1095,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1094,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":980,"title":{},"body":{"injectables/UsersService.html":{}}}],["take(undefined",{"_index":1006,"title":{},"body":{"injectables/UsersService.html":{}}}],["tanggal",{"_index":902,"title":{},"body":{"classes/UserDto.html":{}}}],["target",{"_index":1164,"title":{},"body":{"miscellaneous/functions.html":{}}}],["terakhir",{"_index":910,"title":{},"body":{"classes/UserDto.html":{}}}],["tertaut",{"_index":267,"title":{},"body":{"controllers/AuthApiController.html":{},"injectables/JwtStrategy.html":{}}}],["tes",{"_index":583,"title":{},"body":{"controllers/HaloController.html":{}}}],["test",{"_index":1194,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":1197,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1196,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1193,"title":{},"body":{"index.html":{}}}],["text",{"_index":73,"title":{},"body":{"classes/ArticleEntity.html":{},"classes/CategoryEntity.html":{}}}],["thanks",{"_index":1203,"title":{},"body":{"index.html":{}}}],["then((session",{"_index":863,"title":{},"body":{"injectables/SessionsService.html":{}}}],["this.authservice.login(user",{"_index":301,"title":{},"body":{"controllers/AuthApiController.html":{}}}],["this.authservice.logout(activesession",{"_index":305,"title":{},"body":{"controllers/AuthApiController.html":{}}}],["this.categoriesservice.create(data",{"_index":440,"title":{},"body":{"controllers/CategoriesApiController.html":{}}}],["this.categoriesservice.findbyslug(slug",{"_index":437,"title":{},"body":{"controllers/CategoriesApiController.html":{}}}],["this.categoriesservice.remove(uuid",{"_index":442,"title":{},"body":{"controllers/CategoriesApiController.html":{}}}],["this.categoriesservice.update(uuid",{"_index":441,"title":{},"body":{"controllers/CategoriesApiController.html":{}}}],["this.categoryrepository.find",{"_index":475,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.categoryrepository.findoneorfail",{"_index":477,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.categoryrepository.findoneorfail(uuid",{"_index":476,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.categoryrepository.remove(await",{"_index":481,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.categoryrepository.save(category",{"_index":474,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.findbyname(name",{"_index":729,"title":{},"body":{"injectables/PermissionsService.html":{},"injectables/RolesService.html":{}}}],["this.findone(category",{"_index":479,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.findone(role",{"_index":797,"title":{},"body":{"injectables/RolesService.html":{}}}],["this.findone(uuid",{"_index":482,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/PermissionsService.html":{},"injectables/RolesService.html":{}}}],["this.haspermissions(uuid",{"_index":1056,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.hasroles(uuid",{"_index":1055,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.jwtservice.sign",{"_index":363,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.permissionrepository.find",{"_index":724,"title":{},"body":{"injectables/PermissionsService.html":{}}}],["this.permissionrepository.findoneorfail",{"_index":726,"title":{},"body":{"injectables/PermissionsService.html":{}}}],["this.permissionrepository.findoneorfail(uuid",{"_index":725,"title":{},"body":{"injectables/PermissionsService.html":{}}}],["this.permissionrepository.remove(await",{"_index":728,"title":{},"body":{"injectables/PermissionsService.html":{}}}],["this.permissionrepository.save(permission",{"_index":723,"title":{},"body":{"injectables/PermissionsService.html":{}}}],["this.permissionsservice.create(data",{"_index":696,"title":{},"body":{"controllers/PermissionsApiController.html":{}}}],["this.permissionsservice.findbyname(name",{"_index":695,"title":{},"body":{"controllers/PermissionsApiController.html":{}}}],["this.permissionsservice.remove(uuid",{"_index":698,"title":{},"body":{"controllers/PermissionsApiController.html":{}}}],["this.permissionsservice.update(uuid",{"_index":697,"title":{},"body":{"controllers/PermissionsApiController.html":{}}}],["this.reflector.getallandoverride",{"_index":413,"title":{},"body":{"guards/CanGuard.html":{}}}],["this.reflector.getallandoverride('roles",{"_index":597,"title":{},"body":{"guards/HasRolesGuard.html":{}}}],["this.request.header('user",{"_index":359,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.request.ip",{"_index":362,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.rolerepository.find",{"_index":794,"title":{},"body":{"injectables/RolesService.html":{}}}],["this.rolerepository.findoneorfail",{"_index":796,"title":{},"body":{"injectables/RolesService.html":{}}}],["this.rolerepository.findoneorfail(uuid",{"_index":795,"title":{},"body":{"injectables/RolesService.html":{}}}],["this.rolerepository.remove(await",{"_index":799,"title":{},"body":{"injectables/RolesService.html":{}}}],["this.rolerepository.save",{"_index":798,"title":{},"body":{"injectables/RolesService.html":{}}}],["this.rolerepository.save(new",{"_index":792,"title":{},"body":{"injectables/RolesService.html":{}}}],["this.rolesservice.create(data",{"_index":760,"title":{},"body":{"controllers/RolesApiController.html":{}}}],["this.rolesservice.findbyname(name",{"_index":759,"title":{},"body":{"controllers/RolesApiController.html":{}}}],["this.rolesservice.remove(uuid",{"_index":762,"title":{},"body":{"controllers/RolesApiController.html":{}}}],["this.rolesservice.update(uuid",{"_index":761,"title":{},"body":{"controllers/RolesApiController.html":{}}}],["this.sessionrepository",{"_index":861,"title":{},"body":{"injectables/SessionsService.html":{}}}],["this.sessionrepository.findoneorfail(uuid",{"_index":857,"title":{},"body":{"injectables/SessionsService.html":{}}}],["this.sessionrepository.save",{"_index":853,"title":{},"body":{"injectables/SessionsService.html":{}}}],["this.sessionservice.create",{"_index":357,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.sessionservice.getuser(sessionuuid",{"_index":617,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.sessionservice.remove(session.uuid",{"_index":367,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.sessionservice.remove(sessionuuid",{"_index":640,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.sessionservice.seen(sessionuuid",{"_index":616,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.update(role",{"_index":805,"title":{},"body":{"injectables/RolesService.html":{}}}],["this.update(uuid",{"_index":801,"title":{},"body":{"injectables/RolesService.html":{},"injectables/SessionsService.html":{},"injectables/UsersService.html":{}}}],["this.usersrepository",{"_index":1039,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.find",{"_index":1024,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.findoneorfail",{"_index":1028,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.findoneorfail(options",{"_index":1027,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.findoneorfail(uuid",{"_index":1026,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.remove(user).then((user",{"_index":1034,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.save",{"_index":1020,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.save(user).then((user",{"_index":1033,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.create(data)).nopassword",{"_index":185,"title":{},"body":{"controllers/ArticlesApiController.html":{},"controllers/UsersApiController.html":{}}}],["this.usersservice.findbyusername(username",{"_index":172,"title":{},"body":{"controllers/ArticlesApiController.html":{},"injectables/BasicStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/UsersApiController.html":{}}}],["this.usersservice.remove(uuid)).nopassword",{"_index":198,"title":{},"body":{"controllers/ArticlesApiController.html":{},"controllers/UsersApiController.html":{}}}],["this.usersservice.update(uuid",{"_index":193,"title":{},"body":{"controllers/ArticlesApiController.html":{},"controllers/UsersApiController.html":{}}}],["this.usersservice.usercan",{"_index":438,"title":{},"body":{"controllers/CategoriesApiController.html":{},"controllers/PermissionsApiController.html":{}}}],["this.usersservice.usercan(authuuid",{"_index":192,"title":{},"body":{"controllers/ArticlesApiController.html":{},"controllers/UsersApiController.html":{}}}],["this.usersservice.usercan(user.uuid",{"_index":418,"title":{},"body":{"guards/CanGuard.html":{}}}],["this.usersservice.usercan(useruuid",{"_index":184,"title":{},"body":{"controllers/ArticlesApiController.html":{},"controllers/CategoriesApiController.html":{},"controllers/PermissionsApiController.html":{},"controllers/RolesApiController.html":{},"controllers/UsersApiController.html":{}}}],["throw",{"_index":178,"title":{},"body":{"controllers/ArticlesApiController.html":{},"injectables/BasicStrategy.html":{},"controllers/CategoriesApiController.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/PermissionsApiController.html":{},"controllers/RolesApiController.html":{},"controllers/UsersApiController.html":{},"miscellaneous/variables.html":{}}}],["tidak",{"_index":639,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["title",{"_index":65,"title":{},"body":{"classes/ArticleEntity.html":{}}}],["to.decorator.ts",{"_index":1088,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["tojson",{"_index":648,"title":{},"body":{"classes/LocalBaseEntity.html":{}}}],["token",{"_index":297,"title":{},"body":{"controllers/AuthApiController.html":{},"injectables/JwtStrategy.html":{}}}],["touch",{"_index":1215,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":881,"title":{},"body":{"classes/UpdateRoleDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["treechildren",{"_index":84,"title":{},"body":{"classes/ArticleEntity.html":{}}}],["treeparent",{"_index":86,"title":{},"body":{"classes/ArticleEntity.html":{}}}],["true",{"_index":89,"title":{},"body":{"classes/ArticleEntity.html":{},"guards/CanGuard.html":{},"injectables/CategoriesService.html":{},"classes/CategoryEntity.html":{},"guards/HasRolesGuard.html":{},"injectables/JwtStrategy.html":{},"classes/PermissionEntity.html":{},"classes/RoleEntity.html":{},"classes/UserEntity.html":{}}}],["try",{"_index":169,"title":{},"body":{"controllers/ArticlesApiController.html":{},"injectables/BasicStrategy.html":{},"controllers/CategoriesApiController.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/PermissionsApiController.html":{},"controllers/RolesApiController.html":{},"controllers/UsersApiController.html":{}}}],["twitter",{"_index":1221,"title":{},"body":{"index.html":{}}}],["type",{"_index":69,"title":{},"body":{"classes/ArticleEntity.html":{},"controllers/ArticlesApiController.html":{},"injectables/ArticlesService.html":{},"controllers/AuthApiController.html":{},"injectables/AuthService.html":{},"classes/BaseDto.html":{},"injectables/BasicStrategy.html":{},"guards/CanGuard.html":{},"controllers/CategoriesApiController.html":{},"injectables/CategoriesService.html":{},"classes/CategoryEntity.html":{},"classes/CreateCategoryDto.html":{},"classes/CreatePermissionDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateSessionDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserRequestDto.html":{},"guards/HasRolesGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LocalBaseEntity.html":{},"injectables/LocalStrategy.html":{},"classes/PermissionDto.html":{},"classes/PermissionEntity.html":{},"controllers/PermissionsApiController.html":{},"injectables/PermissionsService.html":{},"classes/RoleDto.html":{},"classes/RoleEntity.html":{},"controllers/RolesApiController.html":{},"injectables/RolesService.html":{},"classes/SessionDto.html":{},"classes/SessionEntity.html":{},"injectables/SessionsService.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateSessionDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRequestDto.html":{},"classes/UserDto.html":{},"classes/UserEntity.html":{},"controllers/UsersApiController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["type(undefined",{"_index":879,"title":{},"body":{"classes/UpdateRoleDto.html":{},"classes/UpdateUserDto.html":{}}}],["typeof",{"_index":478,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/RolesService.html":{}}}],["typeorm",{"_index":108,"title":{},"body":{"classes/ArticleEntity.html":{},"controllers/ArticlesApiController.html":{},"controllers/CategoriesApiController.html":{},"injectables/CategoriesService.html":{},"classes/CategoryEntity.html":{},"classes/LocalBaseEntity.html":{},"classes/PermissionEntity.html":{},"controllers/PermissionsApiController.html":{},"injectables/PermissionsService.html":{},"classes/RoleEntity.html":{},"controllers/RolesApiController.html":{},"injectables/RolesService.html":{},"classes/SessionEntity.html":{},"injectables/SessionsService.html":{},"classes/UserEntity.html":{},"controllers/UsersApiController.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":30,"title":{},"body":{"modules/ApiModule.html":{},"modules/CategoriesModule.html":{},"modules/PermissionsModule.html":{},"modules/RolesModule.html":{},"modules/SessionsModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([categoryentity",{"_index":449,"title":{},"body":{"modules/CategoriesModule.html":{}}}],["typeormmodule.forfeature([permissionentity",{"_index":704,"title":{},"body":{"modules/PermissionsModule.html":{}}}],["typeormmodule.forfeature([roleentity",{"_index":768,"title":{},"body":{"modules/RolesModule.html":{}}}],["typeormmodule.forfeature([sessionentity",{"_index":833,"title":{},"body":{"modules/SessionsModule.html":{}}}],["typeormmodule.forfeature([userentity",{"_index":971,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forroot",{"_index":44,"title":{},"body":{"modules/ApiModule.html":{}}}],["types",{"_index":875,"title":{},"body":{"classes/UpdateArticleDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePermissionDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateSessionDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRequestDto.html":{}}}],["typescript",{"_index":1178,"title":{},"body":{"index.html":{}}}],["ui",{"_index":1153,"title":{},"body":{"dependencies.html":{}}}],["unauthorizedexception",{"_index":392,"title":{},"body":{"injectables/BasicStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"miscellaneous/variables.html":{}}}],["undefined",{"_index":82,"title":{},"body":{"classes/ArticleEntity.html":{},"classes/CategoryEntity.html":{},"classes/CreatePermissionDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserRequestDto.html":{},"injectables/JwtStrategy.html":{},"classes/PermissionDto.html":{},"classes/PermissionEntity.html":{},"classes/RoleDto.html":{},"classes/RoleEntity.html":{},"classes/SessionDto.html":{},"classes/SessionEntity.html":{},"classes/UserDto.html":{},"classes/UserEntity.html":{}}}],["undefined)@jointable",{"_index":78,"title":{},"body":{"classes/ArticleEntity.html":{},"classes/RoleEntity.html":{},"classes/UserEntity.html":{}}}],["undefined})@isnotempty()@isstring",{"_index":544,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["undefined})@isnotempty()@isstring()@isemail()@isunique(userentity",{"_index":542,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["undefined})@isnotempty()@isstring()@isunique(userentity",{"_index":548,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["undefined})@isnotempty()@isstring()@minlength(6",{"_index":546,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["undefined})@useguards(basicauthguard)@post",{"_index":248,"title":{},"body":{"controllers/AuthApiController.html":{}}}],["unique",{"_index":492,"title":{},"body":{"classes/CategoryEntity.html":{},"classes/PermissionEntity.html":{},"classes/RoleEntity.html":{},"classes/UserEntity.html":{}}}],["unique.decorator",{"_index":518,"title":{},"body":{"classes/CreatePermissionDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserRequestDto.html":{}}}],["unique.decorator.ts",{"_index":1092,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["unit",{"_index":1192,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":133,"title":{},"body":{"controllers/ArticlesApiController.html":{},"injectables/AuthService.html":{},"controllers/CategoriesApiController.html":{},"injectables/CategoriesService.html":{},"injectables/JwtStrategy.html":{},"controllers/PermissionsApiController.html":{},"injectables/PermissionsService.html":{},"controllers/RolesApiController.html":{},"injectables/RolesService.html":{},"injectables/SessionsService.html":{},"controllers/UsersApiController.html":{},"injectables/UsersService.html":{}}}],["untuk",{"_index":628,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["update",{"_index":123,"title":{},"body":{"controllers/ArticlesApiController.html":{},"injectables/ArticlesService.html":{},"controllers/CategoriesApiController.html":{},"injectables/CategoriesService.html":{},"controllers/PermissionsApiController.html":{},"injectables/PermissionsService.html":{},"controllers/RolesApiController.html":{},"injectables/RolesService.html":{},"injectables/SessionsService.html":{},"controllers/UsersApiController.html":{},"injectables/UsersService.html":{}}}],["update(authuuid",{"_index":142,"title":{},"body":{"controllers/ArticlesApiController.html":{},"controllers/UsersApiController.html":{}}}],["update(category",{"_index":463,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["update(role",{"_index":788,"title":{},"body":{"injectables/RolesService.html":{}}}],["update(useruuid",{"_index":427,"title":{},"body":{"controllers/CategoriesApiController.html":{},"controllers/PermissionsApiController.html":{},"controllers/RolesApiController.html":{}}}],["update(uuid",{"_index":221,"title":{},"body":{"injectables/ArticlesService.html":{},"injectables/PermissionsService.html":{},"injectables/SessionsService.html":{},"injectables/UsersService.html":{}}}],["updateable",{"_index":191,"title":{},"body":{"controllers/ArticlesApiController.html":{},"controllers/CategoriesApiController.html":{},"controllers/PermissionsApiController.html":{},"controllers/RolesApiController.html":{},"controllers/UsersApiController.html":{}}}],["updatearticledto",{"_index":222,"title":{"classes/UpdateArticleDto.html":{}},"body":{"injectables/ArticlesService.html":{},"classes/UpdateArticleDto.html":{},"coverage.html":{}}}],["updatecategorydto",{"_index":428,"title":{"classes/UpdateCategoryDto.html":{}},"body":{"controllers/CategoriesApiController.html":{},"injectables/CategoriesService.html":{},"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["updatedat",{"_index":66,"title":{},"body":{"classes/ArticleEntity.html":{},"classes/UserDto.html":{},"classes/UserEntity.html":{}}}],["updatepermissiondto",{"_index":688,"title":{"classes/UpdatePermissionDto.html":{}},"body":{"controllers/PermissionsApiController.html":{},"injectables/PermissionsService.html":{},"classes/UpdatePermissionDto.html":{},"coverage.html":{}}}],["updateroledto",{"_index":754,"title":{"classes/UpdateRoleDto.html":{}},"body":{"controllers/RolesApiController.html":{},"injectables/RolesService.html":{},"classes/UpdateRoleDto.html":{},"coverage.html":{}}}],["updates",{"_index":231,"title":{},"body":{"injectables/ArticlesService.html":{}}}],["updatesessiondto",{"_index":849,"title":{"classes/UpdateSessionDto.html":{}},"body":{"injectables/SessionsService.html":{},"classes/UpdateSessionDto.html":{},"coverage.html":{}}}],["updateuserdto",{"_index":143,"title":{"classes/UpdateUserDto.html":{}},"body":{"controllers/ArticlesApiController.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersApiController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["updateuserdto.password",{"_index":1029,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateuserrequestdto",{"_index":892,"title":{"classes/UpdateUserRequestDto.html":{}},"body":{"classes/UpdateUserRequestDto.html":{},"coverage.html":{}}}],["useguards",{"_index":151,"title":{},"body":{"controllers/ArticlesApiController.html":{},"controllers/AuthApiController.html":{},"controllers/CategoriesApiController.html":{},"controllers/PermissionsApiController.html":{},"controllers/RolesApiController.html":{},"controllers/UsersApiController.html":{}}}],["useguards(basicauthguard",{"_index":299,"title":{},"body":{"controllers/AuthApiController.html":{}}}],["useguards(jwtauthguard",{"_index":181,"title":{},"body":{"controllers/ArticlesApiController.html":{},"controllers/AuthApiController.html":{},"controllers/CategoriesApiController.html":{},"controllers/PermissionsApiController.html":{},"controllers/RolesApiController.html":{},"controllers/UsersApiController.html":{}}}],["useguards(jwtauthguard)@delete(':uuid",{"_index":135,"title":{},"body":{"controllers/ArticlesApiController.html":{},"controllers/CategoriesApiController.html":{},"controllers/PermissionsApiController.html":{},"controllers/RolesApiController.html":{}}}],["useguards(jwtauthguard)@patch(':uuid",{"_index":144,"title":{},"body":{"controllers/ArticlesApiController.html":{},"controllers/CategoriesApiController.html":{},"controllers/PermissionsApiController.html":{},"controllers/RolesApiController.html":{}}}],["useguards(jwtauthguard)@post",{"_index":127,"title":{},"body":{"controllers/ArticlesApiController.html":{},"controllers/CategoriesApiController.html":{},"controllers/PermissionsApiController.html":{},"controllers/RolesApiController.html":{}}}],["user",{"_index":67,"title":{},"body":{"classes/ArticleEntity.html":{},"controllers/ArticlesApiController.html":{},"controllers/AuthApiController.html":{},"injectables/AuthService.html":{},"injectables/BasicStrategy.html":{},"guards/CanGuard.html":{},"controllers/CategoriesApiController.html":{},"classes/CreateSessionDto.html":{},"classes/CreateUserRequestDto.html":{},"guards/HasRolesGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/PermissionEntity.html":{},"controllers/PermissionsApiController.html":{},"classes/RoleEntity.html":{},"controllers/RolesApiController.html":{},"classes/SessionDto.html":{},"classes/SessionEntity.html":{},"injectables/SessionsService.html":{},"classes/UpdateUserRequestDto.html":{},"controllers/UsersApiController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user('uuid",{"_index":189,"title":{},"body":{"controllers/ArticlesApiController.html":{},"controllers/CategoriesApiController.html":{},"controllers/PermissionsApiController.html":{},"controllers/RolesApiController.html":{},"controllers/UsersApiController.html":{}}}],["user.articles",{"_index":116,"title":{},"body":{"classes/ArticleEntity.html":{}}}],["user.dto",{"_index":157,"title":{},"body":{"controllers/ArticlesApiController.html":{},"classes/UpdateUserDto.html":{},"classes/UserEntity.html":{},"controllers/UsersApiController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":537,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:11",{"_index":888,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:14",{"_index":889,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:15",{"_index":545,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:17",{"_index":890,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:22",{"_index":543,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:28",{"_index":549,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:34",{"_index":547,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:7",{"_index":540,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.nopassword",{"_index":174,"title":{},"body":{"controllers/ArticlesApiController.html":{},"controllers/UsersApiController.html":{}}}],["user.password",{"_index":398,"title":{},"body":{"injectables/BasicStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["user.permissions",{"_index":679,"title":{},"body":{"classes/PermissionEntity.html":{},"injectables/UsersService.html":{}}}],["user.permissions.filter",{"_index":1035,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.roles",{"_index":748,"title":{},"body":{"classes/RoleEntity.html":{},"injectables/UsersService.html":{}}}],["user.roles.filter((e",{"_index":1036,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.roles?.map((role",{"_index":599,"title":{},"body":{"guards/HasRolesGuard.html":{}}}],["user.sessions",{"_index":827,"title":{},"body":{"classes/SessionEntity.html":{}}}],["user.username",{"_index":364,"title":{},"body":{"injectables/AuthService.html":{}}}],["usercan",{"_index":981,"title":{},"body":{"injectables/UsersService.html":{}}}],["usercan(uuid",{"_index":1009,"title":{},"body":{"injectables/UsersService.html":{}}}],["userdto",{"_index":266,"title":{"classes/UserDto.html":{}},"body":{"controllers/AuthApiController.html":{},"injectables/AuthService.html":{},"injectables/BasicStrategy.html":{},"classes/CreateSessionDto.html":{},"injectables/LocalStrategy.html":{},"classes/SessionDto.html":{},"injectables/SessionsService.html":{},"classes/UserDto.html":{},"controllers/UsersApiController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userdto(data.user",{"_index":813,"title":{},"body":{"classes/SessionDto.html":{}}}],["userdto(session.user",{"_index":859,"title":{},"body":{"injectables/SessionsService.html":{}}}],["userdto(user",{"_index":307,"title":{},"body":{"controllers/AuthApiController.html":{},"injectables/UsersService.html":{}}}],["userentity",{"_index":91,"title":{"classes/UserEntity.html":{}},"body":{"classes/ArticleEntity.html":{},"controllers/AuthApiController.html":{},"guards/CanGuard.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserRequestDto.html":{},"guards/HasRolesGuard.html":{},"classes/PermissionEntity.html":{},"classes/RoleEntity.html":{},"classes/SessionEntity.html":{},"classes/UserDto.html":{},"classes/UserEntity.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["username",{"_index":141,"title":{},"body":{"controllers/ArticlesApiController.html":{},"injectables/AuthService.html":{},"injectables/BasicStrategy.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserRequestDto.html":{},"injectables/LocalStrategy.html":{},"classes/UserDto.html":{},"classes/UserEntity.html":{},"controllers/UsersApiController.html":{},"injectables/UsersService.html":{}}}],["username'})@apiparam({name",{"_index":950,"title":{},"body":{"controllers/UsersApiController.html":{}}}],["username'})@get(':username",{"_index":955,"title":{},"body":{"controllers/UsersApiController.html":{}}}],["users",{"_index":671,"title":{},"body":{"classes/PermissionEntity.html":{},"classes/RoleEntity.html":{},"controllers/UsersApiController.html":{},"injectables/UsersService.html":{}}}],["users.map((user",{"_index":1025,"title":{},"body":{"injectables/UsersService.html":{}}}],["users.service",{"_index":970,"title":{},"body":{"modules/UsersModule.html":{}}}],["users/dto/user.dto",{"_index":354,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SessionsService.html":{}}}],["users/users.module",{"_index":323,"title":{},"body":{"modules/AuthModule.html":{}}}],["usersapicontroller",{"_index":26,"title":{"controllers/UsersApiController.html":{}},"body":{"modules/ApiModule.html":{},"controllers/UsersApiController.html":{},"coverage.html":{}}}],["usersmodule",{"_index":12,"title":{"modules/UsersModule.html":{}},"body":{"modules/ApiModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersrepository",{"_index":984,"title":{},"body":{"injectables/UsersService.html":{}}}],["usersservice",{"_index":159,"title":{"injectables/UsersService.html":{}},"body":{"controllers/ArticlesApiController.html":{},"injectables/BasicStrategy.html":{},"guards/CanGuard.html":{},"controllers/CategoriesApiController.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/PermissionsApiController.html":{},"controllers/RolesApiController.html":{},"controllers/UsersApiController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["useruuid",{"_index":131,"title":{},"body":{"controllers/ArticlesApiController.html":{},"controllers/CategoriesApiController.html":{},"controllers/PermissionsApiController.html":{},"controllers/RolesApiController.html":{},"controllers/UsersApiController.html":{}}}],["uuid",{"_index":68,"title":{},"body":{"classes/ArticleEntity.html":{},"controllers/ArticlesApiController.html":{},"injectables/ArticlesService.html":{},"controllers/CategoriesApiController.html":{},"injectables/CategoriesService.html":{},"classes/CategoryEntity.html":{},"classes/PermissionDto.html":{},"classes/PermissionEntity.html":{},"controllers/PermissionsApiController.html":{},"injectables/PermissionsService.html":{},"classes/RoleDto.html":{},"classes/RoleEntity.html":{},"controllers/RolesApiController.html":{},"injectables/RolesService.html":{},"classes/SessionDto.html":{},"classes/SessionEntity.html":{},"injectables/SessionsService.html":{},"classes/UserDto.html":{},"classes/UserEntity.html":{},"controllers/UsersApiController.html":{},"injectables/UsersService.html":{}}}],["validate",{"_index":381,"title":{},"body":{"injectables/BasicStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["validate(request",{"_index":605,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(username",{"_index":384,"title":{},"body":{"injectables/BasicStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["validateorreject",{"_index":466,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["validateorreject(createcategorydto",{"_index":472,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["validationoptions",{"_index":1162,"title":{},"body":{"miscellaneous/functions.html":{}}}],["validator",{"_index":467,"title":{},"body":{"injectables/CategoriesService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreatePermissionDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserRequestDto.html":{},"classes/UpdateSessionDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserRequestDto.html":{},"dependencies.html":{}}}],["value",{"_index":1243,"title":{},"body":{"miscellaneous/variables.html":{}}}],["variable",{"_index":1071,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1236,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verify",{"_index":236,"title":{},"body":{"controllers/AuthApiController.html":{}}}],["verify(@request",{"_index":306,"title":{},"body":{"controllers/AuthApiController.html":{}}}],["verify(undefined",{"_index":263,"title":{},"body":{"controllers/AuthApiController.html":{}}}],["version",{"_index":162,"title":{},"body":{"controllers/ArticlesApiController.html":{},"controllers/AuthApiController.html":{},"controllers/CategoriesApiController.html":{},"controllers/PermissionsApiController.html":{},"controllers/RolesApiController.html":{},"controllers/UsersApiController.html":{}}}],["watch",{"_index":1187,"title":{},"body":{"index.html":{}}}],["webmodule",{"_index":1057,"title":{"modules/WebModule.html":{}},"body":{"modules/WebModule.html":{},"modules.html":{}}}],["website",{"_index":1219,"title":{},"body":{"index.html":{}}}],["where('user.uuid",{"_index":1045,"title":{},"body":{"injectables/UsersService.html":{}}}],["yang",{"_index":259,"title":{},"body":{"controllers/AuthApiController.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersApiController.html":{}}}],["yes",{"_index":375,"title":{},"body":{"classes/BaseDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateUserDto.html":{},"classes/LocalBaseEntity.html":{},"injectables/RolesService.html":{},"injectables/SessionsService.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["you'd",{"_index":1208,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":13,"title":{},"body":{"modules/ApiModule.html":{},"modules/ArticlesModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/PermissionsModule.html":{},"modules/RolesModule.html":{},"modules/SessionsModule.html":{},"modules/SuratModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/ApiModule.html":{"url":"modules/ApiModule.html","title":"module - ApiModule","body":"\n                   \n\n\n\n\n    Modules\n    ApiModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ApiModule\n\n\n\ncluster_ApiModule_imports\n\n\n\n\nArticlesModule\n\nArticlesModule\n\n\n\nApiModule\n\nApiModule\n\nApiModule -->\n\nArticlesModule->ApiModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nApiModule -->\n\nAuthModule->ApiModule\n\n\n\n\n\nCategoriesModule\n\nCategoriesModule\n\nApiModule -->\n\nCategoriesModule->ApiModule\n\n\n\n\n\nPermissionsModule\n\nPermissionsModule\n\nApiModule -->\n\nPermissionsModule->ApiModule\n\n\n\n\n\nRolesModule\n\nRolesModule\n\nApiModule -->\n\nRolesModule->ApiModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nApiModule -->\n\nUsersModule->ApiModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/http/api/api.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            ArticlesApiController\n                        \n                        \n                            AuthApiController\n                        \n                        \n                            CategoriesApiController\n                        \n                        \n                            PermissionsApiController\n                        \n                        \n                            RolesApiController\n                        \n                        \n                            UsersApiController\n                        \n                        \n                            UsersApiController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ArticlesModule\n                        \n                        \n                            AuthModule\n                        \n                        \n                            CategoriesModule\n                        \n                        \n                            PermissionsModule\n                        \n                        \n                            RolesModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { ArticlesModule } from 'src/article/articles/articles.module';\nimport { CategoriesModule } from 'src/article/categories/categories.module';\nimport { AuthModule } from 'src/auth/auth.module';\nimport { PermissionsModule } from 'src/auth/permissions/permissions.module';\nimport { RolesModule } from 'src/auth/roles/roles.module';\nimport { UsersModule } from 'src/auth/users/users.module';\nimport { ArticlesApiController } from './controllers/articles.controller';\nimport { AuthApiController } from './controllers/auth.controller';\nimport { CategoriesApiController } from './controllers/categories.controller';\nimport { PermissionsApiController } from './controllers/permissions.controller';\nimport { RolesApiController } from './controllers/roles.controller';\nimport { UsersApiController } from './controllers/users.controller';\n\n@Module({\n  imports: [\n    TypeOrmModule.forRoot(),\n    ArticlesModule,\n    AuthModule,\n    CategoriesModule,\n    PermissionsModule,\n    RolesModule,\n    UsersModule,\n  ],\n  controllers: [\n    ArticlesApiController,\n    AuthApiController,\n    CategoriesApiController,\n    PermissionsApiController,\n    RolesApiController,\n    UsersApiController,\n    UsersApiController,\n  ],\n})\nexport class ApiModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ArticleEntity.html":{"url":"classes/ArticleEntity.html","title":"class - ArticleEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ArticleEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/article/articles/entities/article.entity.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    BaseEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                body\n                            \n                            \n                                categories\n                            \n                            \n                                createdAt\n                            \n                            \n                                histories\n                            \n                            \n                                parent\n                            \n                            \n                                publishedAt\n                            \n                            \n                                publishedBy\n                            \n                            \n                                slug\n                            \n                            \n                                title\n                            \n                            \n                                updatedAt\n                            \n                            \n                                user\n                            \n                            \n                                uuid\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        body\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/article/articles/entities/article.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        categories\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CategoryEntity[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, undefined)@JoinTable()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/article/articles/entities/article.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/article/articles/entities/article.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        histories\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ArticleEntity[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @TreeChildren()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/article/articles/entities/article.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ArticleEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @TreeParent()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/article/articles/entities/article.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        publishedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/article/articles/entities/article.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        publishedBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/article/articles/entities/article.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/article/articles/entities/article.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/article/articles/entities/article.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/article/articles/entities/article.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/article/articles/entities/article.entity.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        uuid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/article/articles/entities/article.entity.ts:18\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CategoryEntity } from 'src/article/categories/entities/category.entity';\nimport { UserEntity } from 'src/auth/users/entities/user.entity';\nimport {\n  BaseEntity,\n  Column,\n  Entity,\n  JoinTable,\n  ManyToMany,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n  TreeChildren,\n  TreeParent,\n} from 'typeorm';\n\n@Entity({ name: 'article_articles' })\nexport class ArticleEntity extends BaseEntity {\n  @PrimaryGeneratedColumn('uuid')\n  uuid: string;\n\n  @Column()\n  title: string;\n\n  @Column()\n  slug: string;\n\n  @Column({ type: 'text' })\n  body: string;\n\n  @Column({ default: () => 'CURRENT_TIMESTAMP' })\n  createdAt: Date;\n\n  @Column({ nullable: true })\n  updatedAt: Date;\n\n  @Column({ nullable: true })\n  publishedAt: Date;\n\n  @ManyToMany(() => CategoryEntity, (category) => category.articles)\n  @JoinTable()\n  categories: CategoryEntity[];\n\n  @TreeChildren()\n  histories: ArticleEntity[];\n\n  @TreeParent()\n  parent: ArticleEntity;\n\n  @ManyToOne(() => UserEntity, (user) => user.articles)\n  user: UserEntity;\n\n  @ManyToOne(() => UserEntity)\n  publishedBy: UserEntity;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ArticlesApiController.html":{"url":"controllers/ArticlesApiController.html","title":"controller - ArticlesApiController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ArticlesApiController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/http/api/controllers/articles.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                get\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(userUuid: string, data: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Post()\n                \n            \n\n            \n                \n                    Defined in src/http/api/controllers/articles.controller.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userUuid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(authUuid: string, uuid: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Delete(':uuid')\n                \n            \n\n            \n                \n                    Defined in src/http/api/controllers/articles.controller.ts:79\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authUuid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    uuid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get(username: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':username')\n                \n            \n\n            \n                \n                    Defined in src/http/api/controllers/articles.controller.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(authUuid: string, uuid: string, data: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Patch(':uuid')\n                \n            \n\n            \n                \n                    Defined in src/http/api/controllers/articles.controller.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authUuid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    uuid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  ForbiddenException,\n  Get,\n  NotFoundException,\n  Param,\n  Patch,\n  Post,\n  UseGuards,\n} from '@nestjs/common';\nimport { JwtAuthGuard } from 'src/http/guards/jwt-auth.guard';\nimport { User } from 'src/http/decorators/user.decorator';\nimport { CreateUserDto } from 'src/auth/users/dto/create-user.dto';\nimport { UpdateUserDto } from 'src/auth/users/dto/update-user.dto';\nimport { UsersService } from 'src/auth/users/users.service';\nimport { EntityNotFoundError } from 'typeorm';\n\n@Controller({ version: '1', path: 'article/articles' })\nexport class ArticlesApiController {\n  constructor(private readonly usersService: UsersService) {}\n\n  @Get(':username')\n  async get(@Param('username') username: string) {\n    try {\n      const user = await this.usersService.findByUsername(username);\n\n      return user.noPassword;\n    } catch (e) {\n      if (e instanceof EntityNotFoundError) {\n        throw new NotFoundException(e.message);\n      }\n\n      throw e;\n    }\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Post()\n  async create(@User('uuid') userUuid: string, @Body() data: CreateUserDto) {\n    const createable = await this.usersService.userCan(userUuid, 'create user');\n\n    if (createable) return (await this.usersService.create(data)).noPassword;\n\n    throw new ForbiddenException(\n      'You dont have permissions to create new user',\n    );\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Patch(':uuid')\n  async update(\n    @User('uuid') authUuid: string,\n    @Param('uuid') uuid: string,\n    @Body() data: UpdateUserDto,\n  ) {\n    const updateable = await this.usersService.userCan(authUuid, 'update user');\n\n    if (updateable || authUuid == uuid) {\n      try {\n        return (await this.usersService.update(uuid, data)).noPassword;\n      } catch (e) {\n        if (e instanceof EntityNotFoundError) {\n          throw new NotFoundException(e.message);\n        }\n\n        throw e;\n      }\n    }\n\n    throw new ForbiddenException(\n      'You dont have permissions to update this user',\n    );\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Delete(':uuid')\n  async delete(@User('uuid') authUuid: string, @Param('uuid') uuid: string) {\n    const deletable = this.usersService.userCan(authUuid, 'delete user');\n\n    if (deletable && authUuid != uuid) {\n      try {\n        return (await this.usersService.remove(uuid)).noPassword;\n      } catch (e) {\n        if (e instanceof EntityNotFoundError) {\n          throw new NotFoundException(e.message);\n        }\n\n        throw e;\n      }\n    }\n\n    throw new ForbiddenException(\n      'You dont have permissions to delete this user',\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ArticlesModule.html":{"url":"modules/ArticlesModule.html","title":"module - ArticlesModule","body":"\n                   \n\n\n\n\n    Modules\n    ArticlesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ArticlesModule\n\n\n\ncluster_ArticlesModule_providers\n\n\n\ncluster_ArticlesModule_exports\n\n\n\n\nArticlesService \n\nArticlesService \n\n\n\nArticlesModule\n\nArticlesModule\n\nArticlesService  -->\n\nArticlesModule->ArticlesService \n\n\n\n\n\nArticlesService\n\nArticlesService\n\nArticlesModule -->\n\nArticlesService->ArticlesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/article/articles/articles.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ArticlesService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ArticlesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ArticlesService } from './articles.service';\n\n@Module({\n  providers: [ArticlesService],\n  exports: [ArticlesService],\n})\nexport class ArticlesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ArticlesService.html":{"url":"injectables/ArticlesService.html","title":"injectable - ArticlesService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ArticlesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/article/articles/articles.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createArticleDto: CreateArticleDto)\n                \n            \n\n\n            \n                \n                    Defined in src/article/articles/articles.service.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createArticleDto\n                                    \n                                                CreateArticleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/article/articles/articles.service.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(uuid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/article/articles/articles.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    uuid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(uuid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/article/articles/articles.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    uuid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(uuid: string, updateArticleDto: UpdateArticleDto)\n                \n            \n\n\n            \n                \n                    Defined in src/article/articles/articles.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    uuid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateArticleDto\n                                    \n                                                UpdateArticleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateArticleDto } from './dto/create-article.dto';\nimport { UpdateArticleDto } from './dto/update-article.dto';\n\n@Injectable()\nexport class ArticlesService {\n  create(createArticleDto: CreateArticleDto) {\n    return 'This action adds a new article';\n  }\n\n  findAll() {\n    return `This action returns all articles`;\n  }\n\n  findOne(uuid: string) {\n    return `This action returns a #${uuid} article`;\n  }\n\n  update(uuid: string, updateArticleDto: UpdateArticleDto) {\n    return `This action updates a #${uuid} article`;\n  }\n\n  remove(uuid: string) {\n    return `This action removes a #${uuid} article`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthApiController.html":{"url":"controllers/AuthApiController.html","title":"controller - AuthApiController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthApiController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/http/api/controllers/auth.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                login\n                            \n                            \n                                logout\n                            \n                            \n                                verify\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        login\n                        \n                    \n                \n            \n            \n                \nlogin(undefined: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'login, membuat sesi baru'})@ApiBasicAuth()@ApiCreatedResponse({description: 'respon server jika berhasil login', schema: undefined})@UseGuards(BasicAuthGuard)@Post()\n                \n            \n\n            \n                \n                    Defined in src/http/api/controllers/auth.controller.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logout\n                        \n                    \n                \n            \n            \n                \nlogout(activeSession: SessionEntity)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@ApiOperation({summary: 'logout, mencabut sesi saat ini'})@ApiOkResponse({type: SessionDto, description: 'data sesei yang dicabut'})@UseGuards(JwtAuthGuard)@Delete()\n                \n            \n\n            \n                \n                    Defined in src/http/api/controllers/auth.controller.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    activeSession\n                                    \n                                                SessionEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verify\n                        \n                    \n                \n            \n            \n                \nverify(undefined: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@ApiOperation({summary: 'memeriksa access_token'})@ApiOkResponse({type: UserDto, description: 'data user yang tertaut ke access_token'})@UseGuards(JwtAuthGuard)@Get()\n                \n            \n\n            \n                \n                    Defined in src/http/api/controllers/auth.controller.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Delete,\n  Get,\n  Post,\n  Request,\n  UseGuards,\n} from '@nestjs/common';\nimport {\n  ApiBasicAuth,\n  ApiBearerAuth,\n  ApiCreatedResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiTags,\n} from '@nestjs/swagger';\nimport { random } from 'faker';\nimport { AuthService } from 'src/auth/auth.service';\nimport { BasicAuthGuard } from 'src/http/guards/basic-auth.guard';\nimport { JwtAuthGuard } from 'src/http/guards/jwt-auth.guard';\nimport { ActiveSession } from 'src/http/sessions/decorators/active-session.decorator';\nimport { SessionDto } from 'src/auth/sessions/dto/session.dto';\nimport { SessionEntity } from 'src/auth/sessions/entities/session.entity';\nimport { UserDto } from 'src/auth/users/dto/user.dto';\nimport { UserEntity } from 'src/auth/users/entities/user.entity';\n\n@ApiTags('auth')\n@Controller({ version: '1', path: 'auth' })\nexport class AuthApiController {\n  constructor(private authService: AuthService) {}\n\n  @ApiOperation({ summary: 'login, membuat sesi baru' })\n  @ApiBasicAuth()\n  @ApiCreatedResponse({\n    description: 'respon server jika berhasil login',\n    schema: {\n      properties: {\n        access_token: {\n          type: 'string',\n          example: random.alphaNumeric(256),\n          description: 'token JWT',\n        },\n      },\n    },\n  })\n  @UseGuards(BasicAuthGuard)\n  @Post()\n  login(@Request() { user }: { user: UserDto }) {\n    return this.authService.login(user);\n  }\n\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'logout, mencabut sesi saat ini' })\n  @ApiOkResponse({\n    type: SessionDto,\n    description: 'data sesei yang dicabut',\n  })\n  @UseGuards(JwtAuthGuard)\n  @Delete()\n  logout(@ActiveSession() activeSession: SessionEntity) {\n    return this.authService.logout(activeSession);\n  }\n\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'memeriksa access_token' })\n  @ApiOkResponse({\n    type: UserDto,\n    description: 'data user yang tertaut ke access_token',\n  })\n  @UseGuards(JwtAuthGuard)\n  @Get()\n  verify(@Request() { user }: { user: UserEntity }) {\n    return new UserDto(user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\n\nPermissionsModule\n\nPermissionsModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nPermissionsModule->AuthModule\n\n\n\n\n\nRolesModule\n\nRolesModule\n\nAuthModule -->\n\nRolesModule->AuthModule\n\n\n\n\n\nSessionsModule\n\nSessionsModule\n\nAuthModule -->\n\nSessionsModule->AuthModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nBasicStrategy\n\nBasicStrategy\n\nAuthModule -->\n\nBasicStrategy->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            BasicStrategy\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PermissionsModule\n                        \n                        \n                            RolesModule\n                        \n                        \n                            SessionsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { LocalStrategy } from './strategies/local.strategy';\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtModule } from '@nestjs/jwt';\nimport { UsersModule } from './users/users.module';\nimport { jwtConstants } from './constants';\nimport { JwtStrategy } from './strategies/jwt.strategy';\nimport { SessionsModule } from './sessions/sessions.module';\nimport { PermissionsModule } from './permissions/permissions.module';\nimport { RolesModule } from './roles/roles.module';\nimport { BasicStrategy } from './strategies/basic.strategy';\n@Module({\n  imports: [\n    UsersModule,\n    SessionsModule,\n    PassportModule,\n    JwtModule.register({\n      secret: jwtConstants.secret,\n      signOptions: { expiresIn: '60s' },\n    }),\n    PermissionsModule,\n    RolesModule,\n  ],\n  providers: [AuthService, LocalStrategy, JwtStrategy, BasicStrategy],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                logout\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(request: Request, sessionService: SessionsService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        request\n                                                  \n                                                        \n                                                                    Request\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionService\n                                                  \n                                                        \n                                                                        SessionsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(user: UserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logout\n                        \n                    \n                \n            \n            \n                \nlogout(session: SessionEntity)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    session\n                                    \n                                                SessionEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { SessionsService } from './sessions/sessions.service';\nimport { REQUEST } from '@nestjs/core';\nimport { Request } from 'express';\nimport { SessionEntity } from './sessions/entities/session.entity';\nimport { UserDto } from './users/dto/user.dto';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    @Inject(REQUEST)\n    private readonly request: Request,\n    private sessionService: SessionsService,\n    private jwtService: JwtService,\n  ) {}\n\n  async login(user: UserDto) {\n    const session = await this.sessionService.create({\n      user,\n      device: this.request.header('user-agent') || '',\n      ip: this.request.ip,\n    });\n\n    return {\n      access_token: this.jwtService.sign({\n        username: user.username,\n        sub: session.uuid,\n      }),\n    };\n  }\n\n  logout(session: SessionEntity) {\n    return this.sessionService.remove(session.uuid);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BaseController.html":{"url":"classes/BaseController.html","title":"class - BaseController","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BaseController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/base-controller.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class BaseController {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BaseDto.html":{"url":"classes/BaseDto.html","title":"class - BaseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BaseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/base-dto.ts\n        \n\n\n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(data?: E)\n                    \n                \n                        \n                            \n                                Defined in src/base-dto.ts:1\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                    E\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class BaseDto {\n  constructor(data?: E) {\n    Object.assign(this, data);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BasicAuthGuard.html":{"url":"injectables/BasicAuthGuard.html","title":"injectable - BasicAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  BasicAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/http/guards/basic-auth.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class BasicAuthGuard extends AuthGuard('basic') {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BasicStrategy.html":{"url":"injectables/BasicStrategy.html","title":"injectable - BasicStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  BasicStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/basic.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/basic.strategy.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(username: string, pass: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategies/basic.strategy.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pass\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BasicStrategy as Strategy } from 'passport-http';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { compareSync } from 'bcrypt';\nimport { UsersService } from 'src/auth/users/users.service';\nimport { UserDto } from 'src/auth/users/dto/user.dto';\n\n@Injectable()\nexport class BasicStrategy extends PassportStrategy(Strategy) {\n  constructor(private readonly usersService: UsersService) {\n    super();\n  }\n\n  async validate(username: string, pass: string): Promise {\n    try {\n      const user = await this.usersService.findByUsername(username);\n\n      if (user && compareSync(pass, user.password || '')) return user;\n    } catch {}\n\n    throw new UnauthorizedException();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/CanGuard.html":{"url":"guards/CanGuard.html","title":"guard - CanGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n    Guards\n    CanGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/http/guards/can.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/http/guards/can.guard.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                    \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/http/guards/can.guard.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { UsersService } from 'src/auth/users/users.service';\nimport { UserEntity } from 'src/auth/users/entities/user.entity';\n\n@Injectable()\nexport class CanGuard implements CanActivate {\n  constructor(\n    private readonly reflector: Reflector,\n    private readonly usersService: UsersService,\n  ) {}\n\n  async canActivate(context: ExecutionContext): Promise {\n    const requiredAbility = this.reflector.getAllAndOverride(\n      'ability',\n      [context.getHandler(), context.getClass()],\n    );\n\n    if (!requiredAbility) return true;\n\n    const { user }: { user: UserEntity } = context.switchToHttp().getRequest();\n\n    return await this.usersService.userCan(user.uuid, requiredAbility);\n  }\n}\n\n        \n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CategoriesApiController.html":{"url":"controllers/CategoriesApiController.html","title":"controller - CategoriesApiController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CategoriesApiController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/http/api/controllers/categories.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                get\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(userUuid: string, data: CreateCategoryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Post()\n                \n            \n\n            \n                \n                    Defined in src/http/api/controllers/categories.controller.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userUuid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                CreateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(userUuid: string, uuid: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Delete(':uuid')\n                \n            \n\n            \n                \n                    Defined in src/http/api/controllers/categories.controller.ts:93\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userUuid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    uuid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get(slug: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':slug')\n                \n            \n\n            \n                \n                    Defined in src/http/api/controllers/categories.controller.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    slug\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(userUuid: string, uuid: string, data: UpdateCategoryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Patch(':uuid')\n                \n            \n\n            \n                \n                    Defined in src/http/api/controllers/categories.controller.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userUuid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    uuid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                UpdateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  ForbiddenException,\n  Get,\n  NotFoundException,\n  Param,\n  Patch,\n  Post,\n  UseGuards,\n} from '@nestjs/common';\nimport { CategoriesService } from 'src/article/categories/categories.service';\nimport { CreateCategoryDto } from 'src/article/categories/dto/create-category.dto';\nimport { UpdateCategoryDto } from 'src/article/categories/dto/update-category.dto';\nimport { JwtAuthGuard } from 'src/http/guards/jwt-auth.guard';\nimport { User } from 'src/http/decorators/user.decorator';\nimport { UsersService } from 'src/auth/users/users.service';\nimport { EntityNotFoundError } from 'typeorm';\n\n@Controller({ version: '1', path: 'article/categories' })\nexport class CategoriesApiController {\n  constructor(\n    private readonly categoriesService: CategoriesService,\n    private readonly usersService: UsersService,\n  ) {}\n\n  @Get(':slug')\n  async get(@Param('slug') slug: string) {\n    try {\n      const category = await this.categoriesService.findBySlug(slug);\n\n      return category;\n    } catch (e) {\n      if (e instanceof EntityNotFoundError) {\n        throw new NotFoundException(e.message);\n      }\n\n      throw e;\n    }\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Post()\n  async create(\n    @User('uuid') userUuid: string,\n    @Body() data: CreateCategoryDto,\n  ) {\n    const createable = await this.usersService.userCan(\n      userUuid,\n      'c',\n      'create category',\n    );\n\n    if (createable) return await this.categoriesService.create(data);\n\n    throw new ForbiddenException(\n      'You dont have permissions to create new category',\n    );\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Patch(':uuid')\n  async update(\n    @User('uuid') userUuid: string,\n    @Param('uuid') uuid: string,\n    @Body() data: UpdateCategoryDto,\n  ) {\n    const updateable = await this.usersService.userCan(\n      userUuid,\n      'update category',\n    );\n\n    if (updateable || userUuid == uuid) {\n      try {\n        return await this.categoriesService.update(uuid, data);\n      } catch (e) {\n        if (e instanceof EntityNotFoundError) {\n          throw new NotFoundException(e.message);\n        }\n\n        throw e;\n      }\n    }\n\n    throw new ForbiddenException(\n      'You dont have permissions to update this category',\n    );\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Delete(':uuid')\n  async delete(@User('uuid') userUuid: string, @Param('uuid') uuid: string) {\n    const deletable = this.usersService.userCan(userUuid, 'delete category');\n\n    if (deletable && userUuid != uuid) {\n      try {\n        return await this.categoriesService.remove(uuid);\n      } catch (e) {\n        if (e instanceof EntityNotFoundError) {\n          throw new NotFoundException(e.message);\n        }\n\n        throw e;\n      }\n    }\n\n    throw new ForbiddenException(\n      'You dont have permissions to delete this category',\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CategoriesModule.html":{"url":"modules/CategoriesModule.html","title":"module - CategoriesModule","body":"\n                   \n\n\n\n\n    Modules\n    CategoriesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_CategoriesModule\n\n\n\ncluster_CategoriesModule_exports\n\n\n\ncluster_CategoriesModule_providers\n\n\n\n\nCategoriesService \n\nCategoriesService \n\n\n\nCategoriesModule\n\nCategoriesModule\n\nCategoriesService  -->\n\nCategoriesModule->CategoriesService \n\n\n\n\n\nCategoriesService\n\nCategoriesService\n\nCategoriesModule -->\n\nCategoriesService->CategoriesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/article/categories/categories.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CategoriesService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CategoriesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { CategoriesService } from './categories.service';\nimport { CategoryEntity } from './entities/category.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([CategoryEntity])],\n  providers: [CategoriesService],\n  exports: [CategoriesService],\n})\nexport class CategoriesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CategoriesService.html":{"url":"injectables/CategoriesService.html","title":"injectable - CategoriesService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  CategoriesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/article/categories/categories.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                    Async\n                                findBySlug\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(categoryRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/article/categories/categories.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        categoryRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createCategoryDto: CreateCategoryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/article/categories/categories.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createCategoryDto\n                                    \n                                                CreateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/article/categories/categories.service.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findBySlug\n                        \n                    \n                \n            \n            \n                \n                    \n                    findBySlug(slug: string)\n                \n            \n\n\n            \n                \n                    Defined in src/article/categories/categories.service.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    slug\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(uuid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/article/categories/categories.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    uuid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(uuid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/article/categories/categories.service.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    uuid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(category: string | CategoryEntity, updateCategoryDto: UpdateCategoryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/article/categories/categories.service.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    category\n                                    \n                                                string | CategoryEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateCategoryDto\n                                    \n                                                UpdateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { CreateCategoryDto } from './dto/create-category.dto';\nimport { UpdateCategoryDto } from './dto/update-category.dto';\nimport { CategoryEntity } from './entities/category.entity';\nimport { validateOrReject } from 'class-validator';\n\nimport Slugify from 'slugify';\n\n@Injectable()\nexport class CategoriesService {\n  constructor(\n    @InjectRepository(CategoryEntity)\n    private readonly categoryRepository: Repository,\n  ) {}\n\n  async create(createCategoryDto: CreateCategoryDto) {\n    createCategoryDto = {\n      ...createCategoryDto,\n      slug: Slugify(createCategoryDto.slug, { lower: true }),\n    };\n\n    await validateOrReject(createCategoryDto);\n\n    const category = new CategoryEntity(createCategoryDto);\n\n    return this.categoryRepository.save(category);\n  }\n\n  findAll() {\n    return this.categoryRepository.find();\n  }\n\n  async findOne(uuid: string) {\n    return await this.categoryRepository.findOneOrFail(uuid);\n  }\n\n  async findBySlug(slug: string) {\n    return await this.categoryRepository.findOneOrFail({ slug });\n  }\n\n  async update(\n    category: string | CategoryEntity,\n    updateCategoryDto: UpdateCategoryDto,\n  ) {\n    if (typeof category == 'string') category = await this.findOne(category);\n\n    Object.assign(category, updateCategoryDto);\n\n    return this.categoryRepository.save(category);\n  }\n\n  async remove(uuid: string): Promise {\n    return this.categoryRepository.remove(await this.findOne(uuid));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CategoryEntity.html":{"url":"classes/CategoryEntity.html","title":"class - CategoryEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CategoryEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/article/categories/entities/category.entity.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    BaseEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                articles\n                            \n                            \n                                description\n                            \n                            \n                                name\n                            \n                            \n                                slug\n                            \n                            \n                                uuid\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        articles\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ArticleEntity[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/article/categories/entities/category.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/article/categories/entities/category.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/article/categories/entities/category.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/article/categories/entities/category.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        uuid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/article/categories/entities/category.entity.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ArticleEntity } from 'src/article/articles/entities/article.entity';\nimport { BaseEntity } from 'src/base-entity';\nimport { Column, Entity, ManyToMany, PrimaryGeneratedColumn } from 'typeorm';\nimport { CreateCategoryDto } from '../dto/create-category.dto';\n\n@Entity({ name: 'article_categories' })\nexport class CategoryEntity extends BaseEntity {\n  @PrimaryGeneratedColumn('uuid')\n  uuid: string;\n\n  @Column()\n  name: string;\n\n  @Column({ unique: true })\n  slug: string;\n\n  @Column({ type: 'text', default: null })\n  description: string;\n\n  @ManyToMany(() => ArticleEntity, (article) => article.categories)\n  articles: ArticleEntity[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateArticleDto.html":{"url":"classes/CreateArticleDto.html","title":"class - CreateArticleDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateArticleDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/article/articles/dto/create-article.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateArticleDto {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCategoryDto.html":{"url":"classes/CreateCategoryDto.html","title":"class - CreateCategoryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCategoryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/article/categories/dto/create-category.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                description\n                            \n                            \n                                    Readonly\n                                name\n                            \n                            \n                                    Readonly\n                                slug\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(data?: Partial)\n                    \n                \n                        \n                            \n                                Defined in src/article/categories/dto/create-category.dto.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                        Partial\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/article/categories/dto/create-category.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/article/categories/dto/create-category.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@Slug(CategoryEntity)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/article/categories/dto/create-category.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\nimport { Slug } from 'src/validator/decorators/slug.decorator';\nimport { CategoryEntity } from '../entities/category.entity';\n\nexport class CreateCategoryDto {\n  constructor(data?: Partial) {\n    Object.assign(this, data);\n  }\n\n  @IsNotEmpty()\n  @IsString()\n  readonly name: string;\n\n  @IsNotEmpty()\n  @Slug(CategoryEntity)\n  readonly slug: string;\n\n  @IsNotEmpty()\n  @IsString()\n  readonly description: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePermissionDto.html":{"url":"classes/CreatePermissionDto.html","title":"class - CreatePermissionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePermissionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/permissions/dto/create-permission.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@IsUnique(PermissionEntity)@ApiProperty({example: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/permissions/dto/create-permission.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString } from 'class-validator';\nimport { lorem } from 'faker';\nimport { IsUnique } from 'src/validator/decorators/is-unique.decorator';\nimport { PermissionEntity } from '../entities/permission.entity';\n\nexport class CreatePermissionDto {\n  @IsNotEmpty()\n  @IsString()\n  @IsUnique(PermissionEntity)\n  @ApiProperty({ example: lorem.word() })\n  readonly name: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateRoleDto.html":{"url":"classes/CreateRoleDto.html","title":"class - CreateRoleDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateRoleDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/roles/dto/create-role.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@IsUnique(RoleEntity)@ApiProperty({example: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/roles/dto/create-role.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString } from 'class-validator';\nimport { lorem } from 'faker';\nimport { IsUnique } from 'src/validator/decorators/is-unique.decorator';\nimport { RoleEntity } from '../entities/role.entity';\n\nexport class CreateRoleDto {\n  @IsNotEmpty()\n  @IsString()\n  @IsUnique(RoleEntity)\n  @ApiProperty({ example: lorem.word() })\n  readonly name: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateSessionDto.html":{"url":"classes/CreateSessionDto.html","title":"class - CreateSessionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateSessionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/sessions/dto/create-session.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                device\n                            \n                            \n                                ip\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        device\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/sessions/dto/create-session.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ip\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/sessions/dto/create-session.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserDto\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/sessions/dto/create-session.dto.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { UserDto } from 'src/auth/users/dto/user.dto';\n\nexport class CreateSessionDto {\n  user: UserDto;\n  device: string;\n  ip: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/users/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                email\n                            \n                            \n                                    Readonly\n                                name\n                            \n                            \n                                    Readonly\n                                password\n                            \n                            \n                                    Readonly\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(data?: Partial)\n                    \n                \n                        \n                            \n                                Defined in src/auth/users/dto/create-user.dto.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                        Partial\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: undefined})@IsNotEmpty()@IsString()@IsEmail()@IsUnique(UserEntity)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/users/dto/create-user.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: undefined})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/users/dto/create-user.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: undefined})@IsNotEmpty()@IsString()@MinLength(6)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/users/dto/create-user.dto.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: undefined})@IsNotEmpty()@IsString()@IsUnique(UserEntity)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/users/dto/create-user.dto.ts:28\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsEmail, IsString, MinLength } from 'class-validator';\nimport { internet, name } from 'faker';\nimport { IsUnique } from 'src/validator/decorators/is-unique.decorator';\nimport { UserEntity } from '../entities/user.entity';\n\nexport class CreateUserDto {\n  constructor(data?: Partial) {\n    Object.assign(this, data);\n  }\n\n  @ApiProperty({ example: name.findName() })\n  @IsNotEmpty()\n  @IsString()\n  readonly name: string;\n\n  @ApiProperty({ example: internet.email() })\n  @IsNotEmpty()\n  @IsString()\n  @IsEmail()\n  @IsUnique(UserEntity)\n  readonly email: string;\n\n  @ApiProperty({ example: internet.userName() })\n  @IsNotEmpty()\n  @IsString()\n  @IsUnique(UserEntity)\n  readonly username: string;\n\n  @ApiProperty({ example: internet.password() })\n  @IsNotEmpty()\n  @IsString()\n  @MinLength(6)\n  readonly password: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserRequestDto.html":{"url":"classes/CreateUserRequestDto.html","title":"class - CreateUserRequestDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserRequestDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/users/dto/create-user-request.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                email\n                            \n                            \n                                    Readonly\n                                name\n                            \n                            \n                                    Readonly\n                                password\n                            \n                            \n                                    Readonly\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: undefined, description: 'alamat email'})@IsNotEmpty()@IsString()@IsEmail()@IsUnique(UserEntity)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/users/dto/create-user-request.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: undefined, description: 'nama lengkap'})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/users/dto/create-user-request.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: fakerGeneratedPassword, description: 'katasandi'})@IsNotEmpty()@IsString()@MinLength(6)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/users/dto/create-user-request.dto.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: undefined, description: 'nama pengguna, digunakan saat login atau memanggil'})@IsNotEmpty()@IsString()@IsUnique(UserEntity)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/users/dto/create-user-request.dto.ts:29\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsEmail, IsString, MinLength } from 'class-validator';\nimport { internet, name } from 'faker';\nimport { IsUnique } from 'src/validator/decorators/is-unique.decorator';\nimport { UserEntity } from '../entities/user.entity';\n\nexport const fakerGeneratedPassword = internet.password();\n\nexport class CreateUserRequestDto {\n  @ApiProperty({ example: name.findName(), description: 'nama lengkap' })\n  @IsNotEmpty()\n  @IsString()\n  readonly name: string;\n\n  @ApiProperty({ example: internet.email(), description: 'alamat email' })\n  @IsNotEmpty()\n  @IsString()\n  @IsEmail()\n  @IsUnique(UserEntity)\n  readonly email: string;\n\n  @ApiProperty({\n    example: internet.userName(),\n    description: 'nama pengguna, digunakan saat login atau memanggil',\n  })\n  @IsNotEmpty()\n  @IsString()\n  @IsUnique(UserEntity)\n  readonly username: string;\n\n  @ApiProperty({ example: fakerGeneratedPassword, description: 'katasandi' })\n  @IsNotEmpty()\n  @IsString()\n  @MinLength(6)\n  readonly password: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HaloController.html":{"url":"controllers/HaloController.html","title":"controller - HaloController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HaloController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/http/web/halo/halo.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                halo\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                tes\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        tes\n                        \n                    \n                \n            \n            \n                \ntes()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@Render('index')\n                \n            \n\n            \n                \n                    Defined in src/http/web/halo/halo.controller.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { message: string; }\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Render } from '@nestjs/common';\nimport { Get } from '@nestjs/common';\nimport { Controller } from '@nestjs/common';\n\n@Controller('halo')\nexport class HaloController {\n  @Get()\n  @Render('index')\n  tes() {\n    return {\n      message: 'Halo!',\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/HasRolesGuard.html":{"url":"guards/HasRolesGuard.html","title":"guard - HasRolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n    Guards\n    HasRolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/http/guards/has-roles.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/http/guards/has-roles.guard.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/http/guards/has-roles.guard.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { UserEntity } from 'src/auth/users/entities/user.entity';\n\n@Injectable()\nexport class HasRolesGuard implements CanActivate {\n  constructor(private readonly reflector: Reflector) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    const requiredRoles = this.reflector.getAllAndOverride('roles', [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n\n    if (!requiredRoles) return true;\n\n    const { user }: { user: UserEntity } = context.switchToHttp().getRequest();\n\n    return requiredRoles.some((role) =>\n      user.roles?.map((role) => role.name).includes(role),\n    );\n  }\n}\n\n        \n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/http/guards/jwt-auth.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/jwt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(sessionService: SessionsService, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/jwt.strategy.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        sessionService\n                                                  \n                                                        \n                                                                        SessionsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(request: Request, undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategies/jwt.strategy.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { jwtConstants } from 'src/auth/constants';\nimport { SessionsService } from 'src/auth/sessions/sessions.service';\nimport { UsersService } from 'src/auth/users/users.service';\nimport { Request } from 'express';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(\n    private sessionService: SessionsService,\n    private readonly usersService: UsersService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: true,\n      secretOrKey: jwtConstants.secret,\n      passReqToCallback: true,\n    });\n  }\n\n  async validate(request: Request, { sub: sessionUuid }: { sub: string }) {\n    try {\n      const session = await this.sessionService.seen(sessionUuid);\n      const user = await this.sessionService.getUser(sessionUuid);\n\n      if (session) {\n        //mencocokan ip client dengan sesi dan memastikan sesi tertaut ke user\n        if (session.ip == request.ip && user) {\n          // memasang property asctiveSession untuk keperluan logout dll\n          Object.assign(request, { activeSession: session });\n\n          return user;\n        }\n\n        // menghapus sesi dari db jika diakses dari ip yang berbeda (kemungkinan token dicuri) atau tidak tertaut ke user\n        this.sessionService.remove(sessionUuid);\n      }\n    } catch {}\n\n    throw new UnauthorizedException();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthGuard.html":{"url":"injectables/LocalAuthGuard.html","title":"injectable - LocalAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/http/guards/local-auth.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class LocalAuthGuard extends AuthGuard('local') {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LocalBaseEntity.html":{"url":"classes/LocalBaseEntity.html","title":"class - LocalBaseEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LocalBaseEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/base-entity.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    CoreBaseEntity\n            \n\n\n\n            \n    Index\n    \n        \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    toJson\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(createDto?: CreateDto)\n                    \n                \n                        \n                            \n                                Defined in src/base-entity.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        createDto\n                                                  \n                                                        \n                                                                    CreateDto\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        toJson\n                    \n                \n\n                \n                    \n                        gettoJson()\n                    \n                \n                            \n                                \n                                    Defined in src/base-entity.ts:10\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { BaseEntity as CoreBaseEntity } from 'typeorm';\n\nclass LocalBaseEntity extends CoreBaseEntity {\n  constructor(createDto?: CreateDto) {\n    super();\n\n    if (createDto) Object.assign(this, createDto);\n  }\n\n  get toJson(): string {\n    return JSON.stringify(this);\n  }\n}\n\nexport { LocalBaseEntity as BaseEntity };\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/local.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/local.strategy.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(username: string, pass: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategies/local.strategy.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pass\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Strategy } from 'passport-local';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { UsersService } from 'src/auth/users/users.service';\nimport { compareSync } from 'bcrypt';\nimport { UserDto } from 'src/auth/users/dto/user.dto';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(private readonly usersService: UsersService) {\n    super();\n  }\n\n  async validate(username: string, pass: string): Promise {\n    try {\n      const user = await this.usersService.findByUsername(username);\n\n      if (user && compareSync(pass, user.password || '')) return user;\n    } catch {}\n\n    throw new UnauthorizedException();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PermissionDto.html":{"url":"classes/PermissionDto.html","title":"class - PermissionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PermissionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/permissions/dto/permission.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        BaseDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                name\n                            \n                            \n                                    Readonly\n                                uuid\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'mencetak surat'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/permissions/dto/permission.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        uuid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/permissions/dto/permission.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { datatype } from 'faker';\nimport { PermissionEntity } from 'src/auth/permissions/entities/permission.entity';\nimport { BaseDto } from 'src/base-dto';\n\nexport class PermissionDto extends BaseDto {\n  @ApiProperty({ example: datatype.uuid() })\n  readonly uuid: string;\n\n  @ApiProperty({ example: 'mencetak surat' })\n  readonly name: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PermissionEntity.html":{"url":"classes/PermissionEntity.html","title":"class - PermissionEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PermissionEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/permissions/entities/permission.entity.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    BaseEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                            \n                                roles\n                            \n                            \n                                users\n                            \n                            \n                                uuid\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/permissions/entities/permission.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        roles\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RoleEntity[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/permissions/entities/permission.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        users\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserEntity[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/permissions/entities/permission.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        uuid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/permissions/entities/permission.entity.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { BaseEntity } from 'src/base-entity';\nimport { UserEntity } from 'src/auth/users/entities/user.entity';\nimport { Column, Entity, ManyToMany, PrimaryGeneratedColumn } from 'typeorm';\nimport { CreatePermissionDto } from '../dto/create-permission.dto';\nimport { RoleEntity } from 'src/auth/roles/entities/role.entity';\n\n@Entity({ name: 'auth_permissions' })\nexport class PermissionEntity extends BaseEntity {\n  @PrimaryGeneratedColumn('uuid')\n  uuid: string;\n\n  @Column({ unique: true })\n  name: string;\n\n  @ManyToMany(() => UserEntity, (user) => user.permissions)\n  users: UserEntity[];\n\n  @ManyToMany(() => RoleEntity, (role) => role.permissions)\n  roles: RoleEntity[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PermissionsApiController.html":{"url":"controllers/PermissionsApiController.html","title":"controller - PermissionsApiController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PermissionsApiController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/http/api/controllers/permissions.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                get\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(userUuid: string, data: CreatePermissionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Post()\n                \n            \n\n            \n                \n                    Defined in src/http/api/controllers/permissions.controller.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userUuid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                CreatePermissionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(userUuid: string, uuid: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Delete(':uuid')\n                \n            \n\n            \n                \n                    Defined in src/http/api/controllers/permissions.controller.ts:92\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userUuid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    uuid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get(name: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':name')\n                \n            \n\n            \n                \n                    Defined in src/http/api/controllers/permissions.controller.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(userUuid: string, uuid: string, data: UpdatePermissionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Patch(':uuid')\n                \n            \n\n            \n                \n                    Defined in src/http/api/controllers/permissions.controller.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userUuid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    uuid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                UpdatePermissionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  ForbiddenException,\n  Get,\n  NotFoundException,\n  Param,\n  Patch,\n  Post,\n  UseGuards,\n} from '@nestjs/common';\nimport { JwtAuthGuard } from 'src/http/guards/jwt-auth.guard';\nimport { CreatePermissionDto } from 'src/auth/permissions/dto/create-permission.dto';\nimport { UpdatePermissionDto } from 'src/auth/permissions/dto/update-permission.dto';\nimport { PermissionsService } from 'src/auth/permissions/permissions.service';\nimport { User } from 'src/http/decorators/user.decorator';\nimport { UsersService } from 'src/auth/users/users.service';\nimport { EntityNotFoundError } from 'typeorm';\n\n@Controller({ version: '1', path: 'permissions' })\nexport class PermissionsApiController {\n  constructor(\n    private readonly permissionsService: PermissionsService,\n    private readonly usersService: UsersService,\n  ) {}\n\n  @Get(':name')\n  async get(@Param('name') name: string) {\n    try {\n      const permission = await this.permissionsService.findByName(name);\n\n      return permission;\n    } catch (e) {\n      if (e instanceof EntityNotFoundError) {\n        throw new NotFoundException(e.message);\n      }\n\n      throw e;\n    }\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Post()\n  async create(\n    @User('uuid') userUuid: string,\n    @Body() data: CreatePermissionDto,\n  ) {\n    const createable = await this.usersService.userCan(\n      userUuid,\n      'create permission',\n    );\n\n    if (createable) return await this.permissionsService.create(data);\n\n    throw new ForbiddenException(\n      'You dont have permissions to create new permission',\n    );\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Patch(':uuid')\n  async update(\n    @User('uuid') userUuid: string,\n    @Param('uuid') uuid: string,\n    @Body() data: UpdatePermissionDto,\n  ) {\n    const updateable = await this.usersService.userCan(\n      userUuid,\n      'update permission',\n    );\n\n    if (updateable || userUuid == uuid) {\n      try {\n        return await this.permissionsService.update(uuid, data);\n      } catch (e) {\n        if (e instanceof EntityNotFoundError) {\n          throw new NotFoundException(e.message);\n        }\n\n        throw e;\n      }\n    }\n\n    throw new ForbiddenException(\n      'You dont have permissions to update this permission',\n    );\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Delete(':uuid')\n  async delete(@User('uuid') userUuid: string, @Param('uuid') uuid: string) {\n    const deletable = this.usersService.userCan(userUuid, 'delete permission');\n\n    if (deletable && userUuid != uuid) {\n      try {\n        return await this.permissionsService.remove(uuid);\n      } catch (e) {\n        if (e instanceof EntityNotFoundError) {\n          throw new NotFoundException(e.message);\n        }\n\n        throw e;\n      }\n    }\n\n    throw new ForbiddenException(\n      'You dont have permissions to delete this permission',\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PermissionsModule.html":{"url":"modules/PermissionsModule.html","title":"module - PermissionsModule","body":"\n                   \n\n\n\n\n    Modules\n    PermissionsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PermissionsModule\n\n\n\ncluster_PermissionsModule_providers\n\n\n\ncluster_PermissionsModule_exports\n\n\n\n\nPermissionsService \n\nPermissionsService \n\n\n\nPermissionsModule\n\nPermissionsModule\n\nPermissionsService  -->\n\nPermissionsModule->PermissionsService \n\n\n\n\n\nPermissionsService\n\nPermissionsService\n\nPermissionsModule -->\n\nPermissionsService->PermissionsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/permissions/permissions.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PermissionsService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PermissionsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { PermissionEntity } from './entities/permission.entity';\nimport { PermissionsService } from './permissions.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([PermissionEntity])],\n  providers: [PermissionsService],\n  exports: [PermissionsService],\n})\nexport class PermissionsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PermissionsService.html":{"url":"injectables/PermissionsService.html","title":"injectable - PermissionsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  PermissionsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/permissions/permissions.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                    Async\n                                findByName\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                removeByName\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(permissionRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/auth/permissions/permissions.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        permissionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createPermissionDto: CreatePermissionDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/permissions/permissions.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createPermissionDto\n                                    \n                                                CreatePermissionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/auth/permissions/permissions.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByName\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByName(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/permissions/permissions.service.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(uuid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/permissions/permissions.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    uuid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(uuid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/permissions/permissions.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    uuid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeByName\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeByName(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/permissions/permissions.service.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(uuid: string, updatePermissionDto: UpdatePermissionDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/permissions/permissions.service.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    uuid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updatePermissionDto\n                                    \n                                                UpdatePermissionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { CreatePermissionDto } from './dto/create-permission.dto';\nimport { UpdatePermissionDto } from './dto/update-permission.dto';\nimport { PermissionEntity } from './entities/permission.entity';\n\n@Injectable()\nexport class PermissionsService {\n  constructor(\n    @InjectRepository(PermissionEntity)\n    private readonly permissionRepository: Repository,\n  ) {}\n\n  create(createPermissionDto: CreatePermissionDto) {\n    const permission = new PermissionEntity(createPermissionDto);\n\n    return this.permissionRepository.save(permission);\n  }\n\n  findAll() {\n    return this.permissionRepository.find();\n  }\n\n  async findOne(uuid: string) {\n    return await this.permissionRepository.findOneOrFail(uuid);\n  }\n\n  async findByName(name: string) {\n    return await this.permissionRepository.findOneOrFail({ name });\n  }\n\n  async update(uuid: string, updatePermissionDto: UpdatePermissionDto) {\n    const permission = await this.findOne(uuid);\n\n    Object.assign(permission, updatePermissionDto);\n\n    return this.permissionRepository.save(permission);\n  }\n\n  async remove(uuid: string): Promise {\n    return this.permissionRepository.remove(await this.findOne(uuid));\n  }\n\n  async removeByName(name: string): Promise {\n    return this.permissionRepository.remove(await this.findByName(name));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RoleDto.html":{"url":"classes/RoleDto.html","title":"class - RoleDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RoleDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/roles/dto/role.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        BaseDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                name\n                            \n                            \n                                    Readonly\n                                uuid\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(data: RoleEntity)\n                    \n                \n                        \n                            \n                                Defined in src/auth/roles/dto/role.dto.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                        RoleEntity\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'operator'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/roles/dto/role.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        uuid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/roles/dto/role.dto.ts:20\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { datatype } from 'faker';\nimport { PermissionDto } from 'src/auth/permissions/dto/permission.dto';\nimport { BaseDto } from 'src/base-dto';\nimport { RoleEntity } from '../entities/role.entity';\n\nexport class RoleDto extends BaseDto {\n  constructor(data: RoleEntity) {\n    super(data);\n\n    if (data.permissions)\n      Object.assign(this, {\n        permissions: data.permissions.map(\n          (permission) => new PermissionDto(permission),\n        ),\n      });\n  }\n\n  @ApiProperty({ example: datatype.uuid() })\n  readonly uuid: string;\n\n  @ApiProperty({ example: 'operator' })\n  readonly name: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RoleEntity.html":{"url":"classes/RoleEntity.html","title":"class - RoleEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RoleEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/roles/entities/role.entity.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    BaseEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                            \n                                permissions\n                            \n                            \n                                users\n                            \n                            \n                                uuid\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/roles/entities/role.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        permissions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PermissionEntity[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, undefined)@JoinTable()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/roles/entities/role.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        users\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserEntity[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/roles/entities/role.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        uuid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/roles/entities/role.entity.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { BaseEntity } from 'src/base-entity';\nimport { PermissionEntity } from 'src/auth/permissions/entities/permission.entity';\nimport { UserEntity } from 'src/auth/users/entities/user.entity';\nimport {\n  Column,\n  Entity,\n  JoinTable,\n  ManyToMany,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\nimport { CreateRoleDto } from '../dto/create-role.dto';\n\n@Entity({ name: 'auth_roles' })\nexport class RoleEntity extends BaseEntity {\n  @PrimaryGeneratedColumn('uuid')\n  uuid: string;\n\n  @Column({ unique: true })\n  name: string;\n\n  @ManyToMany(() => UserEntity, (user) => user.roles)\n  users: UserEntity[];\n\n  @ManyToMany(() => PermissionEntity, (permission) => permission.roles)\n  @JoinTable()\n  permissions: PermissionEntity[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RolesApiController.html":{"url":"controllers/RolesApiController.html","title":"controller - RolesApiController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RolesApiController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/http/api/controllers/roles.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                get\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(userUuid: string, data: CreateRoleDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Post()\n                \n            \n\n            \n                \n                    Defined in src/http/api/controllers/roles.controller.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userUuid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                CreateRoleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(userUuid: string, uuid: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Delete(':uuid')\n                \n            \n\n            \n                \n                    Defined in src/http/api/controllers/roles.controller.ts:83\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userUuid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    uuid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get(name: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':name')\n                \n            \n\n            \n                \n                    Defined in src/http/api/controllers/roles.controller.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(userUuid: string, uuid: string, data: UpdateRoleDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Patch(':uuid')\n                \n            \n\n            \n                \n                    Defined in src/http/api/controllers/roles.controller.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userUuid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    uuid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                UpdateRoleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  ForbiddenException,\n  Get,\n  NotFoundException,\n  Param,\n  Patch,\n  Post,\n  UseGuards,\n} from '@nestjs/common';\nimport { JwtAuthGuard } from 'src/http/guards/jwt-auth.guard';\nimport { CreateRoleDto } from 'src/auth/roles/dto/create-role.dto';\nimport { UpdateRoleDto } from 'src/auth/roles/dto/update-role.dto';\nimport { RolesService } from 'src/auth/roles/roles.service';\nimport { User } from 'src/http/decorators/user.decorator';\nimport { UsersService } from 'src/auth/users/users.service';\nimport { EntityNotFoundError } from 'typeorm';\n\n@Controller({ version: '1', path: 'roles' })\nexport class RolesApiController {\n  constructor(\n    private readonly rolesService: RolesService,\n    private readonly usersService: UsersService,\n  ) {}\n\n  @Get(':name')\n  async get(@Param('name') name: string) {\n    try {\n      const role = await this.rolesService.findByName(name);\n\n      return role;\n    } catch (e) {\n      if (e instanceof EntityNotFoundError) {\n        throw new NotFoundException(e.message);\n      }\n\n      throw e;\n    }\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Post()\n  async create(@User('uuid') userUuid: string, @Body() data: CreateRoleDto) {\n    const createable = await this.usersService.userCan(userUuid, 'create role');\n\n    if (createable) return await this.rolesService.create(data);\n\n    throw new ForbiddenException(\n      'You dont have permissions to create new role',\n    );\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Patch(':uuid')\n  async update(\n    @User('uuid') userUuid: string,\n    @Param('uuid') uuid: string,\n    @Body() data: UpdateRoleDto,\n  ) {\n    const updateable = await this.usersService.userCan(userUuid, 'update role');\n\n    if (updateable || userUuid == uuid) {\n      try {\n        return await this.rolesService.update(uuid, data);\n      } catch (e) {\n        if (e instanceof EntityNotFoundError) {\n          throw new NotFoundException(e.message);\n        }\n\n        throw e;\n      }\n    }\n\n    throw new ForbiddenException(\n      'You dont have permissions to update this role',\n    );\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Delete(':uuid')\n  async delete(@User('uuid') userUuid: string, @Param('uuid') uuid: string) {\n    const deletable = this.usersService.userCan(userUuid, 'delete role');\n\n    if (deletable && userUuid != uuid) {\n      try {\n        return await this.rolesService.remove(uuid);\n      } catch (e) {\n        if (e instanceof EntityNotFoundError) {\n          throw new NotFoundException(e.message);\n        }\n\n        throw e;\n      }\n    }\n\n    throw new ForbiddenException(\n      'You dont have permissions to delete this role',\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RolesModule.html":{"url":"modules/RolesModule.html","title":"module - RolesModule","body":"\n                   \n\n\n\n\n    Modules\n    RolesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_RolesModule\n\n\n\ncluster_RolesModule_exports\n\n\n\ncluster_RolesModule_providers\n\n\n\n\nRolesService \n\nRolesService \n\n\n\nRolesModule\n\nRolesModule\n\nRolesService  -->\n\nRolesModule->RolesService \n\n\n\n\n\nRolesService\n\nRolesService\n\nRolesModule -->\n\nRolesService->RolesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/roles/roles.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RolesService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RolesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { RoleEntity } from './entities/role.entity';\nimport { RolesService } from './roles.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([RoleEntity])],\n  providers: [RolesService],\n  exports: [RolesService],\n})\nexport class RolesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RolesService.html":{"url":"injectables/RolesService.html","title":"injectable - RolesService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  RolesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/roles/roles.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                attachPermissions\n                            \n                            \n                                create\n                            \n                            \n                                    Async\n                                detachPermissions\n                            \n                            \n                                findAll\n                            \n                            \n                                findByName\n                            \n                            \n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                removeByName\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(roleRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/auth/roles/roles.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        roleRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        attachPermissions\n                        \n                    \n                \n            \n            \n                \n                    \n                    attachPermissions(uuid: string, permissions: PermissionEntity[])\n                \n            \n\n\n            \n                \n                    Defined in src/auth/roles/roles.service.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    uuid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    permissions\n                                    \n                                                PermissionEntity[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createRoleDto: CreateRoleDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/roles/roles.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createRoleDto\n                                    \n                                                CreateRoleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        detachPermissions\n                        \n                    \n                \n            \n            \n                \n                    \n                    detachPermissions(uuid: string, permissions: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/auth/roles/roles.service.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    uuid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    permissions\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/auth/roles/roles.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByName\n                        \n                    \n                \n            \n            \n                \nfindByName(name: string, options?: FindOneOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/roles/roles.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                FindOneOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(uuid: string, options?: FindOneOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/roles/roles.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    uuid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                FindOneOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(uuid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/roles/roles.service.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    uuid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeByName\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeByName(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/roles/roles.service.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(role: string | RoleEntity, updateRoleDto: UpdateRoleDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/roles/roles.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    role\n                                    \n                                                string | RoleEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateRoleDto\n                                    \n                                                UpdateRoleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { FindOneOptions, Repository } from 'typeorm';\nimport { PermissionEntity } from '../permissions/entities/permission.entity';\nimport { CreateRoleDto } from './dto/create-role.dto';\nimport { UpdateRoleDto } from './dto/update-role.dto';\nimport { RoleEntity } from './entities/role.entity';\n\n@Injectable()\nexport class RolesService {\n  constructor(\n    @InjectRepository(RoleEntity)\n    private readonly roleRepository: Repository,\n  ) {}\n\n  create(createRoleDto: CreateRoleDto) {\n    return this.roleRepository.save(new RoleEntity(createRoleDto));\n  }\n\n  findAll() {\n    return this.roleRepository.find();\n  }\n\n  findOne(uuid: string, options?: FindOneOptions) {\n    return this.roleRepository.findOneOrFail(uuid, options);\n  }\n\n  findByName(name: string, options?: FindOneOptions) {\n    return this.roleRepository.findOneOrFail({ name }, options);\n  }\n\n  async update(\n    role: string | RoleEntity,\n    updateRoleDto: UpdateRoleDto,\n  ): Promise {\n    if (typeof role == 'string') {\n      role = await this.findOne(role);\n    }\n\n    return this.roleRepository.save({ ...role, ...updateRoleDto });\n  }\n\n  async remove(uuid: string): Promise {\n    return this.roleRepository.remove(await this.findOne(uuid));\n  }\n\n  async removeByName(name: string): Promise {\n    return this.roleRepository.remove(await this.findByName(name));\n  }\n\n  async attachPermissions(uuid: string, permissions: PermissionEntity[]) {\n    const role = await this.findOne(uuid, { relations: ['permissions'] });\n\n    return this.update(uuid, {\n      permissions: [...role.permissions, ...permissions],\n    });\n  }\n\n  async detachPermissions(uuid: string, permissions: string[]) {\n    const role = await this.findOne(uuid, { relations: ['permissions'] });\n    const deta = role.permissions.filter((e) => !permissions.includes(e.name));\n\n    return this.update(role, { permissions: deta });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SessionDto.html":{"url":"classes/SessionDto.html","title":"class - SessionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SessionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/sessions/dto/session.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        BaseDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                device\n                            \n                            \n                                    Readonly\n                                ip\n                            \n                            \n                                    Readonly\n                                uuid\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(data: SessionEntity)\n                    \n                \n                        \n                            \n                                Defined in src/auth/sessions/dto/session.dto.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                        SessionEntity\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        device\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/sessions/dto/session.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        ip\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/sessions/dto/session.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        uuid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/sessions/dto/session.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { datatype, internet } from 'faker';\nimport { UserDto } from 'src/auth/users/dto/user.dto';\nimport { BaseDto } from 'src/base-dto';\nimport { SessionEntity } from '../entities/session.entity';\n\nexport class SessionDto extends BaseDto {\n  constructor(data: SessionEntity) {\n    super(data);\n\n    if (data.user) Object.assign(this, { user: new UserDto(data.user) });\n  }\n  @ApiProperty({ example: datatype.uuid() })\n  readonly uuid: string;\n\n  @ApiProperty({ example: internet.userAgent() })\n  readonly device: string;\n\n  @ApiProperty({ example: internet.ipv6() + '::' + internet.ip() })\n  readonly ip: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SessionEntity.html":{"url":"classes/SessionEntity.html","title":"class - SessionEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SessionEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/sessions/entities/session.entity.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    BaseEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                createdAt\n                            \n                            \n                                device\n                            \n                            \n                                ip\n                            \n                            \n                                lastSeen\n                            \n                            \n                                user\n                            \n                            \n                                uuid\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/sessions/entities/session.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        device\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/sessions/entities/session.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ip\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/sessions/entities/session.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        lastSeen\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/sessions/entities/session.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/sessions/entities/session.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        uuid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/sessions/entities/session.entity.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { BaseEntity } from 'src/base-entity';\nimport { UserEntity } from 'src/auth/users/entities/user.entity';\nimport { Entity, Column, PrimaryGeneratedColumn, ManyToOne } from 'typeorm';\nimport { CreateSessionDto } from '../dto/create-session.dto';\n\n@Entity({ name: 'auth_sessions' })\nexport class SessionEntity extends BaseEntity {\n  @PrimaryGeneratedColumn('uuid')\n  uuid: string;\n\n  @Column()\n  device: string;\n\n  @Column()\n  ip: string;\n\n  @ManyToOne(() => UserEntity, (user) => user.sessions)\n  user: UserEntity;\n\n  @Column({ default: () => 'CURRENT_TIMESTAMP' })\n  createdAt: Date;\n\n  @Column({ default: () => 'CURRENT_TIMESTAMP' })\n  lastSeen: Date;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SessionsModule.html":{"url":"modules/SessionsModule.html","title":"module - SessionsModule","body":"\n                   \n\n\n\n\n    Modules\n    SessionsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_SessionsModule\n\n\n\ncluster_SessionsModule_exports\n\n\n\ncluster_SessionsModule_providers\n\n\n\n\nSessionsService \n\nSessionsService \n\n\n\nSessionsModule\n\nSessionsModule\n\nSessionsService  -->\n\nSessionsModule->SessionsService \n\n\n\n\n\nSessionsService\n\nSessionsService\n\nSessionsModule -->\n\nSessionsService->SessionsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/sessions/sessions.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SessionsService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SessionsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { SessionsService } from './sessions.service';\nimport { SessionEntity } from './entities/session.entity';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([SessionEntity])],\n  providers: [SessionsService],\n  exports: [SessionsService],\n})\nexport class SessionsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SessionsService.html":{"url":"injectables/SessionsService.html","title":"injectable - SessionsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  SessionsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/sessions/sessions.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                getUser\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                seen\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(sessionRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/auth/sessions/sessions.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        sessionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createSessionDto: CreateSessionDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/sessions/sessions.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createSessionDto\n                                    \n                                                CreateSessionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/auth/sessions/sessions.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(uuid: string, options?: FindOneOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/sessions/sessions.service.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    uuid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                FindOneOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUser(uuid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/sessions/sessions.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    uuid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(uuid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/sessions/sessions.service.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    uuid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        seen\n                        \n                    \n                \n            \n            \n                \n                    \n                    seen(uuid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/sessions/sessions.service.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    uuid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(uuid: string, updateSessionDto: UpdateSessionDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/sessions/sessions.service.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    uuid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateSessionDto\n                                    \n                                                UpdateSessionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { FindOneOptions, Repository } from 'typeorm';\nimport { UserDto } from '../users/dto/user.dto';\nimport { CreateSessionDto } from './dto/create-session.dto';\nimport { SessionDto } from './dto/session.dto';\nimport { UpdateSessionDto } from './dto/update-session.dto';\nimport { SessionEntity } from './entities/session.entity';\n\n@Injectable()\nexport class SessionsService {\n  constructor(\n    @InjectRepository(SessionEntity)\n    private sessionRepository: Repository,\n  ) {}\n\n  async create(createSessionDto: CreateSessionDto): Promise {\n    const session = await this.sessionRepository.save(\n      new SessionEntity(createSessionDto),\n    );\n\n    return new SessionDto(session);\n  }\n\n  findAll() {\n    return `This action returns all sessions`;\n  }\n\n  async findOne(uuid: string, options?: FindOneOptions) {\n    const session = await this.sessionRepository.findOneOrFail(uuid, options);\n\n    return new SessionDto(session);\n  }\n\n  async getUser(uuid: string): Promise {\n    const session = await this.sessionRepository.findOneOrFail(uuid, {\n      relations: ['user'],\n    });\n\n    return (session.user && new UserDto(session.user)) || null;\n  }\n\n  async seen(uuid: string): Promise {\n    return this.update(uuid, { lastSeen: new Date() });\n  }\n\n  async update(\n    uuid: string,\n    updateSessionDto: UpdateSessionDto,\n  ): Promise {\n    const session = await this.sessionRepository.findOneOrFail(uuid);\n\n    Object.assign(session, updateSessionDto);\n\n    return this.sessionRepository\n      .save(session)\n      .then((session) => new SessionDto(session));\n  }\n\n  async remove(uuid: string) {\n    return this.sessionRepository\n      .remove(await this.sessionRepository.findOneOrFail(uuid))\n      .then((session) => new SessionDto(session));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SuratModule.html":{"url":"modules/SuratModule.html","title":"module - SuratModule","body":"\n                   \n\n\n\n\n    Modules\n    SuratModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_SuratModule\n\n\n\ncluster_SuratModule_providers\n\n\n\n\nSuratService\n\nSuratService\n\n\n\nSuratModule\n\nSuratModule\n\nSuratModule -->\n\nSuratService->SuratModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/pdd/surat/surat.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SuratService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { SuratService } from './surat.service';\n\n@Module({\n  providers: [SuratService],\n})\nexport class SuratModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SuratService.html":{"url":"injectables/SuratService.html","title":"injectable - SuratService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  SuratService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pdd/surat/surat.service.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class SuratService {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateArticleDto.html":{"url":"classes/UpdateArticleDto.html","title":"class - UpdateArticleDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateArticleDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/article/articles/dto/update-article.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateArticleDto } from './create-article.dto';\n\nexport class UpdateArticleDto extends PartialType(CreateArticleDto) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateCategoryDto.html":{"url":"classes/UpdateCategoryDto.html","title":"class - UpdateCategoryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateCategoryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/article/categories/dto/update-category.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateCategoryDto } from './create-category.dto';\n\nexport class UpdateCategoryDto extends PartialType(CreateCategoryDto) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdatePermissionDto.html":{"url":"classes/UpdatePermissionDto.html","title":"class - UpdatePermissionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdatePermissionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/permissions/dto/update-permission.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreatePermissionDto } from './create-permission.dto';\n\nexport class UpdatePermissionDto extends PartialType(CreatePermissionDto) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateRoleDto.html":{"url":"classes/UpdateRoleDto.html","title":"class - UpdateRoleDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateRoleDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/roles/dto/update-role.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                permissions\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        permissions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PermissionEntity[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/roles/dto/update-role.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { PermissionEntity } from 'src/auth/permissions/entities/permission.entity';\nimport { CreateRoleDto } from './create-role.dto';\nimport { Type } from 'class-transformer';\nimport { PermissionDto } from 'src/auth/permissions/dto/permission.dto';\n\nexport class UpdateRoleDto extends PartialType(CreateRoleDto) {\n  @Type(() => PermissionDto)\n  permissions?: PermissionEntity[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateSessionDto.html":{"url":"classes/UpdateSessionDto.html","title":"class - UpdateSessionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateSessionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/sessions/dto/update-session.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                lastSeen\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        lastSeen\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDate()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/sessions/dto/update-session.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsDate } from 'class-validator';\nimport { PartialType } from '@nestjs/mapped-types';\nimport { CreateSessionDto } from './create-session.dto';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class UpdateSessionDto extends PartialType(CreateSessionDto) {\n  @ApiProperty()\n  @IsDate()\n  @IsNotEmpty()\n  readonly lastSeen: Date;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/users/dto/update-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                password\n                            \n                            \n                                    Optional\n                                permissions\n                            \n                            \n                                    Optional\n                                roles\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/users/dto/update-user.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        permissions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PermissionEntity[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/users/dto/update-user.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        roles\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RoleEntity[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/users/dto/update-user.dto.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateUserDto } from './create-user.dto';\nimport { IsNotEmpty, IsString } from 'class-validator';\nimport { Type } from 'class-transformer';\nimport { PermissionEntity } from 'src/auth/permissions/entities/permission.entity';\nimport { RoleEntity } from 'src/auth/roles/entities/role.entity';\n\nexport class UpdateUserDto extends PartialType(CreateUserDto) {\n  @IsNotEmpty()\n  @IsString()\n  readonly password?: string;\n\n  @Type(() => PermissionEntity)\n  permissions?: PermissionEntity[];\n\n  @Type(() => RoleEntity)\n  roles?: RoleEntity[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserRequestDto.html":{"url":"classes/UpdateUserRequestDto.html","title":"class - UpdateUserRequestDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserRequestDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/users/dto/update-user-request.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                currentPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        currentPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: fakerGeneratedPassword, description: 'kata sandi saat ini'})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/users/dto/update-user-request.dto.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString } from 'class-validator';\nimport { datatype } from 'faker';\nimport {\n  CreateUserRequestDto,\n  fakerGeneratedPassword,\n} from './create-user-request.dto';\n\nexport class UpdateUserRequestDto extends PartialType(CreateUserRequestDto) {\n  @ApiProperty({\n    example: fakerGeneratedPassword,\n    description: 'kata sandi saat ini',\n  })\n  @IsNotEmpty()\n  @IsString()\n  readonly currentPassword: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserDto.html":{"url":"classes/UserDto.html","title":"class - UserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/users/dto/user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        BaseDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                createdAt\n                            \n                            \n                                    Readonly\n                                email\n                            \n                            \n                                    Readonly\n                                name\n                            \n                            \n                                    Readonly\n                                    Optional\n                                password\n                            \n                            \n                                    Readonly\n                                updatedAt\n                            \n                            \n                                    Readonly\n                                username\n                            \n                            \n                                    Readonly\n                                uuid\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    noPassword\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: undefined, description: 'tanggal pembuatan akun'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/users/dto/user.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: undefined, description: 'alamat email pemilik akun'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/users/dto/user.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: undefined, description: 'nama lengkap pemilik akun'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/users/dto/user.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/users/dto/user.dto.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: undefined, description: 'tanggal terakhir diupdate'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/users/dto/user.dto.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: undefined, description: 'nama pengguna'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/users/dto/user.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        uuid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/users/dto/user.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        noPassword\n                    \n                \n\n                \n                    \n                        getnoPassword()\n                    \n                \n                            \n                                \n                                    Defined in src/auth/users/dto/user.dto.ts:36\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { datatype, date, internet, name } from 'faker';\nimport { BaseDto } from 'src/base-dto';\nimport { UserEntity } from '../entities/user.entity';\n\nexport class UserDto extends BaseDto {\n  @ApiProperty({ example: datatype.uuid() })\n  readonly uuid: string;\n\n  @ApiProperty({\n    example: name.firstName() + ' ' + name.lastName(),\n    description: 'nama lengkap pemilik akun',\n  })\n  readonly name: string;\n\n  @ApiProperty({\n    example: internet.email(),\n    description: 'alamat email pemilik akun',\n  })\n  readonly email: string;\n\n  @ApiProperty({ example: internet.userName(), description: 'nama pengguna' })\n  readonly username: string;\n\n  @ApiProperty({ example: date.past(), description: 'tanggal pembuatan akun' })\n  readonly createdAt: string;\n\n  @ApiProperty({\n    example: date.past(),\n    description: 'tanggal terakhir diupdate',\n  })\n  readonly updatedAt: string;\n\n  readonly password?: string;\n\n  get noPassword(): UserDto {\n    return { ...this, password: undefined };\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserEntity.html":{"url":"classes/UserEntity.html","title":"class - UserEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/users/entities/user.entity.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    BaseEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                articles\n                            \n                            \n                                createdAt\n                            \n                            \n                                email\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                            \n                                permissions\n                            \n                            \n                                roles\n                            \n                            \n                                sessions\n                            \n                            \n                                updatedAt\n                            \n                            \n                                username\n                            \n                            \n                                uuid\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    noPassword\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        articles\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ArticleEntity[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/users/entities/user.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/users/entities/user.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/users/entities/user.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/users/entities/user.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/users/entities/user.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        permissions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PermissionEntity[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, undefined)@JoinTable()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/users/entities/user.entity.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        roles\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RoleEntity[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, undefined)@JoinTable()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/users/entities/user.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sessions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SessionEntity[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/users/entities/user.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/users/entities/user.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/users/entities/user.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        uuid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/users/entities/user.entity.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        noPassword\n                    \n                \n\n                \n                    \n                        getnoPassword()\n                    \n                \n                            \n                                \n                                    Defined in src/auth/users/entities/user.entity.ts:53\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { BaseEntity } from 'src/base-entity';\nimport { ArticleEntity } from 'src/article/articles/entities/article.entity';\nimport { PermissionEntity } from 'src/auth/permissions/entities/permission.entity';\nimport { RoleEntity } from 'src/auth/roles/entities/role.entity';\nimport { SessionEntity } from 'src/auth/sessions/entities/session.entity';\nimport {\n  Entity,\n  Column,\n  PrimaryGeneratedColumn,\n  OneToMany,\n  ManyToMany,\n  JoinTable,\n} from 'typeorm';\nimport { CreateUserDto } from '../dto/create-user.dto';\n\n@Entity({ name: 'auth_users' })\nexport class UserEntity extends BaseEntity {\n  @PrimaryGeneratedColumn('uuid')\n  uuid: string;\n\n  @Column()\n  name: string;\n\n  @Column({ unique: true })\n  email: string;\n\n  @Column({ unique: true })\n  username: string;\n\n  @Column()\n  password: string;\n\n  @OneToMany(() => SessionEntity, (session) => session.user)\n  sessions: SessionEntity[];\n\n  @Column({ default: () => 'CURRENT_TIMESTAMP' })\n  createdAt: Date;\n\n  @Column({ nullable: true })\n  updatedAt: Date;\n\n  @OneToMany(() => ArticleEntity, (article) => article.user)\n  articles: ArticleEntity[];\n\n  @ManyToMany(() => PermissionEntity, (permission) => permission.users)\n  @JoinTable()\n  permissions: PermissionEntity[];\n\n  @ManyToMany(() => RoleEntity, (role) => role.users)\n  @JoinTable()\n  roles: RoleEntity[];\n\n  get noPassword(): this {\n    return { ...this, password: undefined };\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersApiController.html":{"url":"controllers/UsersApiController.html","title":"controller - UsersApiController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersApiController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/http/api/controllers/users.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                get\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(userUuid: string, data: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@ApiOperation({summary: 'mendaftarkan pengguna baru'})@ApiOkResponse({type: UserDto, description: 'data pengguna yang baru saja didaftarkan'})@UseGuards(JwtAuthGuard)@Post()\n                \n            \n\n            \n                \n                    Defined in src/http/api/controllers/users.controller.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userUuid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(authUuid: string, uuid: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@ApiOperation({summary: 'menghapus pengguna'})@ApiOkResponse({type: UserDto, description: 'data pengguna yang baru saja dihapus'})@UseGuards(JwtAuthGuard)@Delete(':uuid')\n                \n            \n\n            \n                \n                    Defined in src/http/api/controllers/users.controller.ts:117\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authUuid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    uuid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get(username: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@ApiOperation({summary: 'mengabil data pengguna berdasarkan username'})@ApiParam({name: 'username', example: 'lingu', description: 'username pengguna yang akan dicari'})@ApiOkResponse({type: UserDto, description: 'data pengguna yang diperoleh dari username'})@Get(':username')\n                \n            \n\n            \n                \n                    Defined in src/http/api/controllers/users.controller.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(authUuid: string, uuid: string, data: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@ApiOperation({summary: 'memperbaharui data pengguna'})@ApiOkResponse({type: UserDto, description: 'data pengguna yang baru saja diperbaharui'})@UseGuards(JwtAuthGuard)@Patch(':uuid')\n                \n            \n\n            \n                \n                    Defined in src/http/api/controllers/users.controller.ts:85\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authUuid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    uuid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  ForbiddenException,\n  Get,\n  NotFoundException,\n  Param,\n  Patch,\n  Post,\n  UseGuards,\n} from '@nestjs/common';\nimport {\n  ApiBearerAuth,\n  ApiOkResponse,\n  ApiOperation,\n  ApiParam,\n  ApiTags,\n} from '@nestjs/swagger';\nimport { JwtAuthGuard } from 'src/http/guards/jwt-auth.guard';\nimport { User } from 'src/http/decorators/user.decorator';\nimport { CreateUserDto } from 'src/auth/users/dto/create-user.dto';\nimport { UpdateUserDto } from 'src/auth/users/dto/update-user.dto';\nimport { UserDto } from 'src/auth/users/dto/user.dto';\nimport { UsersService } from 'src/auth/users/users.service';\nimport { EntityNotFoundError } from 'typeorm';\n\n@ApiTags('users')\n@Controller({ version: '1', path: 'users' })\nexport class UsersApiController {\n  constructor(private readonly usersService: UsersService) {}\n\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'mengabil data pengguna berdasarkan username' })\n  @ApiParam({\n    name: 'username',\n    example: 'lingu',\n    description: 'username pengguna yang akan dicari',\n  })\n  @ApiOkResponse({\n    type: UserDto,\n    description: 'data pengguna yang diperoleh dari username',\n  })\n  @Get(':username')\n  async get(@Param('username') username: string) {\n    try {\n      const user = await this.usersService.findByUsername(username);\n\n      return user.noPassword;\n    } catch (e) {\n      if (e instanceof EntityNotFoundError) {\n        throw new NotFoundException(e.message);\n      }\n\n      throw e;\n    }\n  }\n\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'mendaftarkan pengguna baru' })\n  @ApiOkResponse({\n    type: UserDto,\n    description: 'data pengguna yang baru saja didaftarkan',\n  })\n  @UseGuards(JwtAuthGuard)\n  @Post()\n  async create(@User('uuid') userUuid: string, @Body() data: CreateUserDto) {\n    const createable = await this.usersService.userCan(userUuid, 'create user');\n\n    if (createable) return (await this.usersService.create(data)).noPassword;\n\n    throw new ForbiddenException(\n      'You dont have permissions to create new user',\n    );\n  }\n\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'memperbaharui data pengguna' })\n  @ApiOkResponse({\n    type: UserDto,\n    description: 'data pengguna yang baru saja diperbaharui',\n  })\n  @UseGuards(JwtAuthGuard)\n  @Patch(':uuid')\n  async update(\n    @User('uuid') authUuid: string,\n    @Param('uuid') uuid: string,\n    @Body() data: UpdateUserDto,\n  ) {\n    const updateable = await this.usersService.userCan(authUuid, 'update user');\n\n    if (updateable || authUuid == uuid) {\n      try {\n        return (await this.usersService.update(uuid, data)).noPassword;\n      } catch (e) {\n        if (e instanceof EntityNotFoundError) {\n          throw new NotFoundException(e.message);\n        }\n\n        throw e;\n      }\n    }\n\n    throw new ForbiddenException(\n      'You dont have permissions to update this user',\n    );\n  }\n\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'menghapus pengguna' })\n  @ApiOkResponse({\n    type: UserDto,\n    description: 'data pengguna yang baru saja dihapus',\n  })\n  @UseGuards(JwtAuthGuard)\n  @Delete(':uuid')\n  async delete(@User('uuid') authUuid: string, @Param('uuid') uuid: string) {\n    const deletable = this.usersService.userCan(authUuid, 'delete user');\n\n    if (deletable && authUuid != uuid) {\n      try {\n        return (await this.usersService.remove(uuid)).noPassword;\n      } catch (e) {\n        if (e instanceof EntityNotFoundError) {\n          throw new NotFoundException(e.message);\n        }\n\n        throw e;\n      }\n    }\n\n    throw new ForbiddenException(\n      'You dont have permissions to delete this user',\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsersModule_exports\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { UserEntity } from './entities/user.entity';\nimport { UsersService } from './users.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([UserEntity])],\n  providers: [UsersService],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                attachPermissions\n                            \n                            \n                                    Async\n                                attachRoles\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                detachPermissions\n                            \n                            \n                                    Async\n                                detachRoles\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                findByEmail\n                            \n                            \n                                    Async\n                                findByUsername\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                findOneByOptions\n                            \n                            \n                                    Async\n                                hasPermissions\n                            \n                            \n                                    Async\n                                hasRoles\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                take\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                userCan\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/auth/users/users.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        attachPermissions\n                        \n                    \n                \n            \n            \n                \n                    \n                    attachPermissions(uuid: string, permissions: PermissionEntity[])\n                \n            \n\n\n            \n                \n                    Defined in src/auth/users/users.service.ts:102\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    uuid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    permissions\n                                    \n                                                PermissionEntity[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        attachRoles\n                        \n                    \n                \n            \n            \n                \n                    \n                    attachRoles(uuid: string, roles: RoleEntity[])\n                \n            \n\n\n            \n                \n                    Defined in src/auth/users/users.service.ts:124\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    uuid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    roles\n                                    \n                                                RoleEntity[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/users/users.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        detachPermissions\n                        \n                    \n                \n            \n            \n                \n                    \n                    detachPermissions(uuid: string, permissions: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/auth/users/users.service.ts:112\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    uuid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    permissions\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        detachRoles\n                        \n                    \n                \n            \n            \n                \n                    \n                    detachRoles(uuid: string, roles: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/auth/users/users.service.ts:134\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    uuid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    roles\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/auth/users/users.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByEmail\n                        \n                    \n                \n            \n            \n                \nfindByEmail(email: string, options?: FindOneOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/users/users.service.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                FindOneOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByUsername(username: string, options?: FindOneOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/users/users.service.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                FindOneOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(uuid: string, options?: FindOneOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/users/users.service.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    uuid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                FindOneOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneByOptions\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByOptions(options?: FindOneOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/users/users.service.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                FindOneOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        hasPermissions\n                        \n                    \n                \n            \n            \n                \n                    \n                    hasPermissions(uuid: string, ...permissions: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/auth/users/users.service.ts:144\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    uuid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    permissions\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        hasRoles\n                        \n                    \n                \n            \n            \n                \n                    \n                    hasRoles(uuid: string, ...roles: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/auth/users/users.service.ts:164\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    uuid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    roles\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(uuid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/users/users.service.ts:96\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    uuid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        take\n                        \n                    \n                \n            \n            \n                \n                    \n                    take(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/users/users.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(uuid: string, updateUserDto: UpdateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/users/users.service.ts:82\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    uuid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        userCan\n                        \n                    \n                \n            \n            \n                \n                    \n                    userCan(uuid: string, ...permissions: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/auth/users/users.service.ts:176\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    uuid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    permissions\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { genSaltSync, hashSync } from 'bcrypt';\nimport { Brackets, FindOneOptions, Repository } from 'typeorm';\nimport { PermissionEntity } from '../permissions/entities/permission.entity';\nimport { RoleEntity } from '../roles/entities/role.entity';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { UserDto } from './dto/user.dto';\nimport { UserEntity } from './entities/user.entity';\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    @InjectRepository(UserEntity)\n    private readonly usersRepository: Repository,\n  ) {}\n\n  async create(createUserDto: CreateUserDto): Promise {\n    const pass = hashSync(createUserDto.password, genSaltSync(10));\n    const user = await this.usersRepository.save(\n      new UserEntity({ ...createUserDto, password: pass }),\n    );\n\n    return new UserDto(user);\n  }\n\n  async take({\n    take,\n    page,\n  }: {\n    take: number;\n    page: number;\n  }): Promise {\n    const skip = page * take - take;\n    const users = await this.usersRepository.find({ take, skip });\n\n    return users.map((user) => new UserDto(user));\n  }\n\n  async findAll(): Promise {\n    const users = await this.usersRepository.find();\n\n    return users.map((user) => new UserDto(user));\n  }\n\n  async findOne(\n    uuid: string,\n    options?: FindOneOptions,\n  ): Promise {\n    const user = await this.usersRepository.findOneOrFail(uuid, options);\n\n    return new UserDto(user);\n  }\n\n  async findOneByOptions(\n    options?: FindOneOptions,\n  ): Promise {\n    const user = await this.usersRepository.findOneOrFail(options);\n\n    return new UserDto(user);\n  }\n\n  async findByUsername(\n    username: string,\n    options?: FindOneOptions,\n  ): Promise {\n    const user = await this.usersRepository.findOneOrFail(\n      { username },\n      options,\n    );\n    return new UserDto(user);\n  }\n\n  findByEmail(\n    email: string,\n    options?: FindOneOptions,\n  ): Promise {\n    return this.usersRepository.findOneOrFail({ email }, options);\n  }\n\n  async update(uuid: string, updateUserDto: UpdateUserDto): Promise {\n    const user = await this.usersRepository.findOneOrFail(uuid);\n\n    if (updateUserDto.password) {\n      const password = hashSync(updateUserDto.password, genSaltSync(10));\n\n      Object.assign(updateUserDto, { password });\n    }\n\n    Object.assign(user, updateUserDto);\n\n    return this.usersRepository.save(user).then((user) => new UserDto(user));\n  }\n\n  async remove(uuid: string): Promise {\n    const user = await this.usersRepository.findOneOrFail(uuid);\n\n    return this.usersRepository.remove(user).then((user) => new UserDto(user));\n  }\n\n  async attachPermissions(uuid: string, permissions: PermissionEntity[]) {\n    const user = await this.usersRepository.findOneOrFail(uuid, {\n      relations: ['permissions'],\n    });\n\n    return this.update(uuid, {\n      permissions: [...user.permissions, ...permissions],\n    });\n  }\n\n  async detachPermissions(uuid: string, permissions: string[]) {\n    const user = await this.usersRepository.findOneOrFail(uuid, {\n      relations: ['permissions'],\n    });\n\n    return this.update(uuid, {\n      permissions: user.permissions.filter(\n        (e) => !permissions.includes(e.name),\n      ),\n    });\n  }\n\n  async attachRoles(uuid: string, roles: RoleEntity[]) {\n    const user = await this.usersRepository.findOneOrFail(uuid, {\n      relations: ['roles'],\n    });\n\n    return this.update(uuid, {\n      roles: [...user.roles, ...roles],\n    });\n  }\n\n  async detachRoles(uuid: string, roles: string[]) {\n    const user = await this.usersRepository.findOneOrFail(uuid, {\n      relations: ['roles'],\n    });\n\n    return this.update(uuid, {\n      roles: user.roles.filter((e) => !roles.includes(e.name)),\n    });\n  }\n\n  async hasPermissions(uuid: string, ...permissions: string[]) {\n    const count = await this.usersRepository\n      .createQueryBuilder('user')\n      .leftJoin('user.permissions', 'permission')\n      .leftJoin('user.roles', 'role')\n      .leftJoin('role.permissions', 'rolePermission')\n      .where('user.uuid = :uuid')\n      .andWhere(\n        new Brackets((qb) => {\n          qb.where('permission.name IN (:permissions)');\n          qb.orWhere('rolePermission.name IN (:permissions)');\n        }),\n      )\n\n      .setParameters({ uuid, permissions })\n      .getCount();\n\n    return count > 0;\n  }\n\n  async hasRoles(uuid: string, ...roles: string[]) {\n    const count = await this.usersRepository\n      .createQueryBuilder('user')\n      .leftJoin('user.roles', 'role')\n      .where('user.uuid = :uuid')\n      .andWhere('role.name IN (:roles)')\n      .setParameters({ uuid, roles })\n      .getCount();\n\n    return count > 0;\n  }\n\n  async userCan(uuid: string, ...permissions: string[]) {\n    const isSuper = await this.hasRoles(uuid, 'super');\n\n    return isSuper || (await this.hasPermissions(uuid, ...permissions));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/WebModule.html":{"url":"modules/WebModule.html","title":"module - WebModule","body":"\n                   \n\n\n\n\n    Modules\n    WebModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/http/web/web.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            HaloController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { HaloController } from './halo/halo.controller';\n\n@Module({\n  controllers: [HaloController],\n})\nexport class WebModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/article/articles/articles.service.ts\n            \n            injectable\n            ArticlesService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/article/articles/dto/create-article.dto.ts\n            \n            class\n            CreateArticleDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/article/articles/dto/update-article.dto.ts\n            \n            class\n            UpdateArticleDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/article/articles/entities/article.entity.ts\n            \n            class\n            ArticleEntity\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/article/categories/categories.service.ts\n            \n            injectable\n            CategoriesService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/article/categories/dto/create-category.dto.ts\n            \n            class\n            CreateCategoryDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/article/categories/dto/update-category.dto.ts\n            \n            class\n            UpdateCategoryDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/article/categories/entities/category.entity.ts\n            \n            class\n            CategoryEntity\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/constants.ts\n            \n            variable\n            jwtConstants\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/permissions/dto/create-permission.dto.ts\n            \n            class\n            CreatePermissionDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/permissions/dto/permission.dto.ts\n            \n            class\n            PermissionDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/permissions/dto/update-permission.dto.ts\n            \n            class\n            UpdatePermissionDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/permissions/entities/permission.entity.ts\n            \n            class\n            PermissionEntity\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/permissions/permissions.service.ts\n            \n            injectable\n            PermissionsService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/auth/roles/dto/create-role.dto.ts\n            \n            class\n            CreateRoleDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/roles/dto/role.dto.ts\n            \n            class\n            RoleDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/roles/dto/update-role.dto.ts\n            \n            class\n            UpdateRoleDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/roles/entities/role.entity.ts\n            \n            class\n            RoleEntity\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/roles/roles.service.ts\n            \n            injectable\n            RolesService\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/auth/sessions/dto/create-session.dto.ts\n            \n            class\n            CreateSessionDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/sessions/dto/session.dto.ts\n            \n            class\n            SessionDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/sessions/dto/update-session.dto.ts\n            \n            class\n            UpdateSessionDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/sessions/entities/session.entity.ts\n            \n            class\n            SessionEntity\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/auth/sessions/sessions.service.ts\n            \n            injectable\n            SessionsService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/auth/strategies/basic.strategy.ts\n            \n            injectable\n            BasicStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategies/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategies/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/users/dto/create-user-request.dto.ts\n            \n            class\n            CreateUserRequestDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/users/dto/create-user-request.dto.ts\n            \n            variable\n            fakerGeneratedPassword\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/auth/users/dto/update-user-request.dto.ts\n            \n            class\n            UpdateUserRequestDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/users/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/users/dto/user.dto.ts\n            \n            class\n            UserDto\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/auth/users/entities/user.entity.ts\n            \n            class\n            UserEntity\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/auth/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/18)\n            \n        \n        \n            \n                \n                src/base-controller.ts\n            \n            class\n            BaseController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/base-dto.ts\n            \n            class\n            BaseDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/base-entity.ts\n            \n            class\n            LocalBaseEntity\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/http/api/controllers/articles.controller.ts\n            \n            controller\n            ArticlesApiController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/http/api/controllers/auth.controller.ts\n            \n            controller\n            AuthApiController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/http/api/controllers/categories.controller.ts\n            \n            controller\n            CategoriesApiController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/http/api/controllers/permissions.controller.ts\n            \n            controller\n            PermissionsApiController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/http/api/controllers/roles.controller.ts\n            \n            controller\n            RolesApiController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/http/api/controllers/users.controller.ts\n            \n            controller\n            UsersApiController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/http/decorators/can.decorator.ts\n            \n            variable\n            Can\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/http/decorators/has-roles.decorator.ts\n            \n            variable\n            HasRoles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/http/decorators/user.decorator.ts\n            \n            variable\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/http/guards/basic-auth.guard.ts\n            \n            injectable\n            BasicAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/http/guards/can.guard.ts\n            \n            guard\n            CanGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/http/guards/has-roles.guard.ts\n            \n            guard\n            HasRolesGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/http/guards/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/http/guards/local-auth.guard.ts\n            \n            injectable\n            LocalAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/http/sessions/decorators/active-session.decorator.ts\n            \n            variable\n            ActiveSession\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/http/web/halo/halo.controller.ts\n            \n            controller\n            HaloController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/pdd/surat/surat.service.ts\n            \n            injectable\n            SuratService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/validator/decorators/is-equal-to.decorator.ts\n            \n            function\n            IsEqualTo\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/validator/decorators/is-exists.decorator.ts\n            \n            function\n            IsExists\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/validator/decorators/is-unique.decorator.ts\n            \n            function\n            IsUnique\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/validator/decorators/slug.decorator.ts\n            \n            function\n            Slug\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/axios : ^0.0.1\n        \n            @nestjs/bull : ^0.4.1\n        \n            @nestjs/common : ^8.0.0\n        \n            @nestjs/core : ^8.0.0\n        \n            @nestjs/event-emitter : ^1.0.0\n        \n            @nestjs/jwt : ^8.0.0\n        \n            @nestjs/passport : ^8.0.1\n        \n            @nestjs/platform-express : ^8.0.0\n        \n            @nestjs/platform-socket.io : ^8.0.5\n        \n            @nestjs/schedule : ^1.0.1\n        \n            @nestjs/serve-static : ^2.2.2\n        \n            @nestjs/swagger : ^5.0.9\n        \n            @nestjs/throttler : ^2.0.0\n        \n            @nestjs/typeorm : ^8.0.2\n        \n            @nestjs/websockets : ^8.0.5\n        \n            bcrypt : ^5.0.1\n        \n            bull : ^3.27.0\n        \n            class-transformer : ^0.4.0\n        \n            class-validator : ^0.13.1\n        \n            compression : ^1.7.4\n        \n            cookie-parser : ^1.4.5\n        \n            csurf : ^1.11.0\n        \n            dotenv : ^8.6.0\n        \n            express-session : ^1.17.2\n        \n            faker : ^5.5.3\n        \n            hbs : ^4.1.2\n        \n            mysql2 : ^2.2.5\n        \n            officegen : ^0.6.5\n        \n            passport : ^0.4.1\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            slugify : ^1.6.0\n        \n            sqlite3 : ^4.2.0\n        \n            swagger-ui-express : ^4.1.6\n        \n            typeorm : ^0.2.36\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            IsEqualTo   (src/.../is-equal-to.decorator.ts)\n                        \n                        \n                            IsExists   (src/.../is-exists.decorator.ts)\n                        \n                        \n                            IsUnique   (src/.../is-unique.decorator.ts)\n                        \n                        \n                            Slug   (src/.../slug.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/validator/decorators/is-equal-to.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IsEqualTo\n                        \n                    \n                \n            \n            \n                \nIsEqualTo(property, validationOptions?)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    property\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    validationOptions\n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/validator/decorators/is-exists.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IsExists\n                        \n                    \n                \n            \n            \n                \nIsExists(target, validationOptions?)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    target\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    validationOptions\n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/validator/decorators/is-unique.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IsUnique\n                        \n                    \n                \n            \n            \n                \nIsUnique(target, validationOptions?)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    target\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    validationOptions\n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/validator/decorators/slug.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Slug\n                        \n                    \n                \n            \n            \n                \nSlug(target, validationOptions?)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    target\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    validationOptions\n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\nnestcafold\nnestcafold\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        ApiModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ArticlesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CategoriesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PermissionsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RolesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SessionsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SuratModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        WebModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ApiModule\n\n\n\ncluster_ApiModule_imports\n\n\n\ncluster_ArticlesModule\n\n\n\ncluster_ArticlesModule_exports\n\n\n\ncluster_ArticlesModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CategoriesModule\n\n\n\ncluster_CategoriesModule_exports\n\n\n\ncluster_CategoriesModule_providers\n\n\n\ncluster_PermissionsModule\n\n\n\ncluster_PermissionsModule_exports\n\n\n\ncluster_PermissionsModule_providers\n\n\n\ncluster_RolesModule\n\n\n\ncluster_RolesModule_exports\n\n\n\ncluster_RolesModule_providers\n\n\n\ncluster_SessionsModule\n\n\n\ncluster_SessionsModule_exports\n\n\n\ncluster_SessionsModule_providers\n\n\n\ncluster_SuratModule\n\n\n\ncluster_SuratModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nArticlesModule\n\nArticlesModule\n\n\n\nApiModule\n\nApiModule\n\nApiModule -->\n\nArticlesModule->ApiModule\n\n\n\n\n\nArticlesService \n\nArticlesService \n\nArticlesService  -->\n\nArticlesModule->ArticlesService \n\n\n\n\n\nAuthModule\n\nAuthModule\n\nApiModule -->\n\nAuthModule->ApiModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nCategoriesModule\n\nCategoriesModule\n\nApiModule -->\n\nCategoriesModule->ApiModule\n\n\n\n\n\nCategoriesService \n\nCategoriesService \n\nCategoriesService  -->\n\nCategoriesModule->CategoriesService \n\n\n\n\n\nPermissionsModule\n\nPermissionsModule\n\nAuthModule -->\n\nPermissionsModule->AuthModule\n\n\n\nApiModule -->\n\nPermissionsModule->ApiModule\n\n\n\n\n\nPermissionsService \n\nPermissionsService \n\nPermissionsService  -->\n\nPermissionsModule->PermissionsService \n\n\n\n\n\nRolesModule\n\nRolesModule\n\nAuthModule -->\n\nRolesModule->AuthModule\n\n\n\nApiModule -->\n\nRolesModule->ApiModule\n\n\n\n\n\nRolesService \n\nRolesService \n\nRolesService  -->\n\nRolesModule->RolesService \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\nApiModule -->\n\nUsersModule->ApiModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nArticlesService\n\nArticlesService\n\nArticlesModule -->\n\nArticlesService->ArticlesModule\n\n\n\n\n\nSessionsModule\n\nSessionsModule\n\nAuthModule -->\n\nSessionsModule->AuthModule\n\n\n\n\n\nSessionsService \n\nSessionsService \n\nSessionsService  -->\n\nSessionsModule->SessionsService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nBasicStrategy\n\nBasicStrategy\n\nAuthModule -->\n\nBasicStrategy->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nCategoriesService\n\nCategoriesService\n\nCategoriesModule -->\n\nCategoriesService->CategoriesModule\n\n\n\n\n\nPermissionsService\n\nPermissionsService\n\nPermissionsModule -->\n\nPermissionsService->PermissionsModule\n\n\n\n\n\nRolesService\n\nRolesService\n\nRolesModule -->\n\nRolesService->RolesModule\n\n\n\n\n\nSessionsService\n\nSessionsService\n\nSessionsModule -->\n\nSessionsService->SessionsModule\n\n\n\n\n\nSuratService\n\nSuratService\n\n\n\nSuratModule\n\nSuratModule\n\nSuratModule -->\n\nSuratService->SuratModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        10 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    7 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    14 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    27 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Guards\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ActiveSession   (src/.../active-session.decorator.ts)\n                        \n                        \n                            Can   (src/.../can.decorator.ts)\n                        \n                        \n                            fakerGeneratedPassword   (src/.../create-user-request.dto.ts)\n                        \n                        \n                            HasRoles   (src/.../has-roles.decorator.ts)\n                        \n                        \n                            jwtConstants   (src/.../constants.ts)\n                        \n                        \n                            User   (src/.../user.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/http/sessions/decorators/active-session.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ActiveSession\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: string, context: ExecutionContext) => {\n    const request: { activeSession: SessionEntity } = context\n      .switchToHttp()\n      .getRequest();\n\n    if (request.activeSession) {\n      return (data && request.activeSession[data]) || request.activeSession;\n    }\n\n    throw new UnauthorizedException();\n  },\n)\n                    \n                \n\n\n        \n    \n\n    src/http/decorators/can.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Can\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...args: string[]) => SetMetadata('ability', args)\n                    \n                \n\n\n        \n    \n\n    src/auth/users/dto/create-user-request.dto.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        fakerGeneratedPassword\n                        \n                    \n                \n            \n                \n                    \n                        Default value : internet.password()\n                    \n                \n\n\n        \n    \n\n    src/http/decorators/has-roles.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        HasRoles\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...args: string[]) => SetMetadata('roles', args)\n                    \n                \n\n\n        \n    \n\n    src/auth/constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        jwtConstants\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  secret: '375b3d55c0331917a66eb7c04743805d6cf53b72', // php7 hash('haval160,4',  hash('sha512', 'lingusecret'))\n}\n                    \n                \n\n\n        \n    \n\n    src/http/decorators/user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        User\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: string, context: ExecutionContext) => {\n    const request: { user: UserDto } = context.switchToHttp().getRequest();\n\n    if (request.user) {\n      return (data && request.user[data]) || request.user;\n    }\n\n    throw new UnauthorizedException();\n  },\n)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
